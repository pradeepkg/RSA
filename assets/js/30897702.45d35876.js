"use strict";(self.webpackChunkdocku=self.webpackChunkdocku||[]).push([[5967],{75545:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=s(74848),r=s(28453);const o={slug:"data-processors-adc",title:"Manipulating Accounts",date:new Date("2024-02-01T00:00:00.000Z"),authors:"pradeepkg",tags:["Data Processors","ADC","Account","Group"],keywords:["Data Processors","ADC","Account","Group"]},a=void 0,i={permalink:"/RSA/basics/data-processors-adc",source:"@site/basics/data-processors/data-processors-adc/data-processors-adc.mdx",title:"Manipulating Accounts",description:"In this blog post, I will guide you through the effective utilization of data processors during account collections to address common use cases. If you are not familiar with data processors, I recommend reading the Data Processors Basics before proceeding, as it will provide a foundational understanding of the concepts discussed in this blog.",date:"2024-02-01T00:00:00.000Z",tags:[{label:"Data Processors",permalink:"/RSA/basics/tags/data-processors"},{label:"ADC",permalink:"/RSA/basics/tags/adc"},{label:"Account",permalink:"/RSA/basics/tags/account"},{label:"Group",permalink:"/RSA/basics/tags/group"}],readingTime:35.86666666666667,hasTruncateMarker:!0,authors:[{name:"Pradeep Kadambar",title:"Creator",url:"https://www.linkedin.com/in/pradeepkg/",imageURL:"https://github.com/pradeepkg.png",key:"pradeepkg"}],frontMatter:{slug:"data-processors-adc",title:"Manipulating Accounts",date:"2024-02-01T00:00:00.000Z",authors:"pradeepkg",tags:["Data Processors","ADC","Account","Group"],keywords:["Data Processors","ADC","Account","Group"]},unlisted:!1,prevItem:{title:"Adding Custom JDBC Driver",permalink:"/RSA/basics/custom-jdbc"},nextItem:{title:"Manipulating Identities",permalink:"/RSA/basics/data-processors-idc"}},c={authorsImageUrls:[void 0]},l=[{value:"Manipulating Account Resolution Attribute",id:"manipulating-account-resolution-attribute",level:3},{value:"Converting Account Status Format",id:"converting-account-status-format",level:3},{value:"Updating IS_DISABLED Flag for an Account using Global Variables:",id:"updating-is_disabled-flag-for-an-account-using-global-variables",level:3}];function d(e){const n={a:"a",code:"code",em:"em",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsxs)(n.p,{children:["In this blog post, I will guide you through the effective utilization of data processors during account collections to address common use cases. If you are not familiar with data processors, I recommend reading the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.a,{href:"data-processors-basics",children:"Data Processors Basics"})})," before proceeding, as it will provide a foundational understanding of the concepts discussed in this blog."]}),"\n",(0,t.jsx)(n.h3,{id:"manipulating-account-resolution-attribute",children:"Manipulating Account Resolution Attribute"}),"\n",(0,t.jsxs)(n.p,{children:["In the scenario where admin accounts collected from Active Directory ADC are identified as orphans, with ",(0,t.jsx)(n.em,{children:"sAMAccountName"})," formats differing from regular user accounts, we can resolve this by employing the ",(0,t.jsx)(n.em,{children:"Pre_ADC_Handler"}),". This handler allows us to manipulate the raw data collected from the application and convert it to the desired format."]}),"\n",(0,t.jsx)(n.p,{children:"To implement this solution, follow the steps below:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Log in to the console as a System Administrator."}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.strong,{children:"Collectors > Account Collectors"})," and select the account collector for the application in question."]}),"\n",(0,t.jsxs)(n.li,{children:["Click on ",(0,t.jsx)(n.strong,{children:"Edit"})]}),"\n",(0,t.jsxs)(n.li,{children:["Choose the ",(0,t.jsx)(n.em,{children:"Pre Custom Processing"})," option."]}),"\n",(0,t.jsxs)(n.li,{children:["Navigate through the subsequent screens by clicking ",(0,t.jsx)(n.strong,{children:"Next"})," until you reach the ",(0,t.jsx)(n.em,{children:"Pre-Processing Custom Script Details"})," screen."]}),"\n",(0,t.jsx)(n.li,{children:'Add the following SQL block below the comment "Custom Code Goes Here".'}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"showLineNumbers",children:"FOR AllAccounts IN (\r\n  SELECT\r\n    LTRIM(amap.account_name, 'x') as name\r\n  FROM\r\n    T_DC_SOURCEDATA_ACCOUNT_MAP amap\r\n    INNER JOIN T_DATA_COLLECTORS coll ON amap.dc_id = coll.id\r\n  WHERE\r\n    coll.id = v_dc_id\r\n    and amap.run_id = v_run_id\r\n) LOOP\r\nUPDATE\r\n  T_DC_SOURCEDATA_ACCOUNT_MAP AMAP\r\nSET\r\n  AMAP.USER_NAME = AllAccounts.name\r\nWHERE\r\n  AMAP.account_name = AllAccounts.name COMMIT;\r\nEND LOOP;\n"})}),"\n",(0,t.jsxs)(n.p,{children:["In this SQL block, we are removing the '",(0,t.jsx)(n.strong,{children:"x"}),"' prefix from the Active Directory ",(0,t.jsx)(n.em,{children:"sAMAccountName"}),", assuming it is stored in the user identity for mapping purposes."]}),"\n",(0,t.jsxs)(n.p,{children:["By implementing this manipulation in the ",(0,t.jsx)(n.em,{children:"Pre_ADC_Handler"}),", we ensure that the ",(0,t.jsx)(n.em,{children:"sAMAccountName"})," is appropriately modified before the unification process, allowing for accurate mapping of admin accounts to user identities."]}),"\n",(0,t.jsxs)(n.ol,{start:"7",children:["\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Validate"})," to check for syntactical errors."]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Finish"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"converting-account-status-format",children:"Converting Account Status Format"}),"\n",(0,t.jsx)(n.p,{children:"For an application returning user account active status as true or false, but requiring conversion to an Account Disabled flag in the format of 1 and 0, we can achieve this by utilizing the Post_Account_Data_Load_Handler. This handler allows us to manipulate the data collected from the application and convert it to the desired format."}),"\n",(0,t.jsx)(n.p,{children:"Follow these steps to implement the solution:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Log in to the console as a System Administrator."}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.strong,{children:"Collectors > Account Collectors"})," and select the account collector associated with the application."]}),"\n",(0,t.jsxs)(n.li,{children:["Click on ",(0,t.jsx)(n.strong,{children:"Edit."})]}),"\n",(0,t.jsxs)(n.li,{children:["Choose the ",(0,t.jsx)(n.em,{children:"Post Custom Processing"})," option."]}),"\n",(0,t.jsxs)(n.li,{children:["Navigate through the subsequent screens by clicking ",(0,t.jsx)(n.strong,{children:"Next"})," until you reach the ",(0,t.jsx)(n.em,{children:"Post-Processing Custom Script Details"})," screen."]}),"\n",(0,t.jsx)(n.li,{children:'Add the following SQL block below the comment "Custom Code Goes Here".'}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"showLineNumbers",children:"FOR DisabledAccounts IN (\r\n  SELECT\r\n    account.name,\r\n    CASE account.cas20 WHEN 'true' THEN '0' ELSE '1' END as isDisabled\r\n  FROM\r\n    T_AV_ACCOUNTS account\r\n    INNER JOIN T_DATA_COLLECTORS collector ON account.adc_id = collector.id\r\n  WHERE\r\n    collector.id= v_dc_id\r\n) LOOP\r\nUPDATE\r\n  T_AV_ACCOUNTS A\r\nSET\r\n  A.IS_DISABLED = DisabledAccounts.isDisabled\r\nWHERE\r\n  A.name = DisabledAccounts.name\r\n  AND A.ADC_ID = v_dc_id\r\nCOMMIT;\r\nEND LOOP;\n"})}),"\n",(0,t.jsx)(n.p,{children:"In this SQL block, we are setting the Account Disabled flag by inverting the active status flag."}),"\n",(0,t.jsxs)(n.p,{children:["By implementing this conversion in the ",(0,t.jsx)(n.em,{children:"Post_Account_Data_Load_Handler"}),", we ensure that the data is processed after it is loaded from the application, and the account status is represented in the desired format. This solution provides a tailored approach to meet the specific requirements of your application's account status representation."]}),"\n",(0,t.jsxs)(n.ol,{start:"7",children:["\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Validate"})," to check for syntactical errors."]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Finish"})]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"updating-is_disabled-flag-for-an-account-using-global-variables",children:"Updating IS_DISABLED Flag for an Account using Global Variables:"}),"\n",(0,t.jsx)(n.p,{children:"To convert data obtained from a REST endpoint to the required 1 or 0 format for the IS_DISABLED field of the accounts and set the value of the IS_DISABLED field, follow these steps:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Log in to the console as a System Administrator."}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.strong,{children:"Admin > System"})," and click on the ",(0,t.jsx)(n.strong,{children:"Global Variables"})," tab."]}),"\n",(0,t.jsxs)(n.li,{children:["Add the following configurable setting and save:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Variable Name"}),": processor_collector_enabled_values"]}),"\n",(0,t.jsx)(n.li,{children:(0,t.jsx)(n.strong,{children:"Value: 'ACTIVE','YES','TRUE','1'"})}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["This solution utilizes configurable settings, specifically the ",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.em,{children:"processor_collector_enabled_values"})})," variable, to define enabled data fields that may be received through data collectors. Adjust the values in this variable to match the enabled flags for the accounts obtained from the REST endpoint."]}),"\n",(0,t.jsxs)(n.li,{children:["Navigate to ",(0,t.jsx)(n.strong,{children:"Collectors > Account Collectors"})," and select the account collector for the application."]}),"\n",(0,t.jsxs)(n.li,{children:["Click on ",(0,t.jsx)(n.strong,{children:"Edit"})]}),"\n",(0,t.jsxs)(n.li,{children:["Choose the ",(0,t.jsx)(n.em,{children:"Pre Custom Processing"})," option."]}),"\n",(0,t.jsxs)(n.li,{children:["Navigate through the subsequent screens by clicking ",(0,t.jsx)(n.strong,{children:"Next"})," until you reach the ",(0,t.jsx)(n.strong,{children:"Pre-Processing Custom Script Details"})," screen."]}),"\n",(0,t.jsxs)(n.li,{children:["Add the following code snippet, adjusting the value of ",(0,t.jsx)(n.code,{children:"CAS5"})," to the appropriate data column that contains the enabled flag for the account being collected:"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-sql",metastring:"showLineNumbers",children:"DECLARE\r\n   -- The run id and collector id will be substituted for variables v_run_id and v_dc_id during processing time.\r\n   v_run_id   NUMBER := :1;\r\n   v_dc_id    NUMBER := :2;\r\n\r\n   /*----------------------------------------------------------------------------------------------*/\r\n   /* Custom Variables */\r\n   /*----------------------------------------------------------------------------------------------*/\r\n   -- Standard Set of variables\r\n   v_proc_name       T_AV_JOB_STATS.Proc_Name%TYPE := 'ADC_Transformer';\r\n   -- Procedure Specific variables\r\n   v_custom_message  VARCHAR2(2000) := 'ADC Transformer';\r\n   v_log_message     VARCHAR2(2000);\r\n   v_is_disabled     NUMBER;\r\n   v_enabled_values  VARCHAR2(2000);\r\nBEGIN\r\n   /*----------------------------------------------------------------------------------------------*/\r\n   /* Custom Code - Start */\r\n   /*----------------------------------------------------------------------------------------------*/\r\n   -- begin message\r\n   UNFC_Processor_Log.INFO_BEGIN(v_run_id, v_proc_name, v_custom_message);\r\n\r\n   -- Fetch the list of enabled values from the AVUSER.T_AV_GLOBAL_VARIABLES table\r\n   -- 'ACTIVE','YES','TRUE','1'\r\n   SELECT UPPER(value) INTO v_enabled_values\r\n   FROM AVUSER.T_AV_GLOBAL_VARIABLES\r\n   WHERE parameter = 'processor_collector_enabled_values';\r\n\r\n   -- Log the enabled values\r\n   v_log_message := 'Enabled Values: ' || v_enabled_values;\r\n   UNFC_Processor_Log.INFO_INFO(v_run_id, v_proc_name, v_log_message);\r\n\r\n   FOR AllAccounts IN (SELECT name, cas5 AS status\r\n      FROM T_DC_SOURCEDATA_ACCOUNT WHERE dc_id = v_dc_id AND run_id=v_run_id )\r\n   LOOP\r\n      -- Store the result of the CASE expression in v_is_disabled\r\n      v_is_disabled := 1; -- Assume disabled by default\r\n\r\n      -- Convert the enabled values into a table using XMLTABLE\r\n      FOR enabled_value IN (SELECT TRIM(COLUMN_VALUE) AS enabled_value FROM XMLTABLE(v_enabled_values))\r\n      LOOP\r\n         IF UPPER(AllAccounts.status) = enabled_value.enabled_value THEN\r\n            v_is_disabled := 0; -- Enable if the status matches any enabled value\r\n            EXIT; -- Exit the loop after finding a match\r\n         END IF;\r\n      END LOOP;\r\n\r\n      -- Update the custom account attribute IS_DISABLED that holds the account disabled status\r\n      -- Need to update at least one collected attribute if the change has to be persisted.\r\n      UPDATE T_DC_SOURCEDATA_ACCOUNT SET IS_DISABLED = v_is_disabled,\r\n\t\tCAS5 = AllAccounts.status || ' : ' || v_run_id\r\n      WHERE name = AllAccounts.name AND  run_id=v_run_id;\r\n\r\n      COMMIT;\r\n\r\n      -- Construct the log message\r\n      v_log_message := 'Account: ' || AllAccounts.name || ', Status: ' \r\n        || AllAccounts.status || ', IS_DISABLED: ' || v_is_disabled;\r\n\r\n      -- Print the log message using UNFC_Processor_Log.INFO_INFO\r\n      UNFC_Processor_Log.INFO_INFO(v_run_id, v_proc_name, v_log_message);\r\n   END LOOP;\r\n\r\n   -- end message\r\n   UNFC_Processor_Log.INFO_END(v_run_id, v_proc_name, v_custom_message);\r\n   /*----------------------------------------------------------------------------------------------*/\r\n   /* Custom Code - End */\r\n   /*----------------------------------------------------------------------------------------------*/\r\nEND;\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"9",children:["\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Validate"})," to check for syntactical errors."]}),"\n",(0,t.jsxs)(n.li,{children:["Click ",(0,t.jsx)(n.strong,{children:"Finish"})]}),"\n",(0,t.jsx)(n.li,{children:"Run the collectors and validate."}),"\n"]})]})}function u(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>i});var t=s(96540);const r={},o=t.createContext(r);function a(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);