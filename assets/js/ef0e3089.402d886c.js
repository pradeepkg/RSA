"use strict";(self.webpackChunkdocku=self.webpackChunkdocku||[]).push([[7095],{97350:t=>{t.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"google-workspace","metadata":{"permalink":"/RSA/blog/google-workspace","source":"@site/blog/collections/google-workspace/google-workspace.mdx","title":"Google Workspace","description":"Google Workspace (formerly Google Suite) is a cloud-based suite of productivity","date":"2024-10-01T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Google","permalink":"/RSA/blog/tags/google"},{"inline":true,"label":"Google Workspace","permalink":"/RSA/blog/tags/google-workspace"},{"inline":true,"label":"Google Suite","permalink":"/RSA/blog/tags/google-suite"}],"readingTime":48.86666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"google-workspace","title":"Google Workspace","date":"2024-10-01T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Google","Google Workspace","Google Suite"],"keywords":["Collections","REST","SaaS","Google","Google Workspace","Google Suite"],"draft":false},"unlisted":false,"lastUpdatedAt":1727804345000,"nextItem":{"title":"MaintainX","permalink":"/RSA/blog/maintainx"}},"content":"import logoPNG from \\"@site/static/img/logos/Google Workspace - 180x180.png\\";\\r\\nimport LinkSvg from \\"../../iconmonstr-link-thin.svg\\";\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\">\\r\\n      <img src={logoPNG} width=\\"180\\" height=\\"180\\" />\\r\\n      Google Workspace (formerly Google Suite) is a cloud-based suite of productivity\\r\\n      tools that includes Gmail, Google Drive, Docs, Sheets, Slides, and more. It\\r\\n      facilitates seamless collaboration and communication among teams, offering\\r\\n      real-time editing, sharing, and storage of documents. Designed for business\\r\\n      efficiency, it enhances productivity and fosters collaboration by providing\\r\\n      a unified platform for work-related tasks.<br /><br />Versions: `8.0.0 P1` `8.0.0 P4`<br />\\r\\n      <br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c |\\r\\n      Entitlements \u274c\\r\\n    </td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n## Overview\\r\\n\\r\\nIn this section, we will dive deeper into various Google Workspace objects that hold significance from an access management perspective. \\r\\n\\r\\n![img](./img/Overview.png)\\r\\n\\r\\n**Users**\\r\\n\\r\\n- Users are individual accounts that represent people within your organization.\\r\\n- Each user has a unique email address associated with your organization\'s domain (e.g., user@mycompany.com).\\r\\n- Users are granted access to various Google Workspace services based on their roles and permissions.\\r\\n\\r\\n**Groups**\\r\\n\\r\\n- Groups are collections of users, and they simplify communication and collaboration by allowing you to send messages and share resources with a single group email address.\\r\\n- There are different types of groups in Google Workspace:\\r\\n  - Google Groups for Business: These are used for communication and collaboration within an organization.\\r\\n  - Email lists (groups): These are used for sending messages to multiple users by using a single group email address.\\r\\n  - Collaborative inboxes: These are groups with an associated email address where members can collaborate on emails.\\r\\n\\r\\n**Roles**\\r\\n\\r\\n- Roles in Google Workspace define a set of permissions that determine what actions users with that role can perform.\\r\\n- Google Workspace has predefined roles such as super admin, groups admin, user management admin, etc.\\r\\n- Roles help in delegating administrative tasks and ensuring that users have the appropriate level of access to perform their duties without exposing unnecessary permissions.\\r\\n\\r\\n**Users and Groups** Users can be added to groups, allowing for easier management of permissions and sharing resources. For example, you can create a group for a project team and grant access to specific documents or folders to the entire group.\\r\\n\\r\\n**Roles and Users/Groups** Roles are assigned to users or groups to define their level of access and permissions. For instance, a user can be assigned the role of an admin to manage certain aspects of Google Workspace services.\\r\\n\\r\\n**Groups and Roles** Groups can be assigned specific roles to grant them certain administrative privileges. For example, a group may be given the role of a group admin, allowing its members to manage the membership and settings of that group.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\nThis section explains the process for configuring an account collector for the Google Workspace. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Google Workspace**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. Refer to [OAuth2 Configuration](#oauth2) section for configuring the authentication for this collector. API keys cannot be used for invoking Admin SDK APIs and requires OAuth or Service account credentials.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Google Workspace<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/admin/directory/v1/users`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>domain</td>\\r\\n       <td>`mycompany.com`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>fields</td>\\r\\n       <td>`users(id,lastLoginTime,primaryEmail,suspended,customerId,orgUnitPath),nextPageToken`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>AccountId</td>\\r\\n       <td>`$.users.*.primaryEmail`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.users.*.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>IsSuspended</td>\\r\\n       <td>`$.users.*.suspended`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>LastLoginTime</td>\\r\\n       <td>`$.users.*.lastLoginTime`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/admin/directory/v1/groups`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>domain</td>\\r\\n       <td>`mycompany.com`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>fields</td>\\r\\n       <td>`groups(id,email,name,description),nextPageToken`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>GroupId</td>\\r\\n       <td>`$.groups.*.name`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.groups.*.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Email</td>\\r\\n       <td>`$.groups.*.email`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Description</td>\\r\\n       <td>`$.groups.*.description`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/admin/directory/v1/groups/${Id}/members`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>fields</td>\\r\\n       <td>`members(id),nextPageToken`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Account Identifier</td>\\r\\n       <td>`$.members.*.id`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n    <Admonition type=\\"info\\">\\r\\n      This value MUST always be mapped to the **_Account Name_** for any generic\\r\\n      REST collector.\\r\\n    </Admonition>\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up API access in Google Cloud Console for integration with G&L.\\r\\n\\r\\n**Steps to setup project**\\r\\n1. Go to https://console.cloud.google.com and login with your administrator account.\\r\\n2. On the left hand corner, click on projects dropdown and select **New Project**.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Provide a suitable project name and click **Create**.<br /><br />![Alt text](img/app-2.png)\\r\\n4. From the popup select the newly created project.\\r\\n5. Click on **APIs & Services**.<br /><br />![Alt text](img/app-3.png)\\r\\n6. Select **Enable APIs and Services**.\\r\\n7. Search and enable the following:\\r\\n   - Admin SDK API\\r\\n\\r\\n**Steps to setup credentials**\\r\\n1. Go to APIs dashboard https://console.cloud.google.com/apis/dashboard and click on **OAuth consent screen**.\\r\\n2. Select **_Internal_** _User Type_ and click **Create**.<br /><br />![Alt text](img/app-5.png)\\r\\n3. Provide a suitable application name and required details and click **Save and Continue**.<br /><br />![Alt text](img/app-6.png)\\r\\n4. Click on **Add or Remove Scopes**\\r\\n5. Search and add the following:\\r\\n   - https://www.googleapis.com/auth/admin.directory.group.readonly\\r\\n   - https://www.googleapis.com/auth/admin.directory.user.readonly\\r\\n   - https://www.googleapis.com/auth/admin.directory.group.member.readonly\\r\\n   - https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly\\r\\n   - https://www.googleapis.com/auth/admin.directory.user.alias.readonly\\r\\n6. Click on **Save and Continue**\\r\\n7. Click on **Credentials** menu item.\\r\\n8. Click on **Create Credentials** and select **OAuth Client ID**.<br /><br />![Alt text](img/app-4.png)\\r\\n9. Select **Application Type** and provide a suitable name. <br /><br />![Alt text](img/app-7.png).\\r\\n10. Specify the OAuth callback URL (https://instance.com:8443/aveksa/oauth/callback) under **Authorized Redirect URIs** and click **Create**.<br /><br />![Alt text](img/app-8.png)\\r\\n11. Copy the **_Client ID_** and **_Client Secret_** for use with G&L.\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up OAuth2 authentication with RSA G&L REST collectors.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br />![Alt text](img/oauth-1.png)\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Client ID</td>\\r\\n       <td>VALUE</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Client Secret</td>\\r\\n       <td>VALUE</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authentication URL</td>\\r\\n       <td>`https://accounts.google.com/o/oauth2/v2/auth`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Access Token URL</td>\\r\\n       <td>`https://oauth2.googleapis.com/token`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Scope</td>\\r\\n       <td>\\r\\n         <p>**Account Collector**</p>\\r\\n         <p>\\r\\n           `https://www.googleapis.com/auth/admin.directory.group.readonly\\r\\n           https://www.googleapis.com/auth/admin.directory.user.readonly\\r\\n           https://www.googleapis.com/auth/admin.directory.group.member.readonly&access_type=offline&prompt=consent`\\r\\n         </p>\\r\\n         <p>**Entitlement Collector**</p>\\r\\n         <p>\\r\\n           `https://www.googleapis.com/auth/admin.directory.rolemanagement.readonly&access_type=offline&prompt=consent`\\r\\n         </p>\\r\\n       </td>\\r\\n     </tr>\\r\\n   </table>\\r\\n   <Admonition type=\\"warn\\" title=\\"\\">\\r\\n     By default, refresh token is not return during the authorization flow and\\r\\n     hence it is important to add `access_type=offline` and `prompt=consent` at\\r\\n     the end of the scope string.\\r\\n   </Admonition>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/oauth-2.png)\\r\\n6. Login to Google account. Click on Allow to authorize and acquire the access and refresh tokens.<br />![Alt text](img/oauth-3.png)![Alt text](img/oauth-4.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## References\\r\\n- [Directory API Overview](https://developers.google.com/admin-sdk/directory/v1/guides)\\r\\n- [Admin SDK API, v1](https://developers.google.com/identity/protocols/oauth2/scopes?authuser=1#admin-directory)\\r\\n- [OAuth 2.0 Playground](https://developers.google.com/oauthplayground)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL059</span>"},{"id":"maintainx","metadata":{"permalink":"/RSA/blog/maintainx","source":"@site/blog/collections/maintainx/maintainx.mdx","title":"MaintainX","description":"MaintainX is a versatile maintenance management platform designed to streamline operations for businesses across various industries. With intuitive features for work orders, asset management, and team collaboration, MaintainX empowers organizations to efficiently track and manage maintenance tasks, enhance productivity, and ensure equipment reliability. Its user-friendly interface and mobile accessibility make it a convenient solution for modern maintenance needs.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2024-06-10T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"MaintainX","permalink":"/RSA/blog/tags/maintain-x"},{"inline":true,"label":"CMMS","permalink":"/RSA/blog/tags/cmms"},{"inline":true,"label":"EAM","permalink":"/RSA/blog/tags/eam"}],"readingTime":27.866666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"maintainx","title":"MaintainX","date":"2024-06-10T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","MaintainX","CMMS","EAM"],"keywords":["Collections","REST","SaaS","MaintainX","CMMS","EAM"],"draft":false},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"Google Workspace","permalink":"/RSA/blog/google-workspace"},"nextItem":{"title":"AdvicePay","permalink":"/RSA/blog/advicepay"}},"content":"import logoPNG from \'@site/static/img/logos/MaintainX - 180x180.jpg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>MaintainX is a versatile maintenance management platform designed to streamline operations for businesses across various industries. With intuitive features for work orders, asset management, and team collaboration, MaintainX empowers organizations to efficiently track and manage maintenance tasks, enhance productivity, and ensure equipment reliability. Its user-friendly interface and mobile accessibility make it a convenient solution for modern maintenance needs.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the MaintainX application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **MaintainX**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from MaintainX.<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v1/users` ([Sample Response](#list-users))</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>  \\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>expand</td>\\r\\n    <td>`role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Role</td>\\r\\n    <td>`$.users.*.role`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br/><br/>![Alt text](img/8.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v1/teams` ([Sample Response](#list-teams))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.teams.*.name`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.teams.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br/><br/>![Alt text](img/10.png)<br/>![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v1/teams/${Id}/members` ([Sample Response](#list-team-members))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.members.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br/><br/>![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br/><br/>![Alt text](img/16.png)\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Pagination\\r\\nTo enable pagination for MaintainX ADC in G&L, you can utilize the following settings:\\r\\n<br/><br/>![Alt text](img/6.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Pagination Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Maximum Records Per Page</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>limit</td>\\r\\n                <td>100</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Read From</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>Response Body</td>\\r\\n                <td>`$.nextPageUrl`</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Pass As</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>URL</td>\\r\\n                <td>-</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr> \\r\\n</table>\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up MaintainX for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to MaintainX dashboard https://app.getmaintainx.com/.\\r\\n2. On the bottom left hand corner, click on the user profile and click on ***Integrations***.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Click on **New Key**.<br /><br />![Alt text](img/app-2.png)\\r\\n4. Provide a suitable name for the integration and click on **Generate Key**.<br /><br />![Alt text](img/app-3.png)\\r\\n5. Copy the token and retain for use with G&L.<br /><br />![Alt text](img/app-4.png)\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Users\\r\\n```json\\r\\n{\\r\\n    \\"users\\": [\\r\\n        {\\r\\n            \\"id\\": 633629,\\r\\n            \\"firstName\\": \\"Alexander\\",\\r\\n            \\"lastName\\": \\"Wright\\",\\r\\n            \\"email\\": \\"alexander.wright@example.com\\",\\r\\n            \\"phoneNumber\\": null,\\r\\n            \\"authType\\": \\"NORMAL\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 633630,\\r\\n            \\"firstName\\": \\"Amelia\\",\\r\\n            \\"lastName\\": \\"Rodriguez\\",\\r\\n            \\"email\\": \\"amelia.rodriguez@example.com\\",\\r\\n            \\"phoneNumber\\": \\"+18889990000\\",\\r\\n            \\"authType\\": \\"NORMAL\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 633631,\\r\\n            \\"firstName\\": \\"Charlotte\\",\\r\\n            \\"lastName\\": \\"Harris\\",\\r\\n            \\"email\\": \\"charlotte.harris@example.com\\",\\r\\n            \\"phoneNumber\\": null,\\r\\n            \\"authType\\": \\"NORMAL\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"nextCursor\\": \\"3\\",\\r\\n    \\"nextPageUrl\\": \\"/v1/users?limit=3&cursor=3\\"\\r\\n}\\r\\n```\\r\\n\\r\\n### List Teams\\r\\n```json{\\r\\n    \\"teams\\": [\\r\\n        {\\r\\n            \\"id\\": 85601,\\r\\n            \\"name\\": \\"Continuous Improvement\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 85599,\\r\\n            \\"name\\": \\"Engineering\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 85597,\\r\\n            \\"name\\": \\"Maintenance Crew\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 85595,\\r\\n            \\"name\\": \\"Production Team\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 85596,\\r\\n            \\"name\\": \\"Quality Assurance\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"nextCursor\\": \\"85600\\",\\r\\n    \\"nextPageUrl\\": \\"/v1/teams?limit=5&cursor=85600\\"\\r\\n}\\r\\n```\\r\\n\\r\\n### List Team Members\\r\\n```json\\r\\n{\\r\\n    \\"members\\": [\\r\\n        {\\r\\n            \\"id\\": 633631,\\r\\n            \\"firstName\\": \\"Charlotte\\",\\r\\n            \\"lastName\\": \\"Harris\\",\\r\\n            \\"teamRole\\": \\"ADMIN\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 633643,\\r\\n            \\"firstName\\": \\"Hannah\\",\\r\\n            \\"lastName\\": \\"Lewis\\",\\r\\n            \\"teamRole\\": \\"MEMBER\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"nextCursor\\": \\"291631\\",\\r\\n    \\"nextPageUrl\\": \\"/v1/teams/85601/members?limit=2&cursor=291631\\"\\r\\n}\\r\\n```\\r\\n---\\r\\n## References\\r\\n- [MaintainX API](https://api.getmaintainx.com/v1/docs)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL058</span>"},{"id":"advicepay","metadata":{"permalink":"/RSA/blog/advicepay","source":"@site/blog/collections/advicepay/advicepay.mdx","title":"AdvicePay","description":"AdvicePay is a secure online payment platform designed specifically for financial advisors. It facilitates fee-for-service transactions, ensuring compliance with industry regulations like ADV and SEC. Advisors can create custom payment schedules, invoice clients, and track payments seamlessly. AdvicePay streamlines billing processes, enabling advisors to focus more on delivering valuable financial guidance to their clients.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2024-05-23T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"AdvicePay","permalink":"/RSA/blog/tags/advice-pay"},{"inline":true,"label":"Online Payment","permalink":"/RSA/blog/tags/online-payment"}],"readingTime":67.5,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"advicepay","title":"AdvicePay","date":"2024-05-23T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","AdvicePay","Online Payment"],"keywords":["Collections","REST","SaaS","AdvicePay","Online Payment"],"draft":false},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"MaintainX","permalink":"/RSA/blog/maintainx"},"nextItem":{"title":"Sigma","permalink":"/RSA/blog/sigma"}},"content":"import logoPNG from \'@site/static/img/logos/AdvicePay - 180x180.jpg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>AdvicePay is a secure online payment platform designed specifically for financial advisors. It facilitates fee-for-service transactions, ensuring compliance with industry regulations like ADV and SEC. Advisors can create custom payment schedules, invoice clients, and track payments seamlessly. AdvicePay streamlines billing processes, enabling advisors to focus more on delivering valuable financial guidance to their clients.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Overview\\r\\n\\r\\n### Admin Roles\\r\\n- **Admin**: Can do almost everything the account owner can do, including inviting clients, requesting payments, canceling invoices, and exporting transaction reports. However, Admins cannot view billing bank information, add or delete Admin and Analyst users, change the company name, or delete the account.\\r\\n- **Analyst**: Can only view activity on the account, such as clients, invoices, and transfers, as well as export transaction reports. Analysts cannot view billing bank information or make any changes.\\r\\n- **Developer**: Can read and write, as well as access API keys.\\r\\n\\r\\n### Advisor Roles\\r\\n- **Account Owner**: Responsible for managing all firm settings and data, including banking information. Holds complete control over billing clients.\\r\\n- **Full-Access Advisor**: Granted access to view firm data, including clients of other advisors, and can manage billing for their own clients or those of other advisors. They lack authorization to enable eSignatures, alter/view banking details, or delete the account. However, they possess the capability to manage other firm-wide settings.\\r\\n- **Standard Advisor**: Authorized to view and manage billing for their own clients only. They are not permitted to view or control firm-wide settings.\\r\\n- **Read Only Advisor**: Granted login access solely for viewing payment statuses and their own clients\' details. Suitable for advisors who need to monitor assigned clients and invoice activity without directly billing them.\\r\\n- **No Login Advisor**: Does not possess login credentials to access account activity. This option is optimal for centralized billing and assigning clients to No-Login Advisors for organizational purposes.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the AdvicePay application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **AdvicePay**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)<br /><br />Refer to [Token Authentication](#token) for more information on authentication configuration.<br /><br />\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from AdvicePay.<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/public/v1/admins` ([Sample Response](#list-admins))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.items.*.id`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.items.*.email`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<br/>![Alt text](img/8.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/public/v1/advisors` ([Sample Response](#list-advisors))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.items.*.id`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.items.*.email`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/10.png)\\r\\n9. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/11.png)\\r\\n10. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\n### Advisor Permission Types\\r\\nThis section explains the process for configuring an entitlement collector to collect advisor permission types and assignments from the AdvicePay application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n:::info\\r\\nSince AdvicePay does not provide an API for listing advisor permission types, we will use a custom web service for the EDC. Refer to [Custom Web Service : Advisor Permission Types](#advisor-permission-types-1) for more information.\\r\\n:::\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **AdvicePay**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/13.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from AdvicePay.<br /><br />![Alt text](img/14.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/16.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/AdvicePayAdvisorRolesv1.2.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.advisor_roles.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.advisor_roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/17.png)<br />![Alt text](img/6.png)<br />![Alt text](img/18.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://app.advicepay.com/api/public/v1/advisors`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.items.*.roleTitle`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.items.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/19.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/20.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n### Admin Roles\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles and assignments from the AdvicePay application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n:::info\\r\\nSince AdvicePay does not provide an API for listing admin roles, we will use a custom web service for the EDC. Refer to [Custom Web Service : Admin Roles](#admin-roles-2) for more information.\\r\\n:::\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **AdvicePay**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/21.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from AdvicePay.<br /><br />![Alt text](img/14.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/22.png)<br />![Alt text](img/23.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/AdvicePayAdminRolesv1.0.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.user_roles.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.user_roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/24.png)<br />![Alt text](img/6.png)<br />![Alt text](img/25.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://app.advicepay.com/api/public/v1/admins`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.items.*.roleTitle`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.items.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/19.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/20.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Authentication\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/token-1.png)<br />![Alt text](img/token-2.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://app.advicepay.com/oauth2/access_token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>Client ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>Client Secret</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/x-www-form-urlencoded`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">`grant_type=client_credentials&client_id=${TokenUsername}&client_secret=${TokenPassword}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$.access_token`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test. \\r\\n---\\r\\n## Custom Web Service\\r\\n### Advisor Permission Types\\r\\nSince AdvicePay does not provide an API for listing advisor permission types, we will use a custom JSP that will publish this as web service. \\r\\n\\r\\n**Steps**\\r\\n1. Open a text editor and save the contents below as `AdvicePayAdvisorRolesv1.2.jsp`\\r\\n```java \\r\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\r\\n\\r\\n<%\\r\\nString jsonData = \\"{\\\\n\\" +\\r\\n    \\"  \\\\\\"advisor_roles\\\\\\": [\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Managing Advisor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Can see office-wide data.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Full-access Advisor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Can see firm-wide data and update firm settings.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Advisor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Gives full access to AdvicePay.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Read-only Advisor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Gives login access but no power to invoice clients.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"No-login Advisor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Gives no login, and is completely managed by home office.\\\\\\"\\\\n\\" +\\r\\n    \\"    }\\\\n\\" +\\r\\n    \\"  ]\\\\n\\" +\\r\\n    \\"}\\";\\r\\n%>\\r\\n\\r\\n<%\\r\\n    response.setContentType(\\"application/json\\");\\r\\n    out.print(jsonData);\\r\\n%>\\r\\n```\\r\\n2. Login to RSA G&L console as AveksaAdmin.\\r\\n3. Navigate to **Admin > User Interface.**\\r\\n4. Click on **Files**.\\r\\n5. Select ***External JSP Pages*** and click on **Upload**.\\r\\n6. Select the `AdvicePayAdvisorRolesv1.2.jsp` and click **OK**.\\r\\n7. Verify by accessing this URL in the browser https://instance.securid.com/aveksa/custom/external_jsp/AdvicePayAdvisorRolesv1.2.jsp \\r\\n\\r\\n### Admin Roles\\r\\nSince AdvicePay does not provide an API for listing admin roles, we will use a custom JSP that will publish this as web service. Use the code provided below to create `AdvicePayAdminRolesv1.0.jsp` and upload it similar to [Advisor Permission Types](#advisor-permission-types)\\r\\n```java \\r\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\r\\n\\r\\n<%\\r\\nString jsonData = \\"{\\\\n\\" +\\r\\n    \\"  \\\\\\"user_roles\\\\\\": [\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Admin\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Admin gives the same access and functionality as the parent user.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Analyst\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Analyst gives read-only access to the parent user\'s account.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"role\\\\\\": \\\\\\"Developer\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Can read and write, as well as access API keys.\\\\\\"\\\\n\\" +\\r\\n    \\"    }\\\\n\\" +\\r\\n    \\"  ]\\\\n\\" +\\r\\n    \\"}\\";\\r\\n%>\\r\\n\\r\\n<%\\r\\n    response.setContentType(\\"application/json\\");\\r\\n    out.print(jsonData);\\r\\n%>\\r\\n```\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Admins\\r\\n```json\\r\\n{\\r\\n    \\"items\\": [\\r\\n        {\\r\\n            \\"id\\": 13333,\\r\\n            \\"createdAt\\": 1709673627,\\r\\n            \\"updatedAt\\": 1712697205,\\r\\n            \\"deletedAt\\": 0,\\r\\n            \\"email\\": \\"rohit.mishra@example.com\\",\\r\\n            \\"firstName\\": \\"Rohit\\",\\r\\n            \\"lastName\\": \\"Mishra\\",\\r\\n            \\"parentID\\": 122,\\r\\n            \\"roleTitle\\": \\"Analyst\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 13332,\\r\\n            \\"createdAt\\": 1709673587,\\r\\n            \\"updatedAt\\": 1712696545,\\r\\n            \\"deletedAt\\": 0,\\r\\n            \\"email\\": \\"sophie.collins@example.com\\",\\r\\n            \\"firstName\\": \\"Sophie\\",\\r\\n            \\"lastName\\": \\"Collins\\",\\r\\n            \\"parentID\\": 122,\\r\\n            \\"roleTitle\\": \\"Admin\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"page\\": 1,\\r\\n    \\"perPage\\": 2,\\r\\n    \\"totalItems\\": 6,\\r\\n    \\"totalPages\\": 3,\\r\\n    \\"unknownTotal\\": false,\\r\\n    \\"hasMore\\": false\\r\\n}\\r\\n```\\r\\n\\r\\n### List Advisors\\r\\n```json\\r\\n{\\r\\n    \\"items\\": [\\r\\n        {\\r\\n            \\"id\\": 13814,\\r\\n            \\"createdAt\\": 1713385405,\\r\\n            \\"updatedAt\\": 1713385405,\\r\\n            \\"deletedAt\\": 0,\\r\\n            \\"email\\": \\"aishwarya.rao@example.com\\",\\r\\n            \\"externalID\\": \\"\\",\\r\\n            \\"firstName\\": \\"Aishwarya\\",\\r\\n            \\"lastName\\": \\"Rao\\",\\r\\n            \\"verified\\": true,\\r\\n            \\"roleTitle\\": \\"Read-only Advisor\\",\\r\\n            \\"completedOnboarding\\": true,\\r\\n            \\"officeID\\": 115,\\r\\n            \\"metadata\\": {}\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 13808,\\r\\n            \\"createdAt\\": 1713375227,\\r\\n            \\"updatedAt\\": 1713375227,\\r\\n            \\"deletedAt\\": 0,\\r\\n            \\"email\\": \\"benjamin.hill@example.com\\",\\r\\n            \\"externalID\\": \\"\\",\\r\\n            \\"firstName\\": \\"Benjamin\\",\\r\\n            \\"lastName\\": \\"Hill\\",\\r\\n            \\"verified\\": true,\\r\\n            \\"roleTitle\\": \\"Advisor\\",\\r\\n            \\"completedOnboarding\\": true,\\r\\n            \\"officeID\\": 115,\\r\\n            \\"metadata\\": {}\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": 667,\\r\\n            \\"createdAt\\": 1558036707,\\r\\n            \\"updatedAt\\": 1710787763,\\r\\n            \\"deletedAt\\": 0,\\r\\n            \\"email\\": \\"priya.verma@example.com\\",\\r\\n            \\"externalID\\": \\"\\",\\r\\n            \\"firstName\\": \\"Priya\\",\\r\\n            \\"lastName\\": \\"Verma\\",\\r\\n            \\"verified\\": true,\\r\\n            \\"roleTitle\\": \\"Full-access Advisor\\",\\r\\n            \\"completedOnboarding\\": true,\\r\\n            \\"officeID\\": 115,\\r\\n            \\"metadata\\": {}\\r\\n        }\\r\\n    ],\\r\\n    \\"page\\": 1,\\r\\n    \\"perPage\\": 10,\\r\\n    \\"totalItems\\": 3,\\r\\n    \\"totalPages\\": 1,\\r\\n    \\"unknownTotal\\": false,\\r\\n    \\"hasMore\\": false\\r\\n}\\r\\n```\\r\\n---\\r\\n## References\\r\\n- [AdvicePay API](https://docs.advicepay.com/)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL057</span>"},{"id":"sigma","metadata":{"permalink":"/RSA/blog/sigma","source":"@site/blog/collections/sigma/sigma.mdx","title":"Sigma","description":"Sigma Business Intelligence offers powerful analytics solutions, empowering businesses with actionable insights. Through intuitive interfaces and robust data integration, Sigma BI transforms complex data into strategic decisions. With a focus on user-friendly tools and real-time analytics, Sigma BI accelerates growth and enhances competitiveness in today\'s dynamic market landscape.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2024-05-15T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Sigma","permalink":"/RSA/blog/tags/sigma"},{"inline":true,"label":"Business Intelligence","permalink":"/RSA/blog/tags/business-intelligence"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"}],"readingTime":32.1,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"sigma","title":"Sigma","date":"2024-05-15T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Sigma","Business Intelligence","Analytics"],"keywords":["Collections","REST","SaaS","Sigma","Business Intelligence","Analytics"],"draft":false},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"AdvicePay","permalink":"/RSA/blog/advicepay"},"nextItem":{"title":"Bonusly","permalink":"/RSA/blog/bonusly"}},"content":"import logoPNG from \'@site/static/img/logos/Sigma - 180x180.jpg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Sigma Business Intelligence offers powerful analytics solutions, empowering businesses with actionable insights. Through intuitive interfaces and robust data integration, Sigma BI transforms complex data into strategic decisions. With a focus on user-friendly tools and real-time analytics, Sigma BI accelerates growth and enhances competitiveness in today\'s dynamic market landscape.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Sigma application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sigma**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)<br /><br />Refer to [Token Authentication](#token) for more information on authentication configuration.<br /><br />\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sigma.<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v2/members`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.entries.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.entries.*.memberId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserKind</td>\\r\\n    <td>`$.entries.*.userKind`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>isInactive</td>\\r\\n    <td>`$.entries.*.isInactive`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>MemberType</td>\\r\\n    <td>`$.entries.*.memberType`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br/><br/>![Alt text](img/8.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v2/teams`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.entries.*.name`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.entries.*.teamId`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.entries.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br/><br/>![Alt text](img/10.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/v2/teams/${Id}/members`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.entries.*.userId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br/><br/>![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br/><br/>![Alt text](img/16.png)\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Authentication\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/token-1.png)<br />![Alt text](img/token-2.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://aws-api.sigmacomputing.com/v2/auth/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>Client ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>Client Secret</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/x-www-form-urlencoded`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">`grant_type=client_credentials&client_id=${TokenUsername}&client_secret=${TokenPassword}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$.access_token`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Sigma for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Sigma dashboard https://app.sigmacomputing.com/ as administrator.\\r\\n2. On the right hand corner, click on the user profile and click on ***Administration***.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Select **Developer Access** and click on **Create new**.<br /><br />![Alt text](img/app-2.png)\\r\\n4. Select the ***REST API*** option under privileges and provide a suitable name for the integration. Select te appropriate user for the integration owner. <br /><br />![Alt text](img/app-3.png)\\r\\n5. Click on **Create** and copy the **Client ID** and **Client Secret** and retain for use with G&L.<br /><br />![Alt text](img/app-4.png)\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Members\\r\\n```json\\r\\n{\\r\\n    \\"entries\\": [\\r\\n        {\\r\\n            \\"organizationId\\": \\"b3a46583-f00f-45b4-b8c8-c78afe2c2583\\",\\r\\n            \\"memberId\\": \\"24xbN7rFbrzkk7h1g4klmw9t6KJxl\\",\\r\\n            \\"memberType\\": \\"admin\\",\\r\\n            \\"firstName\\": \\"Amit\\",\\r\\n            \\"lastName\\": \\"Patel\\",\\r\\n            \\"email\\": \\"amit.patel@example.com\\",\\r\\n            \\"profileImgUrl\\": null,\\r\\n            \\"createdBy\\": \\"24xbN7rFbrzkk7h1g4klmw9t6KJxl\\",\\r\\n            \\"updatedBy\\": \\"24xbN7rFbrzkk7h1g4klmw9t6KJxl\\",\\r\\n            \\"createdAt\\": \\"2024-04-29T15:33:16.763Z\\",\\r\\n            \\"updatedAt\\": \\"2024-04-29T15:33:16.763Z\\",\\r\\n            \\"homeFolderId\\": \\"81ac8412-3187-4323-821b-ef183b952760\\",\\r\\n            \\"userKind\\": \\"internal\\",\\r\\n            \\"isInactive\\": false\\r\\n        },\\r\\n        {\\r\\n            \\"organizationId\\": \\"b3a46583-f00f-45b4-b8c8-c78afe2c2583\\",\\r\\n            \\"memberId\\": \\"2psFY5jnsqSAzMtJPginwWOwUkDtA\\",\\r\\n            \\"memberType\\": \\"admin\\",\\r\\n            \\"firstName\\": \\"Ethan\\",\\r\\n            \\"lastName\\": \\"Walker\\",\\r\\n            \\"email\\": \\"ethan.walker@example.com\\",\\r\\n            \\"profileImgUrl\\": null,\\r\\n            \\"createdBy\\": \\"2psFY5jnsqSAzMtJPginwWOwUkDtA\\",\\r\\n            \\"updatedBy\\": \\"2psFY5jnsqSAzMtJPginwWOwUkDtA\\",\\r\\n            \\"createdAt\\": \\"2024-04-29T15:34:04.669Z\\",\\r\\n            \\"updatedAt\\": \\"2024-04-29T15:34:04.669Z\\",\\r\\n            \\"homeFolderId\\": \\"e9f10281-f2c9-4cd0-89c3-f177e132d4c6\\",\\r\\n            \\"userKind\\": \\"internal\\",\\r\\n            \\"isInactive\\": false\\r\\n        }\\r\\n    ],\\r\\n    \\"nextPage\\": \\"%7B%22userId%22%3A%22HFOwbxKIfzm0OzYnzlZPsoKp25sTI%22%7D\\"\\r\\n}\\r\\n```\\r\\n\\r\\n### List Teams\\r\\n```json\\r\\n{\\r\\n    \\"entries\\": [\\r\\n        {\\r\\n            \\"teamId\\": \\"183f1ceb-2f9f-451a-a8a5-d54639586e0a\\",\\r\\n            \\"createdBy\\": \\"zccFnRDzYrkE1wDYC32dllkHjuArI\\",\\r\\n            \\"updatedBy\\": \\"zccFnRDzYrkE1wDYC32dllkHjuArI\\",\\r\\n            \\"createdAt\\": \\"2024-04-29T16:22:55.039Z\\",\\r\\n            \\"updatedAt\\": \\"2024-04-29T16:22:55.039Z\\",\\r\\n            \\"name\\": \\"Business Insights Architects\\",\\r\\n            \\"description\\": \\"Illustrates Sigma BI\'s expertise in designing and constructing valuable business insights.\\\\n\\",\\r\\n            \\"visibility\\": \\"public\\"\\r\\n        },\\r\\n        {\\r\\n            \\"teamId\\": \\"1ae206ff-4716-4612-9ad7-14dd1053e618\\",\\r\\n            \\"createdBy\\": \\"zccFnRDzYrkE1wDYC32dllkHjuArI\\",\\r\\n            \\"updatedBy\\": \\"zccFnRDzYrkE1wDYC32dllkHjuArI\\",\\r\\n            \\"createdAt\\": \\"2024-04-29T16:23:15.023Z\\",\\r\\n            \\"updatedAt\\": \\"2024-04-29T16:23:15.023Z\\",\\r\\n            \\"name\\": \\"Data Excellence Experts\\",\\r\\n            \\"description\\": \\"Showcases Sigma BI\'s commitment to excellence in data analysis and interpretation.\\\\n\\",\\r\\n            \\"visibility\\": \\"public\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"nextPage\\": \\"%7B%22teamId%22%3A%221ae206ff-4716-4612-9ad7-14dd1053e618%22%7D\\"\\r\\n}\\r\\n```\\r\\n\\r\\n### List Team Members\\r\\n```json\\r\\n{\\r\\n    \\"nextPage\\": null,\\r\\n    \\"total\\": 7,\\r\\n    \\"entries\\": [\\r\\n        {\\r\\n            \\"userId\\": \\"3Oeo52UDPnUrZfWr77a7cWLbnGVVE\\",\\r\\n            \\"isTeamAdmin\\": false\\r\\n        },\\r\\n        {\\r\\n            \\"userId\\": \\"485dglt4GqGJG1OjWm2LvH7cXcYMz\\",\\r\\n            \\"isTeamAdmin\\": false\\r\\n        },\\r\\n        {\\r\\n            \\"userId\\": \\"NugM7kIp4KTN69E4jEs3H4ZJxxsE6\\",\\r\\n            \\"isTeamAdmin\\": false\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n---\\r\\n## References\\r\\n- [Generate API client credentials](https://help.sigmacomputing.com/docs/generate-api-client-credentials)\\r\\n- [Identify which API URL to use according to your Sigma organization\'s cloud provider](https://help.sigmacomputing.com/docs/get-started-with-sigmas-api#identify-which-api-url-to-use-according-to-your-sigma-organizations-cloud-provider)\\r\\n- [Sigma Public API 2.0.0](https://docs.sigmacomputing.com/api/v2/)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL056</span>"},{"id":"bonusly","metadata":{"permalink":"/RSA/blog/bonusly","source":"@site/blog/collections/bonusly/bonusly.mdx","title":"Bonusly","description":"Bonusly is a recognition and rewards platform that fosters employee engagement by allowing peers to give and receive micro-bonuses for excellent work. Its intuitive interface and integration with popular workplace tools make it easy for teams to appreciate each other\'s efforts, boosting morale and productivity.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2024-05-08T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Bonusly","permalink":"/RSA/blog/tags/bonusly"},{"inline":true,"label":"Employee Engagement","permalink":"/RSA/blog/tags/employee-engagement"},{"inline":true,"label":"Collaboration","permalink":"/RSA/blog/tags/collaboration"}],"readingTime":42.6,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"bonusly","title":"Bonusly","date":"2024-05-08T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Bonusly","Employee Engagement","Collaboration"],"keywords":["Collections","REST","SaaS","Bonusly","Employee Engagement","Collaboration"],"draft":false},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Sigma","permalink":"/RSA/blog/sigma"},"nextItem":{"title":"HubSpot","permalink":"/RSA/blog/hubspot"}},"content":"import logoPNG from \'@site/static/img/logos/Bonusly - 180x180.jpg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Bonusly is a recognition and rewards platform that fosters employee engagement by allowing peers to give and receive micro-bonuses for excellent work. Its intuitive interface and integration with popular workplace tools make it easy for teams to appreciate each other\'s efforts, boosting morale and productivity.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Bonusly application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Bonusly**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br/><br/>![img](img/3.png)<br/><br/>\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Bonusly.<br/><br/>![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users` ([Sample Response](#list-users))</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>  \\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>include_archived</td>\\r\\n    <td>`true`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.result.*.username`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.result.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.result.*.email`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>UniqueID</td>\\r\\n    <td>`$.result.*.external_unique_id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/8.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/9.png)\\r\\n12. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/10.png)\\r\\n13. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect site roles and assignments from the Bonusly application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n:::info\\r\\nSince Bonusly does not provide an API for listing user modes, we will use a custom web service for the EDC. Refer to [Custom Web Service : User Modes](#user-modes) for more information.\\r\\n:::\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Bonusly**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/11.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Bonusly.<br /><br />![Alt text](img/12.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/13.png)<br />![Alt text](img/14.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/BonuslyUserModesv2.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.user_modes.*.userMode`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.user_modes.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/6.png)<br />![Alt text](img/16.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://bonus.ly/api/v1/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.result.*.user_mode`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.result.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/17.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/18.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up Bonusly for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Bonusly API dashboard https://bonus.ly/api.\\r\\n2. Click on ***Create New API Access Token***.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Provide a suitable label and click on **Create Api key**.<br /><br />![Alt text](img/app-2.png)\\r\\n4. The API key will be shown on the right hand corner for a few seconds.<br /><br />![Alt text](img/app-3.png)\\r\\n5. Copy the token and retain for use with G&L.<br /><br />![Alt text](img/app-4.png)\\r\\n---\\r\\n## Custom Web Service\\r\\n### User Modes\\r\\nSince Bonusly does not provide an API for listing user modes, we will use a custom JSP that will publish this as web service. \\r\\n\\r\\n**Steps**\\r\\n1. Open a text editor and save the contents below as `BonuslyUserModesv2.jsp.`\\r\\n```java \\r\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\r\\n<%\\r\\nString jsonData = \\"{\\\\n\\" +\\r\\n    \\"  \\\\\\"user_modes\\\\\\": [\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"userMode\\\\\\": \\\\\\"normal\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Normal users are the standard users of Bonusly. They can give bonuses to others, receive bonuses, and engage with other features of the platform like commenting and redeeming bonuses. This mode is suitable for regular employees who actively participate in recognizing their peers.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"userMode\\\\\\": \\\\\\"benefactor\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Benefactors have the ability to give bonuses to others but do not receive bonuses themselves. This mode is often used for administrators, managers, or executives who want to incentivize and reward their team members but do not wish to receive bonuses in return.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"userMode\\\\\\": \\\\\\"receiver\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Receivers can only receive bonuses from others but cannot give bonuses themselves. This mode is typically assigned to contractors, interns, or temporary staff who may not have the authority or need to give bonuses but can still be recognized and rewarded by their colleagues.\\\\\\"\\\\n\\" +\\r\\n    \\"    },\\\\n\\" +\\r\\n    \\"    {\\\\n\\" +\\r\\n    \\"      \\\\\\"userMode\\\\\\": \\\\\\"observer\\\\\\",\\\\n\\" +\\r\\n    \\"      \\\\\\"description\\\\\\": \\\\\\"Observers have limited interaction with the platform and can only view bonus activity without the ability to give or receive bonuses. This mode is useful for stakeholders, auditors, or other parties who need to monitor bonus activity within the organization without actively participating in the recognition process.\\\\\\"\\\\n\\" +\\r\\n    \\"    }\\\\n\\" +\\r\\n    \\"  ]\\\\n\\" +\\r\\n    \\"}\\";\\r\\n%>\\r\\n\\r\\n<%\\r\\n    response.setContentType(\\"application/json\\");\\r\\n    out.print(jsonData);\\r\\n%>\\r\\n```\\r\\n2. Login to RSA G&L console as AveksaAdmin.\\r\\n3. Navigate to **Admin > User Interface.**\\r\\n4. Click on **Files**.\\r\\n5. Select ***External JSP Pages*** and click on **Upload**.\\r\\n6. Select the `BonuslyUserModesv2.jsp` and click **OK**.\\r\\n7. Verify by accessing this URL in the browser https://instance.securid.com/aveksa/custom/external_jsp/BonuslyUserModesv2.jsp \\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Users\\r\\n```json\\r\\n{\\r\\n    \\"success\\": true,\\r\\n    \\"result\\": [\\r\\n        {\\r\\n            \\"id\\": \\"662a9580660dac001044e678\\",\\r\\n            \\"short_name\\": \\"Oliver Davis\\",\\r\\n            \\"full_name\\": \\"Oliver Davis\\",\\r\\n            \\"display_name\\": \\"Oliver Davis\\",\\r\\n            \\"username\\": \\"oliver.davis\\",\\r\\n            \\"email\\": \\"oliver.davis@example.com\\",\\r\\n            \\"path\\": \\"/company/users/662a9580660dac001044e678\\",\\r\\n            \\"first_name\\": \\"Oliver\\",\\r\\n            \\"last_name\\": \\"Davis\\",\\r\\n            \\"preferred_first_name\\": null,\\r\\n            \\"last_active_at\\": null,\\r\\n            \\"created_at\\": \\"2024-04-25T17:40:16Z\\",\\r\\n            \\"external_unique_id\\": \\"789012\\",\\r\\n            \\"budget_boost\\": 0,\\r\\n            \\"user_mode\\": \\"observer\\",\\r\\n            \\"cost_center\\": \\"\\",\\r\\n            \\"country\\": \\"US\\",\\r\\n            \\"time_zone\\": \\"America/New_York\\",\\r\\n            \\"can_receive\\": false,\\r\\n            \\"can_give\\": false,\\r\\n            \\"suggested_give_amounts\\": [],\\r\\n            \\"custom_properties\\": {\\r\\n                \\"department\\": \\"engineering i\\",\\r\\n                \\"location\\": null,\\r\\n                \\"role\\": null\\r\\n            },\\r\\n            \\"status\\": \\"active\\",\\r\\n            \\"hired_on\\": \\"2023-11-10\\",\\r\\n            \\"manager_email\\": \\"john.doe@example.com\\",\\r\\n            \\"client_ids\\": {},\\r\\n            \\"intercom_id\\": null\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"662a8ee61155d600195565fc\\",\\r\\n            \\"short_name\\": \\"Noah Turner\\",\\r\\n            \\"full_name\\": \\"Noah Turner\\",\\r\\n            \\"display_name\\": \\"Noah Turner\\",\\r\\n            \\"username\\": \\"noah.turner\\",\\r\\n            \\"email\\": \\"noah.turner@example.com\\",\\r\\n            \\"path\\": \\"/company/users/662a8ee61155d600195565fc\\",\\r\\n            \\"first_name\\": \\"Noah\\",\\r\\n            \\"last_name\\": \\"Turner\\",\\r\\n            \\"preferred_first_name\\": null,\\r\\n            \\"last_active_at\\": null,\\r\\n            \\"created_at\\": \\"2024-04-25T17:12:06Z\\",\\r\\n            \\"external_unique_id\\": \\"901234\\",\\r\\n            \\"budget_boost\\": 0,\\r\\n            \\"user_mode\\": \\"observer\\",\\r\\n            \\"cost_center\\": \\"\\",\\r\\n            \\"country\\": \\"US\\",\\r\\n            \\"time_zone\\": \\"America/Los_Angeles\\",\\r\\n            \\"can_receive\\": false,\\r\\n            \\"can_give\\": false,\\r\\n            \\"suggested_give_amounts\\": [],\\r\\n            \\"custom_properties\\": {\\r\\n                \\"department\\": \\"engineering\\",\\r\\n                \\"location\\": null,\\r\\n                \\"role\\": null\\r\\n            },\\r\\n            \\"status\\": \\"active\\",\\r\\n            \\"hired_on\\": \\"2023-09-20\\",\\r\\n            \\"manager_email\\": \\"john.doe@example.com\\",\\r\\n            \\"client_ids\\": {},\\r\\n            \\"intercom_id\\": null\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n---\\r\\n## References\\r\\n- [API Reference](https://docs.bonus.ly/reference/intro/getting-started)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL055</span>"},{"id":"hubspot","metadata":{"permalink":"/RSA/blog/hubspot","source":"@site/blog/collections/hubspot/hubspot.mdx","title":"HubSpot","description":"HubSpot is a leading CRM platform that offers marketing, sales, and customer service tools to help businesses grow. It provides solutions for email marketing, lead generation, social media management, and more, all integrated into one platform. HubSpot\'s user-friendly interface and robust analytics make it a popular choice for companies seeking to streamline their customer relationship management efforts.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2024-04-29T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"HubSpot","permalink":"/RSA/blog/tags/hub-spot"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"},{"inline":true,"label":"Marketing","permalink":"/RSA/blog/tags/marketing"}],"readingTime":31.633333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"hubspot","title":"HubSpot","date":"2024-04-29T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","HubSpot","CRM","Marketing"],"keywords":["Collections","REST","SaaS","HubSpot","CRM","Marketing"],"draft":false},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Bonusly","permalink":"/RSA/blog/bonusly"},"nextItem":{"title":"TalentLMS","permalink":"/RSA/blog/talent-lms"}},"content":"import logoPNG from \'@site/static/img/logos/HubSpot - 180x180.jpg\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>HubSpot is a leading CRM platform that offers marketing, sales, and customer service tools to help businesses grow. It provides solutions for email marketing, lead generation, social media management, and more, all integrated into one platform. HubSpot\'s user-friendly interface and robust analytics make it a popular choice for companies seeking to streamline their customer relationship management efforts.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the HubSpot application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#-references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **HubSpot**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br/><br/>![img](img/3.png)<br/><br/>\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from HubSpot<br/><br/>![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/crm/v3/owners` ([Sample Response](#list-users))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.results[*].email`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.results[*].id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br/><br/>![Alt text](img/8.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/settings/v3/users/teams` ([Sample Response](#list-teams))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.results.*.name`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.results.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br/><br/>![Alt text](img/10.png)<br/>![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/crm/v3/owners` ([Sample Response](#list-teams))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.results[*].id`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.results[*].teams[*].id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br/><br/>![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br/><br/>![Alt text](img/16.png)\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Pagination\\r\\nTo enable pagination for HubSpot ADC and EDC in G&L, you can utilize the following settings:\\r\\n<br/><br/>![Alt text](img/6.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Pagination Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Maximum Records Per Page</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>limit</td>\\r\\n                <td>100</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Read From</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>Response Body</td>\\r\\n                <td>`$.paging.next.link`</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Pass As</td>\\r\\n    <td>\\r\\n        <table class=\\"table-container\\">\\r\\n            <tr>\\r\\n                <td>Parameter Key</td>\\r\\n                <td>Parameter Value</td>\\r\\n            </tr>\\r\\n            <tr>\\r\\n                <td>URL</td>\\r\\n                <td>-</td>\\r\\n            </tr>\\r\\n        </table>\\r\\n    </td>\\r\\n  </tr> \\r\\n</table>\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up HubSpot for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to HubSpot https://app.hubspot.com/.\\r\\n2. On the right hand corner, click on **Profile & Preferences**.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Click on **Private apps** under **Integrations**.\\r\\n4. Click on **Create a private app**.<br /><br />![Alt text](img/app-2.png)\\r\\n5. Provide a suitable application name.<br /><br />![Alt text](img/app-3.png)\\r\\n6. Click on ***Scopes*** tab and provide the the following scopes.\\r\\n    - `crm.objects.users.read`\\r\\n    - `settings.users.teams.read`\\r\\n    - `settings.users.read`\\r\\n    - `crm.objects.owners.read`\\r\\n7. Click **Create app**.<br /><br />![Alt text](img/app-4.png)\\r\\n8. Click on **Continue creating**.<br /><br />![Alt text](img/app-5.png)\\r\\n9. Copy the token and retain for use with G&L.<br /><br />![Alt text](img/app-6.png)\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Users\\r\\n```json\\r\\n{\\r\\n    \\"results\\": [\\r\\n        {\\r\\n            \\"id\\": \\"425388555\\",\\r\\n            \\"email\\": \\"amelia.rodriguez@example.com\\",\\r\\n            \\"firstName\\": \\"Amelia\\",\\r\\n            \\"lastName\\": \\"Rodriguez\\",\\r\\n            \\"userId\\": 66226766,\\r\\n            \\"userIdIncludingInactive\\": 66226766,\\r\\n            \\"archived\\": false,\\r\\n            \\"teams\\": [\\r\\n                {\\r\\n                    \\"id\\": \\"44434520\\",\\r\\n                    \\"name\\": \\"Geographic Regions\\",\\r\\n                    \\"primary\\": true\\r\\n                },\\r\\n                {\\r\\n                    \\"id\\": \\"44434549\\",\\r\\n                    \\"name\\": \\"Marketing Campaigns\\",\\r\\n                    \\"primary\\": false\\r\\n                },\\r\\n                {\\r\\n                    \\"id\\": \\"44434547\\",\\r\\n                    \\"name\\": \\"Customer Lifecycle Stage\\",\\r\\n                    \\"primary\\": false\\r\\n                },\\r\\n                {\\r\\n                    \\"id\\": \\"44434506\\",\\r\\n                    \\"name\\": \\"Lead Status\\",\\r\\n                    \\"primary\\": false\\r\\n                }\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"1191634909\\",\\r\\n            \\"email\\": \\"aishwarya.rao@example.com\\",\\r\\n            \\"firstName\\": \\"Aishwarya\\",\\r\\n            \\"lastName\\": \\"Rao\\",\\r\\n            \\"userId\\": 66226763,\\r\\n            \\"userIdIncludingInactive\\": 66226763,\\r\\n            \\"archived\\": false,\\r\\n            \\"teams\\": [\\r\\n                {\\r\\n                    \\"id\\": \\"44434389\\",\\r\\n                    \\"name\\": \\"Industry Segments\\",\\r\\n                    \\"primary\\": true\\r\\n                },\\r\\n                {\\r\\n                    \\"id\\": \\"44434547\\",\\r\\n                    \\"name\\": \\"Customer Lifecycle Stage\\",\\r\\n                    \\"primary\\": false\\r\\n                },\\r\\n                {\\r\\n                    \\"id\\": \\"44434524\\",\\r\\n                    \\"name\\": \\"Product Interest\\",\\r\\n                    \\"primary\\": false\\r\\n                }\\r\\n            ]\\r\\n        }\\r\\n    ],\\r\\n    \\"paging\\": {\\r\\n        \\"next\\": {\\r\\n            \\"after\\": \\"MTI2NzMzMDQ1NA%3D%3D\\",\\r\\n            \\"link\\": \\"https://api.hubapi.com/crm/v3/owners?limit=3&after=MTI2NzMzMDQ1NA%3D%3D\\"\\r\\n        }\\r\\n    }\\r\\n}\\r\\n```\\r\\n\\r\\n### List Teams\\r\\n```json\\r\\n{\\r\\n    \\"results\\": [\\r\\n        {\\r\\n            \\"id\\": \\"44434549\\",\\r\\n            \\"name\\": \\"Marketing Campaigns\\",\\r\\n            \\"userIds\\": [],\\r\\n            \\"secondaryUserIds\\": [\\r\\n                \\"66226766\\"\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"44434389\\",\\r\\n            \\"name\\": \\"Industry Segments\\",\\r\\n            \\"userIds\\": [\\r\\n                \\"66226763\\",\\r\\n                \\"66226767\\"\\r\\n            ],\\r\\n            \\"secondaryUserIds\\": []\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"44434506\\",\\r\\n            \\"name\\": \\"Lead Status\\",\\r\\n            \\"userIds\\": [],\\r\\n            \\"secondaryUserIds\\": [\\r\\n                \\"66226766\\"\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"44434524\\",\\r\\n            \\"name\\": \\"Product Interest\\",\\r\\n            \\"userIds\\": [\\r\\n                \\"66226765\\"\\r\\n            ],\\r\\n            \\"secondaryUserIds\\": [\\r\\n                \\"66226763\\"\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"44434520\\",\\r\\n            \\"name\\": \\"Geographic Regions\\",\\r\\n            \\"userIds\\": [\\r\\n                \\"66226766\\",\\r\\n                \\"66222292\\"\\r\\n            ],\\r\\n            \\"secondaryUserIds\\": [\\r\\n                \\"66226767\\"\\r\\n            ]\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"44434547\\",\\r\\n            \\"name\\": \\"Customer Lifecycle Stage\\",\\r\\n            \\"userIds\\": [],\\r\\n            \\"secondaryUserIds\\": [\\r\\n                \\"66222292\\",\\r\\n                \\"66226766\\",\\r\\n                \\"66226767\\",\\r\\n                \\"66226763\\"\\r\\n            ]\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n---\\r\\n#### \ud83d\udcd3 References\\r\\n- [Building apps](https://developers.hubspot.com/docs/api/creating-an-app)\\r\\n- [Working with OAuth](https://developers.hubspot.com/docs/api/working-with-oauth)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL054</span>"},{"id":"talent-lms","metadata":{"permalink":"/RSA/blog/talent-lms","source":"@site/blog/collections/talent-lms/talent-lms.mdx","title":"TalentLMS","description":"TalentLMS is a user-friendly learning management system designed for businesses and educational institutions. With intuitive course creation tools, customizable learning paths, and robust tracking features, it enables organizations to deliver effective training to employees, customers, and partners. Its cloud-based platform offers scalability, ease of use, and comprehensive reporting, making it an ideal solution for modern training needs.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2024-04-24T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"TalentLMS","permalink":"/RSA/blog/tags/talent-lms"},{"inline":true,"label":"Learning Management","permalink":"/RSA/blog/tags/learning-management"},{"inline":true,"label":"LMS","permalink":"/RSA/blog/tags/lms"},{"inline":true,"label":"Education","permalink":"/RSA/blog/tags/education"},{"inline":true,"label":"API Key","permalink":"/RSA/blog/tags/api-key"}],"readingTime":29.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"talent-lms","title":"TalentLMS","date":"2024-04-24T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","TalentLMS","Learning Management","LMS","Education","API Key"],"keywords":["Collections","REST","SaaS","TalentLMS","Learning Management","LMS","Education","API Key"],"draft":false},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"HubSpot","permalink":"/RSA/blog/hubspot"},"nextItem":{"title":"Notion","permalink":"/RSA/blog/notion"}},"content":"import logoPNG from \'@site/static/img/logos/TalentLMS - 180x180.jpg\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>TalentLMS is a user-friendly learning management system designed for businesses and educational institutions. With intuitive course creation tools, customizable learning paths, and robust tracking features, it enables organizations to deliver effective training to employees, customers, and partners. Its cloud-based platform offers scalability, ease of use, and comprehensive reporting, making it an ideal solution for modern training needs.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the TalentLMS application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#-references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **TalentLMS**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br/><br/>![img](img/3.png)<br/><br/>\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from TalentLMS<br/><br/>![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/7.png)\\r\\n:::info\\r\\nThis is the only API in TalentLMS that supports pagination\\r\\n:::\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/users` ([Sample Response](#list-users))</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.login`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.*.email`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.*.status`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br/><br/>![Alt text](img/8.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/groups` ([Sample Response](#list-groups))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.description`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Key</td>\\r\\n    <td>`$.*.key`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Owner</td>\\r\\n    <td>`$.*.owner_id`</td>\\r\\n  </tr>  \\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br/><br/>![Alt text](img/10.png)<br/>![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/groups/id:${Id}` ([Sample Response](#list-group-members))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br/><br/>![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br/><br/>![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up TalentLMS for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to TalentLMS https://instance.talentlms.com/\\r\\n2. Click on **Go To** and select **Account & Settings**.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Under **Security** check the ***Enable API***.<br /><br />![Alt text](img/app-2.png)\\r\\n5. Copy the token and retain for use with G&L.\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Users\\r\\n```json\\r\\n[\\r\\n    {\\r\\n        \\"id\\": \\"2\\",\\r\\n        \\"login\\": \\"aishwarya.rao\\",\\r\\n        \\"first_name\\": \\"Aishwarya\\",\\r\\n        \\"last_name\\": \\"Rao\\",\\r\\n        \\"email\\": \\"aishwarya.rao@example.com\\",\\r\\n        \\"restrict_email\\": \\"0\\",\\r\\n        \\"user_type\\": \\"Trainer-Type\\",\\r\\n        \\"timezone\\": \\"(GMT +01:00) Greenwich Mean Time: Edinburgh, Lisbon, London\\",\\r\\n        \\"language\\": \\"English\\",\\r\\n        \\"status\\": \\"false\\",\\r\\n        \\"deactivation_date\\": \\"\\",\\r\\n        \\"level\\": \\"1\\",\\r\\n        \\"points\\": \\"0\\",\\r\\n        \\"created_on\\": \\"23/04/2024, 16:44:53\\",\\r\\n        \\"last_updated\\": \\"23/04/2024, 16:45:09\\",\\r\\n        \\"last_updated_timestamp\\": \\"1713887109\\",\\r\\n        \\"avatar\\": \\"https://d3j0t7vrtr92dk.cloudfront.net/images/default_user.png\\",\\r\\n        \\"bio\\": \\"\\",\\r\\n        \\"login_key\\": \\"https://rsa.talentlms.com/index/autologin/key:7r3cgxjcim3pneyg1j4817138870932\\"\\r\\n    },\\r\\n    {\\r\\n        \\"id\\": \\"3\\",\\r\\n        \\"login\\": \\"alexander.wright@example.com\\",\\r\\n        \\"first_name\\": \\"Alexander\\",\\r\\n        \\"last_name\\": \\"Wright\\",\\r\\n        \\"email\\": \\"alexander.wright@example.com\\",\\r\\n        \\"restrict_email\\": \\"0\\",\\r\\n        \\"user_type\\": \\"Learner-Type\\",\\r\\n        \\"timezone\\": \\"(GMT +01:00) Greenwich Mean Time: Edinburgh, Lisbon, London\\",\\r\\n        \\"language\\": \\"English\\",\\r\\n        \\"status\\": \\"active\\",\\r\\n        \\"deactivation_date\\": \\"\\",\\r\\n        \\"level\\": \\"1\\",\\r\\n        \\"points\\": \\"0\\",\\r\\n        \\"created_on\\": \\"23/04/2024, 18:58:38\\",\\r\\n        \\"last_updated\\": \\"23/04/2024, 18:58:38\\",\\r\\n        \\"last_updated_timestamp\\": \\"1713895118\\",\\r\\n        \\"avatar\\": \\"https://d3j0t7vrtr92dk.cloudfront.net/images/default_user.png\\",\\r\\n        \\"bio\\": null,\\r\\n        \\"login_key\\": \\"https://rsa.talentlms.com/index/autologin/key:6u3fezxp7253q4qqlsy117138951183\\"\\r\\n    }\\r\\n]\\r\\n```\\r\\n\\r\\n### List Groups\\r\\n```json\\r\\n[\\r\\n    {\\r\\n        \\"id\\": \\"4\\",\\r\\n        \\"name\\": \\"Compliance Training\\",\\r\\n        \\"description\\": \\"Compliance Training group ensures employees are up-to-date with regulatory requirements and policies.\\",\\r\\n        \\"key\\": \\"jay3SsCej\\",\\r\\n        \\"price\\": \\"&#36;0.00\\",\\r\\n        \\"owner_id\\": \\"1\\",\\r\\n        \\"belongs_to_branch\\": null,\\r\\n        \\"max_redemptions\\": null,\\r\\n        \\"redemptions_sofar\\": null\\r\\n    },\\r\\n    {\\r\\n        \\"id\\": \\"1\\",\\r\\n        \\"name\\": \\"New Employees\\",\\r\\n        \\"description\\": \\"This group is designed for new employees who require onboarding and orientation materials and training.\\",\\r\\n        \\"key\\": \\"tWfhwE2AG\\",\\r\\n        \\"price\\": \\"&#36;0.00\\",\\r\\n        \\"owner_id\\": \\"1\\",\\r\\n        \\"belongs_to_branch\\": null,\\r\\n        \\"max_redemptions\\": null,\\r\\n        \\"redemptions_sofar\\": null\\r\\n    },\\r\\n    {\\r\\n        \\"id\\": \\"2\\",\\r\\n        \\"name\\": \\"Sales Team\\",\\r\\n        \\"description\\": \\"The Sales Team group provides sales professionals with specialized training on products and techniques.\\",\\r\\n        \\"key\\": \\"T4sdShm9s\\",\\r\\n        \\"price\\": \\"&#36;0.00\\",\\r\\n        \\"owner_id\\": \\"1\\",\\r\\n        \\"belongs_to_branch\\": null,\\r\\n        \\"max_redemptions\\": null,\\r\\n        \\"redemptions_sofar\\": null\\r\\n    }\\r\\n]\\r\\n```\\r\\n\\r\\n### List Group Members\\r\\n```json\\r\\n{\\r\\n    \\"id\\": \\"1\\",\\r\\n    \\"name\\": \\"New Employees\\",\\r\\n    \\"description\\": \\"This group is designed for new employees who require onboarding and orientation materials and training.\\",\\r\\n    \\"key\\": \\"tWfhwE2AG\\",\\r\\n    \\"price\\": \\"&#36;0.00\\",\\r\\n    \\"owner_id\\": \\"1\\",\\r\\n    \\"belongs_to_branch\\": null,\\r\\n    \\"max_redemptions\\": null,\\r\\n    \\"redemptions_sofar\\": null,\\r\\n    \\"users\\": [\\r\\n        {\\r\\n            \\"id\\": \\"4\\",\\r\\n            \\"name\\": \\"A. Rodriguez\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"7\\",\\r\\n            \\"name\\": \\"B. Hill\\"\\r\\n        },\\r\\n        {\\r\\n            \\"id\\": \\"10\\",\\r\\n            \\"name\\": \\"C. Brown\\"\\r\\n        }\\r\\n    ],\\r\\n    \\"courses\\": []\\r\\n}\\r\\n```\\r\\n---\\r\\n#### \ud83d\udcd3 References\\r\\n- [API Documentation](https://market.talentlms.com/pages/docs/TalentLMS-API-Documentation.pdf)\\r\\n- [API Setup](https://help.talentlms.com/hc/en-us/articles/360014573414-Can-I-integrate-my-site-with-TalentLMS-Do-you-offer-an-API)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL053</span>"},{"id":"notion","metadata":{"permalink":"/RSA/blog/notion","source":"@site/blog/collections/notion/notion.mdx","title":"Notion","description":"Notion is a versatile productivity tool offering note-taking, project management, and collaboration features. Its customizable workspace allows users to organize tasks, documents, and databases efficiently. With seamless integration across platforms, Notion enhances team collaboration and individual productivity, making it a popular choice for personal and professional use.Versions: 8.0.0 P2Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2024-04-18T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Notion","permalink":"/RSA/blog/tags/notion"},{"inline":true,"label":"SCIM","permalink":"/RSA/blog/tags/scim"}],"readingTime":25.933333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"notion","title":"Notion","date":"2024-04-18T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Notion","SCIM"],"keywords":["Collections","REST","SaaS","Notion","SCIM"],"draft":false},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"TalentLMS","permalink":"/RSA/blog/talent-lms"},"nextItem":{"title":"Capsule CRM","permalink":"/RSA/blog/capsulecrm"}},"content":"import logoPNG from \'@site/static/img/logos/Notion - 180x180.jpg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Notion is a versatile productivity tool offering note-taking, project management, and collaboration features. Its customizable workspace allows users to organize tasks, documents, and databases efficiently. With seamless integration across platforms, Notion enhances team collaboration and individual productivity, making it a popular choice for personal and professional use.<br /><br />Versions: `8.0.0 P2`<br/><br/>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br/>![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Notion application. We will use the RSA G&L Generic REST collector [\ud83d\udcd8](#references) for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Notion**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br/><br/>![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br/><br/>![img](img/3.png)<br/><br/>\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Notion.<br/><br/>![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br/><br/>![Alt text](img/5.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Users` ([Sample Response](#list-users))</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Resources.*.userName`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.Resources.*.emails.*.value`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.Resources.*.active`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br/><br/>![Alt text](img/8.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Groups` ([Sample Response](#list-groups))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.Resources.*.displayName`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br/><br/>![Alt text](img/10.png)<br/>![Alt text](img/6.png)<br/>![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Groups` ([Sample Response](#list-groups))</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>  \\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.Resources.*.members.*.value`</td>\\r\\n  </tr>   \\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br/><br/>![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br/><br/>![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br/><br/>![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br/><br/>![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br/><br/>![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up Notion for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Notion https://www.notion.so/.\\r\\n2. Click on ***Settings and members***.<br /><br />![Alt text](img/scim-1.png)\\r\\n3. Click on **Identity & provisioning** under **Integrations**.<br /><br />![Alt text](img/scim-2.png)\\r\\n4. Click on **Add token**.\\r\\n5. Copy the token and retain for use with G&L.<br /><br />![Alt text](img/scim-3.png)\\r\\n---\\r\\n## API Examples\\r\\n\\r\\n### List Users\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"schemas\\": [\\r\\n        \\"urn:ietf:params:scim:api:messages:2.0:ListResponse\\"\\r\\n    ],\\r\\n    \\"totalResults\\": 13,\\r\\n    \\"Resources\\": [\\r\\n        {\\r\\n            \\"schemas\\": [\\r\\n                \\"urn:ietf:params:scim:schemas:core:2.0:User\\"\\r\\n            ],\\r\\n            \\"id\\": \\"1fb366bb-975d-4422-b2f7-47f8b5ce77b1\\",\\r\\n            \\"userName\\": \\"john.doe@example.com\\",\\r\\n            \\"name\\": {},\\r\\n            \\"emails\\": [\\r\\n                {\\r\\n                    \\"value\\": \\"john.doe@example.com\\",\\r\\n                    \\"primary\\": true\\r\\n                }\\r\\n            ],\\r\\n            \\"active\\": true,\\r\\n            \\"meta\\": {\\r\\n                \\"resourceType\\": \\"User\\",\\r\\n                \\"created\\": \\"1713809626055\\",\\r\\n                \\"lastModified\\": \\"1713809626055\\",\\r\\n                \\"location\\": \\"https://www.notion.so/scim/v2/Users/1fb366bb-975d-4422-b2f7-47f8b5ce77b1\\"\\r\\n            }\\r\\n        },\\r\\n        {\\r\\n            \\"schemas\\": [\\r\\n                \\"urn:ietf:params:scim:schemas:core:2.0:User\\"\\r\\n            ],\\r\\n            \\"id\\": \\"29742ab8-3bab-414b-8518-e89209c4df21\\",\\r\\n            \\"userName\\": \\"emma.miller@example.com\\",\\r\\n            \\"name\\": {\\r\\n                \\"formatted\\": \\"Emma Miller\\",\\r\\n                \\"givenName\\": \\"Emma\\",\\r\\n                \\"familyName\\": \\"Miller\\"\\r\\n            },\\r\\n            \\"emails\\": [\\r\\n                {\\r\\n                    \\"value\\": \\"emma.miller@example.com\\",\\r\\n                    \\"primary\\": true\\r\\n                }\\r\\n            ],\\r\\n            \\"displayName\\": \\"Emma Miller\\",\\r\\n            \\"active\\": true,\\r\\n            \\"meta\\": {\\r\\n                \\"resourceType\\": \\"User\\",\\r\\n                \\"created\\": \\"1713809626055\\",\\r\\n                \\"lastModified\\": \\"1713809626055\\",\\r\\n                \\"location\\": \\"https://www.notion.so/scim/v2/Users/29742ab8-3bab-414b-8518-e89209c4df21\\"\\r\\n            }\\r\\n        }\\r\\n    ],\\r\\n    \\"startIndex\\": 1,\\r\\n    \\"itemsPerPage\\": 2\\r\\n}\\r\\n```\\r\\n\\r\\n### List Groups\\r\\n\\r\\n```json\\r\\n{\\r\\n    \\"schemas\\": [\\r\\n        \\"urn:ietf:params:scim:api:messages:2.0:ListResponse\\"\\r\\n    ],\\r\\n    \\"totalResults\\": 6,\\r\\n    \\"Resources\\": [\\r\\n        {\\r\\n            \\"schemas\\": [\\r\\n                \\"urn:ietf:params:scim:schemas:core:2.0:Group\\"\\r\\n            ],\\r\\n            \\"id\\": \\"0240932e-43d4-4b28-a1dc-d7927c54e407\\",\\r\\n            \\"displayName\\": \\"Green Thumb Guild\\",\\r\\n            \\"members\\": [\\r\\n                {\\r\\n                    \\"value\\": \\"1fb366bb-975d-4422-b2f7-47f8b5ce77b1\\",\\r\\n                    \\"$ref\\": \\"https://www.notion.so/scim/v2/Users/1fb366bb-975d-4422-b2f7-47f8b5ce77b1\\",\\r\\n                    \\"type\\": \\"User\\"\\r\\n                }\\r\\n            ],\\r\\n            \\"meta\\": {\\r\\n                \\"resourceType\\": \\"Group\\",\\r\\n                \\"created\\": \\"1713796922658\\",\\r\\n                \\"lastModified\\": \\"1713806733100\\",\\r\\n                \\"location\\": \\"https://www.notion.so/scim/v2/Groups/0240932e-43d4-4b28-a1dc-d7927c54e407\\"\\r\\n            }\\r\\n        },\\r\\n        {\\r\\n            \\"schemas\\": [\\r\\n                \\"urn:ietf:params:scim:schemas:core:2.0:Group\\"\\r\\n            ],\\r\\n            \\"id\\": \\"26bfd16e-1b4a-48a7-8138-88950b41e6d7\\",\\r\\n            \\"displayName\\": \\"Tech Trailblazers\\",\\r\\n            \\"members\\": [],\\r\\n            \\"meta\\": {\\r\\n                \\"resourceType\\": \\"Group\\",\\r\\n                \\"created\\": \\"1713796922658\\",\\r\\n                \\"lastModified\\": \\"1713806733100\\",\\r\\n                \\"location\\": \\"https://www.notion.so/scim/v2/Groups/26bfd16e-1b4a-48a7-8138-88950b41e6d7\\"\\r\\n            }\\r\\n        }\\r\\n    ],\\r\\n    \\"startIndex\\": 1,\\r\\n    \\"itemsPerPage\\": 2\\r\\n}\\r\\n```\\r\\n---\\r\\n## References\\r\\n- [Build your first integration](https://developers.notion.com/docs/create-a-notion-integration)\\r\\n- [API Reference](https://developers.notion.com/reference/intro)\\r\\n- [Pagination](https://developers.notion.com/reference/intro#pagination)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL052</span>"},{"id":"capsulecrm","metadata":{"permalink":"/RSA/blog/capsulecrm","source":"@site/blog/collections/capsulecrm/capsulecrm.mdx","title":"Capsule CRM","description":"Capsule CRM is a user-friendly customer relationship management system designed","date":"2023-12-29T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Capsule","permalink":"/RSA/blog/tags/capsule"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"}],"readingTime":24.2,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"capsulecrm","title":"Capsule CRM","date":"2023-12-29T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Capsule","CRM"],"keywords":["Collections","REST","SaaS","Capsule","CRM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Notion","permalink":"/RSA/blog/notion"},"nextItem":{"title":"Close CRM","permalink":"/RSA/blog/closecrm"}},"content":"import logoPNG from \\"@site/static/img/logos/Capsule CRM - 180x180.png\\";\\r\\nimport LinkSvg from \\"../../iconmonstr-link-thin.svg\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\">\\r\\n      <img src={logoPNG} width=\\"180\\" height=\\"180\\" />\\r\\n      Capsule CRM is a user-friendly customer relationship management system designed\\r\\n      for small businesses. It streamlines contact management, tracks interactions,\\r\\n      and centralizes communication, fostering efficient collaboration. With a clean\\r\\n      interface and customizable features, Capsule CRM helps businesses stay organized\\r\\n      and build stronger relationships with their clients.<br /><br />Versions: `8.0.0`<br />\\r\\n      <br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c |\\r\\n      Entitlements \u274c\\r\\n    </td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\nThis section explains the process for configuring an account collector for the Capsule CRM application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Capsule CRM**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. This article will use **Token** based authentication to invoke REST APIs.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Capsule CRM<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/api/v2/parties`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>AccountId</td>\\r\\n       <td>`$.parties.*.emailAddresses.*.address`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.parties.*.owner.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>UserName</td>\\r\\n       <td>`$.parties.*.owner.username`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>IsDeleted</td>\\r\\n       <td>`$.parties.*.owner.deleted`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/api/v2/teams`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>GroupId</td>\\r\\n       <td>`$.teams.*.name`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.teams.*.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Description</td>\\r\\n       <td>`$.teams.*.description`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`/api/v2/teams`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>embed</td>\\r\\n       <td>`memberships`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Account Identifier</td>\\r\\n       <td>`$.teams.*.memberships.*.user.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Group Identifier</td>\\r\\n       <td>`$.teams.*.id`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)<br />\\r\\n    :bulb: **Info:** This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n\\r\\nThis section explains the process of setting up token access in Capsule CRM for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Capsule CRM console https://instance.capsulecrm.com/.\\r\\n2. On the right hand top corner, click on profile and select **My Preferences**.<br /><br />![Alt text](img/app-1.png)\\r\\n3. Click on **API Authentication Tokens**.<br /><br />![Alt text](img/app-2.png)\\r\\n4. Click on **Generate First API Token** or **Generate New API Token** option.\\r\\n5. Provide a suitable description and select the **_Read information from your Capsule account_** scope for the token. Click **Generate Token**.<br /><br />![Alt text](img/app-3.png)\\r\\n6. Note the token value for use in collector configurations.<br /><br />![Alt text](img/app-4.png)\\r\\n---\\r\\n## References\\r\\n- [Capsule API Documentation](https://developer.capsulecrm.com/)\\r\\n- [Authentication](https://developer.capsulecrm.com/v2/overview/authentication)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL051</span>"},{"id":"closecrm","metadata":{"permalink":"/RSA/blog/closecrm","source":"@site/blog/collections/closecrm/closecrm.mdx","title":"Close CRM","description":"Close CRM streamlines sales with a user-friendly platform, integrating communication, leads, and tasks. Its robust features enhance collaboration, automate workflows, and drive sales efficiency. With a focus on simplicity and powerful functionality, Close CRM empowers teams to close deals faster and build stronger customer relationships.Versions: 8.0.0Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-12-23T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Close","permalink":"/RSA/blog/tags/close"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"}],"readingTime":21.966666666666665,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"closecrm","title":"Close CRM","date":"2023-12-23T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Close","CRM"],"keywords":["Collections","REST","SaaS","Close","CRM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Capsule CRM","permalink":"/RSA/blog/capsulecrm"},"nextItem":{"title":"Accelo","permalink":"/RSA/blog/accelo"}},"content":"import logoPNG from \'@site/static/img/logos/Close CRM - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Close CRM streamlines sales with a user-friendly platform, integrating communication, leads, and tasks. Its robust features enhance collaboration, automate workflows, and drive sales efficiency. With a focus on simplicity and powerful functionality, Close CRM empowers teams to close deals faster and build stronger customer relationships.<br /><br />Versions: `8.0.0`<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Close CRM application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Close CRM**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. Since we are using Token Access method for authentication, the collector will use Basic authentication type.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Close CRM<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/user/`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>_fields</td>\\r\\n    <td>`id,email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.data.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/9.png)<br />\\r\\n<Admonition type=\\"note\\">\\r\\nThis API does not support pagination\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/group/`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.data.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/group/${Id}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>_fields</td>\\r\\n    <td>`id,members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.members.*.user_id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)<br />\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Close CRM for integrating with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Close CRM dashboard and navigate to settings https://app.close.com/settings/\\r\\n2. Under **Connect**, click on **Developer**.\\r\\n3. Click on **+ NewAPI Key**.<br /><br />![Alt text](img/app1.png)\\r\\n4. Provide a suitable name for the key and click **Create API Key**. <br /><br />![Alt text](img/app2.png).\\r\\n5. Copy and save the API for use with the collectors.<br /><br />![Alt text](img/app3.png)\\r\\n---\\r\\n## References\\r\\n- [Close API Documentation](https://developer.close.com/)\\r\\n- [OAuth](https://help.close.com/docs/create-oauth-apps)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL050</span>"},{"id":"accelo","metadata":{"permalink":"/RSA/blog/accelo","source":"@site/blog/collections/accelo/accelo.mdx","title":"Accelo","description":"Accelo is a cloud-based platform that streamlines business operations through automation and collaboration. It integrates project management, CRM, and service tracking to enhance workflow efficiency. With features like time tracking and invoicing, Accelo aims to optimize project delivery and client engagement for professional service businesses.Versions: 8.0.0 P1Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-12-09T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Accelo","permalink":"/RSA/blog/tags/accelo"},{"inline":true,"label":"Productivity","permalink":"/RSA/blog/tags/productivity"}],"readingTime":23.5,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"accelo","title":"Accelo","date":"2023-12-09T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Accelo","Productivity"],"keywords":["Collections","REST","SaaS","Accelo","Productivity"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Close CRM","permalink":"/RSA/blog/closecrm"},"nextItem":{"title":"ClayHR","permalink":"/RSA/blog/clayhr"}},"content":"import logoPNG from \'@site/static/img/logos/Accelo - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Accelo is a cloud-based platform that streamlines business operations through automation and collaboration. It integrates project management, CRM, and service tracking to enhance workflow efficiency. With features like time tracking and invoicing, Accelo aims to optimize project delivery and client engagement for professional service businesses.<br /><br />Versions: `8.0.0 P1`<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Accelo application. We will use the RSA G&L Generic REST collector for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Accelo**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. This article will use **Token** based authentication to invoke REST APIs.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Accelo<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v0/staff`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>_fields</td>\\r\\n    <td>`id,email,username,standing`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.response.*.username`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.response.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.response.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.response.*.standing`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v0/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>_fields</td>\\r\\n    <td>`title,id,standing`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.response.*.title`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.response.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.response.*.standing`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v0/staff/memberships`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>_fields</td>\\r\\n    <td>`group_id,staff_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.response.*.staff_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.response.*.group_id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)<br />\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up token access in Accelo for integration with G&L. \\r\\n\\r\\n**Steps**\\r\\n1. Login to Accelo console https://instance.accelo.com/.\\r\\n2. On the left hand bottom corner, click on **Settings**.\\r\\n3. Under **Administration** panel, click on **API**.\\r\\n4. Click on **Register Application** and provide the details as shown. <br /><br />![Alt text](img/auth-1.png)\\r\\n5. Click **Save**. Under **API Applications**, click on **Generate Token**.<br /><br />![Alt text](img/auth-2.png)\\r\\n6. Provide necessary permissions which in our case is ***read(all)*** and click **Generate Token**.<br /><br />![Alt text](img/auth-3.png)\\r\\n7. Note the token value for use in collector configurations.<br />![Alt text](img/auth-4.png)\\r\\n---\\r\\n## References\\r\\n- [API Documentation](https://api.accelo.com/docs/?http#introduction)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL049</span>"},{"id":"clayhr","metadata":{"permalink":"/RSA/blog/clayhr","source":"@site/blog/collections/clayhr/clayhr.mdx","title":"ClayHR","description":"ClayHR (BizMerlinHR) is a comprehensive human resources management system (HRMS) designed to streamline HR processes. It offers features such as employee data management, attendance tracking, payroll, and performance evaluation. With user-friendly interfaces and robust functionality, ClayHR facilitates efficient HR operations, fostering organizational effectiveness and employee engagement.Versions: 8.0.0 P1Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-12-02T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"ClayHR","permalink":"/RSA/blog/tags/clay-hr"},{"inline":true,"label":"BizMerlinHR","permalink":"/RSA/blog/tags/biz-merlin-hr"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"},{"inline":true,"label":"Identities","permalink":"/RSA/blog/tags/identities"}],"readingTime":14.266666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"clayhr","title":"ClayHR","date":"2023-12-02T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","ClayHR","BizMerlinHR","HCM","Identities"],"keywords":["Collections","REST","SaaS","ClayHR","BizMerlinHR","HCM","Identities"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Accelo","permalink":"/RSA/blog/accelo"},"nextItem":{"title":"BambooHR","permalink":"/RSA/blog/bamboohr"}},"content":"import logoPNG from \'@site/static/img/logos/ClayHR - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>ClayHR (BizMerlinHR) is a comprehensive human resources management system (HRMS) designed to streamline HR processes. It offers features such as employee data management, attendance tracking, payroll, and performance evaluation. With user-friendly interfaces and robust functionality, ClayHR facilitates efficient HR operations, fostering organizational effectiveness and employee engagement.<br /><br />Versions: `8.0.0 P1`<br /><br />Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\nThis section explains the process for configuring an identity collector for the ClayHR application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **ClayHR**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. On the **User Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>/rm/api/users/</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>x-api-key</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>userId</td>\\r\\n    <td>`User ID corresponding to the API Key`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserId</td>\\r\\n    <td>`$.*.userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>EmployeeID</td>\\r\\n    <td>`$.*.empId`</td>\\r\\n  </tr> \\r\\n  <tr>\\r\\n    <td>FirstName</td>\\r\\n    <td>`$.*.firstName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastName</td>\\r\\n    <td>`$.*.lastName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>HireDate</td>\\r\\n    <td>`$.*.userStartDate`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.*.status`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Phone</td>\\r\\n    <td>`$.*.phone`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SupervisorUserId</td>\\r\\n    <td>`$.*.supervisorModelList.*.userId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n7. Click **Next**. On the **Map Collector Attributes to User Attributes** page, enter the following configurations.<br /><br />![Alt text](img/8.png)\\r\\n8. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up credentials for API access in ClayHR.\\r\\n\\r\\n**Steps**\\r\\n1. Login to ClayHR instance https://instance.bizmerlin.net/rm/home\\r\\n2. On the right hand corner, click on the user profile and select **My Integrations**.<br /><br />![Alt text](img/9.png)\\r\\n3. Under **My Integrations**, click on **Manage API Keys**.\\r\\n4. Click on **Generate API Key**.\\r\\n5. Provide a suitable name and expiration period for the key.<br /><br />![Alt text](img/10.png)\\r\\n\\r\\n## References\\r\\n- [API Documentation](https://clayhr.readme.io/reference/get-customer-configurations-from-public-customer-model)\\r\\n- [How to use ClayHR API Documentation](https://www.clayhr.com/articles/how-to-use-clayhr-api-documentation)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL048</span>"},{"id":"bamboohr","metadata":{"permalink":"/RSA/blog/bamboohr","source":"@site/blog/collections/bamboohr/bamboohr.mdx","title":"BambooHR","description":"BambooHR is a cloud-based human resources software that streamlines employee management. It offers features for HR processes, including employee data management, time-off tracking, and performance management. With user-friendly interfaces, it simplifies HR tasks, enhances employee engagement, and provides insights to drive better decision-making for organizations of all sizes.Versions: 8.0.0 P1Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-11-25T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"BambooHR","permalink":"/RSA/blog/tags/bamboo-hr"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"},{"inline":true,"label":"Payroll","permalink":"/RSA/blog/tags/payroll"}],"readingTime":18.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"bamboohr","title":"BambooHR","date":"2023-11-25T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","BambooHR","HCM","Payroll"],"keywords":["Collections","REST","SaaS","BambooHR","HCM","Payroll"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"ClayHR","permalink":"/RSA/blog/clayhr"},"nextItem":{"title":"Oracle Fusion Cloud","permalink":"/RSA/blog/oracle-fusion"}},"content":"import logoPNG from \'@site/static/img/logos/BambooHR - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>BambooHR is a cloud-based human resources software that streamlines employee management. It offers features for HR processes, including employee data management, time-off tracking, and performance management. With user-friendly interfaces, it simplifies HR tasks, enhances employee engagement, and provides insights to drive better decision-making for organizations of all sizes.<br /><br />Versions: `8.0.0 P1`<br /><br />Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\nThis section explains the process for configuring an identity collector for the BambooHR application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **BambooHR**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. BambooHR requires API key to be sent over using Basic authentication method. For more information refer to [Authentication](https://documentation.bamboohr.com/docs/getting-started) section.<br /><br />![img](img/3.png). \\r\\n6. Click **Next**. On the **User Data** page, enter the following configurations.<br /><br />![Alt text](img/4.png)<br />![Alt text](img/5.png)<br />\\r\\n\\r\\n<Admonition type=\\"note\\">\\r\\nBambooHR APIs do not support pagination.\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>/v1/reports/custom</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>format</td>\\r\\n    <td>`JSON`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>onlyCurrent</td>\\r\\n    <td>`false`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">\\r\\n```json\\r\\n{\\r\\n    \\"fields\\": [\\r\\n        \\"firstName\\", \\"lastName\\", \\"middleName\\", \\"employeeNumber\\", \\"hireDate\\", \\r\\n        \\"terminationDate\\", \\"jobTitle\\", \\"department\\", \\"division\\", \\"status\\", \\r\\n        \\"address1\\", \\"address2\\", \\"city\\", \\"state\\", \\"zipcode\\", \\r\\n        \\"country\\", \\"location\\", \\"workEmail\\", \\"workPhone\\", \\"workPhoneExtension\\", \\r\\n        \\"mobilePhone\\", \\"preferredName\\", \\"supervisor\\", \\"supervisorId\\"\\r\\n    ]\\r\\n}\\r\\n```\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserId</td>\\r\\n    <td>`$.employees.*.employeeNumber`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>FirstName</td>\\r\\n    <td>`$.employees.*.firstName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastName</td>\\r\\n    <td>`$.employees.*.lastName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>MiddleName</td>\\r\\n    <td>`$.employees.*.middleName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>HireDate</td>\\r\\n    <td>`$.employees.*.hireDate`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>TerminationDate</td>\\r\\n    <td>`$.employees.*.terminationDate`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>JobTitle</td>\\r\\n    <td>`$.employees.*.jobTitle`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Department</td>\\r\\n    <td>`$.employees.*.division`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.employees.*.status`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Address1</td>\\r\\n    <td>`$.employees.*.address1`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Address2</td>\\r\\n    <td>`$.employees.*.address2`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>City</td>\\r\\n    <td>`$.employees.*.city`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>State</td>\\r\\n    <td>`$.employees.*.state`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Zipcode</td>\\r\\n    <td>`$.employees.*.zipcode`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Country</td>\\r\\n    <td>`$.employees.*.country`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>WorkEmail</td>\\r\\n    <td>`$.employees.*.workEmail`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>WorkPhone</td>\\r\\n    <td>`$.employees.*.workPhone`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>MobilePhone</td>\\r\\n    <td>`$.employees.*.mobilePhone`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>PreferredName</td>\\r\\n    <td>`$.employees.*.preferredName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SupervisorId</td>\\r\\n    <td>`$.employees.*.supervisorId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<Admonition type=\\"info\\">\\r\\nRefer to [Field Names](https://documentation.bamboohr.com/docs/list-of-field-names) for comprehensive list of employee fields.\\r\\n</Admonition>\\r\\n7. Click **Next**. On the **Map Collector Attributes to User Attributes** page, enter the following configurations.<br /><br />![Alt text](img/6.png)\\r\\n8. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in BambooHR for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to BambooHR dashboard https://instance.bamboohr.com/home\\r\\n2. Click on the profile on the right corner and select **API Keys**.<br /><br />![Alt text](img/token-1.png)\\r\\n3. Click on **Add New Key**<br /><br />![Alt text](img/token-2.png)\\r\\n4. Provide a suitable name for the key and click **Generate Key**<br /><br />![Alt text](img/token-3.png)\\r\\n5. Copy the token for use with G&L.<br /><br />![Alt text](img/token-4.png)\\r\\n6. Click **Done**.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL047</span>"},{"id":"oracle-fusion","metadata":{"permalink":"/RSA/blog/oracle-fusion","source":"@site/blog/collections/oracle-fusion/oracle-fusion.mdx","title":"Oracle Fusion Cloud","description":"Oracle Fusion Cloud is a comprehensive cloud-based enterprise software suite that integrates applications for finance, HR, supply chain, and more. It streamlines business processes, enhances data analytics, and offers scalability and security. With its user-friendly interface and robust features, it empowers organizations to adapt, innovate, and drive growth in a dynamic digital landscape.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-11-18T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Oracle","permalink":"/RSA/blog/tags/oracle"},{"inline":true,"label":"Fusion","permalink":"/RSA/blog/tags/fusion"}],"readingTime":23.7,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"oracle-fusion","title":"Oracle Fusion Cloud","date":"2023-11-18T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Oracle","Fusion"],"keywords":["Collections","REST","SaaS","Oracle","Fusion"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"BambooHR","permalink":"/RSA/blog/bamboohr"},"nextItem":{"title":"Litmos","permalink":"/RSA/blog/litmos"}},"content":"import logoPNG from \'@site/static/img/logos/Oracle Fusion - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Oracle Fusion Cloud is a comprehensive cloud-based enterprise software suite that integrates applications for finance, HR, supply chain, and more. It streamlines business processes, enhances data analytics, and offers scalability and security. With its user-friendly interface and robust features, it empowers organizations to adapt, innovate, and drive growth in a dynamic digital landscape.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Oracle Fusion Cloud application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Oracle Fusion Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Oracle Fusion Cloud<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/hcmRestApi/scim/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`username,id,displayName,`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Resources[*].userName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DisplayName</td>\\r\\n    <td>`$.Resources[*].displayName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Emails</td>\\r\\n    <td>`$..emails[*].value`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/8.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/9.png)\\r\\n12. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/10.png)\\r\\n13. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect site roles and assignments from the Oracle Fusion Cloud application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Oracle Fusion Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/11.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). \\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Oracle Fusion Cloud.<br /><br />![Alt text](img/12.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/13.png)<br />![Alt text](img/6.png)<br />![Alt text](img/14.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,name,displayName,description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.Resources.[*].displayName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.Resources[*].description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/6.png)<br />![Alt text](img/16.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/hcmRestApi/scim/Roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`members.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.members.*.value`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/17.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/18.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n\ud83d\udcd3 **References**\\r\\n- [REST API for Common Features in Oracle Fusion Cloud Applications](https://docs.oracle.com/en/cloud/saas/applications-common/23b/farca/api-users.html)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL046</span>"},{"id":"litmos","metadata":{"permalink":"/RSA/blog/litmos","source":"@site/blog/collections/litmos/litmos.mdx","title":"Litmos","description":"Litmos is a modern learning management system that empowers organizations to efficiently deliver and manage training programs. With user-friendly interfaces and advanced features, it offers flexible online training, automated workflows, and real-time reporting. Litmos enables businesses to enhance employee skills, streamline learning processes, and achieve their training goals effectively.Versions: 8.0.0 P1Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-11-11T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Litmos","permalink":"/RSA/blog/tags/litmos"},{"inline":true,"label":"Learning Management","permalink":"/RSA/blog/tags/learning-management"}],"readingTime":22.9,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"litmos","title":"Litmos","date":"2023-11-11T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Litmos","Learning Management"],"keywords":["Collections","REST","SaaS","Litmos","Learning Management"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Oracle Fusion Cloud","permalink":"/RSA/blog/oracle-fusion"},"nextItem":{"title":"Aha!","permalink":"/RSA/blog/aha"}},"content":"import logoPNG from \'@site/static/img/logos/Litmos - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Litmos is a modern learning management system that empowers organizations to efficiently deliver and manage training programs. With user-friendly interfaces and advanced features, it offers flexible online training, automated workflows, and real-time reporting. Litmos enables businesses to enhance employee skills, streamline learning processes, and achieve their training goals effectively.<br /><br />Versions: `8.0.0 P1`<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** represent individuals who participate in the training programs. They can be learners, administrators, instructors, or managers.\\r\\n\\r\\n**Teams** are collections of users who work together or share specific training requirements. They are useful for managing training within departments or functional groups.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Litmos application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Litmos**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Litmos<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users/paginated`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>source</td>\\r\\n    <td>`RSA`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Items.*.UserName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Items.*.Id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.Items.*.Email`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/teams`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>source</td>\\r\\n    <td>`RSA`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.Name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.Id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/teams/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>source</td>\\r\\n    <td>`RSA`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.Id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Litmos for integration with G&L. Litmos API calls requires API key invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Litmos admin console https://instance.litmos.com/admin/dashboard.\\r\\n2. Navigate to **Account > Litmos**.<br />![Alt text](img/17.png)\\r\\n3. Click on **API**. If this is **Disabled**, enable it before proceeding.<br /><br />![Alt text](img/18.png)\\r\\n4. Click on **Get API Key**.<br /><br />![Alt text](img/19.png)\\r\\n5. Scroll till you see API Key. Copy and retain this for REST API invocation.<br /><br />![Alt text](img/20.png)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL045</span>\\r\\n \\r\\n[^API]: <LinkSvg /><a href=\\"https://www.litmos.com/docs/litmos/apis\\" target=\\"_blank\\">Litmos API</a>"},{"id":"aha","metadata":{"permalink":"/RSA/blog/aha","source":"@site/blog/collections/aha/aha.mdx","title":"Aha!","description":"Aha! is a product roadmap software that helps teams and companies set product strategy, prioritize features, and manage development projects. It enables collaborative planning and communication, allowing teams to align their efforts and track progress toward goals. Aha! streamlines the process of bringing products to market by providing a centralized platform for ideation, planning, and execution, enhancing overall productivity and innovation.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-11-04T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Aha!","permalink":"/RSA/blog/tags/aha"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":38.2,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"aha","title":"Aha!","date":"2023-11-04T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Aha!","Ticketing"],"keywords":["Collections","REST","SaaS","Aha!","Ticketing"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Litmos","permalink":"/RSA/blog/litmos"},"nextItem":{"title":"Genesys Cloud","permalink":"/RSA/blog/genesys"}},"content":"import logoPNG from \'@site/static/img/logos/Aha - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Aha! is a product roadmap software that helps teams and companies set product strategy, prioritize features, and manage development projects. It enables collaborative planning and communication, allowing teams to align their efforts and track progress toward goals. Aha! streamlines the process of bringing products to market by providing a centralized platform for ideation, planning, and execution, enhancing overall productivity and innovation.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** in Aha! represent individuals who are part of your organization and interact with the platform. Each user has their own role and permissions, which determine their level of access and the actions they can perform within Aha!. Users can be product managers, designers, developers, stakeholders, and more.\\r\\n\\r\\n**Products** in Aha! represent the offerings that your company is developing and managing. A product can be a software application, a physical product, a service, or any other offering. Products are the core entities around which you plan, track features, set strategies, and manage roadmaps.\\r\\n\\r\\n**Teams** in Aha! refer to groups of users who collaborate on specific products or projects. Teams are designed to facilitate efficient cross-functional work and alignment. A team might consist of product managers, developers, designers, marketers, and other roles relevant to the product\'s development and success.\\r\\n\\r\\nThe relationship between these elements can be summarized as follows:\\r\\n\\r\\n:black_circle: **Users and Products**: Users are associated with specific products within Aha!. This association allows users to contribute to the planning, development, and management of a particular product. Users can view, edit, and comment on features, epics, releases, and other components related to the product they are assigned to.\\r\\n\\r\\n:black_circle: **Teams and Products**: Teams are often linked to specific products as well. This association defines the group of users who collaborate on that product\'s roadmap, features, and development. Teams can be organized around functional areas, such as engineering, design, marketing, and more.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Aha! application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Aha!**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. This article will use **API key based authentication** to invoke REST APIs. Refer to [OAuth2 Configuration](#oauth2) section to use the OAuth based authentication.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Aha!<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>fields</td>\\r\\n    <td>`id,email,enabled`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsEnabled</td>\\r\\n    <td>`$.users.*.enabled`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/products`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.products.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.products.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsProductLine</td>\\r\\n    <td>`$.products.*.product_line`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.products.*.workspace_type`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/products/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>fields</td>\\r\\n    <td>`id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.project_users.*.user.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Aha! for integration with G&L. Aha! API calls require application key and API key for most invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Aha! console https://instance.aha.io.\\r\\n2. Navigate to **Settings > Personal > Developer**.\\r\\n3. Click on the **OAuth applications** tab.\\r\\n4. Click **egister OAuth application**.\\r\\n    - **Name** your new application.\\r\\n    - Provide a Redirect URI in the following format https://instance/aveksa/oauth/callback where instance is the DNS for your G&L instance.\\r\\n5. Click **Create** to register your OAuth application.\\r\\n6. Note the **Client ID** and **Client Secret** fields for use in the next step.\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC to acquire the OAuth2 token dynamically from Aha!.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>CLIENT_ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>CLIENT_SECRET</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://instance.aha.io/oauth/authorize`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://instance.aha.io/oauth/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td></td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/17.png)\\r\\n6. Login to DocuSign account.<br /><br />![Alt text](img/18.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/19.png)\\r\\n<Admonition type=\\"caution\\">\\r\\nThe message indicates that Aha! did not return a refresh token, which is required to ensure a new authorization token is automatically acquired by G&L when the current token expires. This would mean the collector needs to be authorized every time it runs (unless the token is valid).\\r\\n</Admonition>\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL044</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://www.aha.io/api\\" target=\\"_blank\\">Aha! REST API</a>"},{"id":"genesys","metadata":{"permalink":"/RSA/blog/genesys","source":"@site/blog/collections/genesys/genesys.mdx","title":"Genesys Cloud","description":"Genesys Cloud, formerly known as \\"Interactive Intelligence PureCloud,\\" is a robust cloud-based customer experience platform. It offers a wide range of features, including seamless communication, AI-driven insights, and scalable contact center solutions. With its omnichannel support, automation capabilities, and comprehensive analytics, Genesys Cloud enhances customer interactions, streamlines operations, and improves overall customer satisfaction.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-28T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Genesys","permalink":"/RSA/blog/tags/genesys"},{"inline":true,"label":"Cloud","permalink":"/RSA/blog/tags/cloud"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"}],"readingTime":38.56666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"genesys","title":"Genesys Cloud","date":"2023-10-28T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Genesys","Cloud","CRM"],"keywords":["Collections","REST","SaaS","Genesys","Cloud","CRM"]},"unlisted":false,"lastUpdatedAt":1716493924000,"prevItem":{"title":"Aha!","permalink":"/RSA/blog/aha"},"nextItem":{"title":"Sentry","permalink":"/RSA/blog/sentry"}},"content":"import logoPNG from \'@site/static/img/logos/Genesys - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Genesys Cloud, formerly known as \\"Interactive Intelligence PureCloud,\\" is a robust cloud-based customer experience platform. It offers a wide range of features, including seamless communication, AI-driven insights, and scalable contact center solutions. With its omnichannel support, automation capabilities, and comprehensive analytics, Genesys Cloud enhances customer interactions, streamlines operations, and improves overall customer satisfaction.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Genesys Cloud application. We will use the RSA G&L Generic REST collector [^API] for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Genesys Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)<br /><br />Refer to [Token Authentication](#token) for more information on authentication configuration.<br /><br />\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Genesys Cloud<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.entities.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.entities.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.entities.*.state`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserName</td>\\r\\n    <td>`$.entities.*.username`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.entities.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.entities.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Owner</td>\\r\\n    <td>`$.entities.*.owners[0].id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups/${Id}/members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.entities.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Next**. In the **Group Owner Resolution Rules**, map the owner to user.<br /><br />![Alt text](img/17.png)\\r\\n16. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect roles and assignments from the Genesys Cloud application. We will use the RSA G&L Generic REST collector [^API]  for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Genesys Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/18.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Genesys Cloud.<br /><br />![Alt text](img/19.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/20.png)<br />![Alt text](img/6.png)<br />![Alt text](img/21.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/authorization/roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.entities.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.entities.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.entities.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/22.png)<br />![Alt text](img/6.png)<br />![Alt text](img/23.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/authorization/roles/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.entities.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/24.png)\\r\\n12. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/25.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Genesys Cloud for integration with G&L. Genesys Cloud API calls require application key and API key for most invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Genesys Cloud console https://apps.mypurecloud.com/ and go to settings.\\r\\n2. Under **Access**, click on **Application Keys**.\\r\\n3. Click on **New Key**.\\r\\n4. Provide a suitable name and click **Create Key**.<br /><br />![Alt text](img/26.png)\\r\\n5. Copy the key value. We will refer to this as **APPLICATION_KEY**<br /><br />![Alt text](img/27.png)\\r\\n6. Click on **Edit** next to **Scope**. Select the scopes as shown below.<br /><br />![Alt text](img/28.png)\\r\\n7. Click **Save** and then click **Finish**.\\r\\n8. Under **Access**, click on **API Keys**.\\r\\n9. Click on **New Key**.<br /><br />![Alt text](img/29.png)\\r\\n10. Copy the key value and click **Finish**.<br /><br />![Alt text](img/30.png)\\r\\n---\\r\\n## Authentication \\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/31.png)<br />![Alt text](img/32.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://login.mypurecloud.com/oauth/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>Client ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>Client Secret</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/x-www-form-urlencoded`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">grant_type=client_credentials&client_id=$&#123;TokenUsername}&client_secret=$&#123;TokenPassword}</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$.access_token`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test. \\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL043</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developer.genesys.cloud/\\" target=\\"_blank\\">Developer Center</a>"},{"id":"sentry","metadata":{"permalink":"/RSA/blog/sentry","source":"@site/blog/collections/sentry/sentry.mdx","title":"Sentry","description":"Sentry IO is a robust error tracking and monitoring platform for developers. It helps identify, prioritize, and resolve issues in software applications by capturing real-time error data, providing detailed insights into their causes, and enabling efficient collaboration among development teams. With its user-friendly interface and integrations, Sentry IO enhances software quality and user experience by facilitating proactive error management.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-21T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Sentry","permalink":"/RSA/blog/tags/sentry"},{"inline":true,"label":"Monitoring","permalink":"/RSA/blog/tags/monitoring"}],"readingTime":55.06666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"sentry","title":"Sentry","date":"2023-10-21T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Sentry","Monitoring"],"keywords":["Collections","REST","SaaS","Sentry","Monitoring"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Genesys Cloud","permalink":"/RSA/blog/genesys"},"nextItem":{"title":"Microsoft Entra ID (Azure AD)","permalink":"/RSA/blog/azuread"}},"content":"import logoPNG from \'@site/static/img/logos/Sentry - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Sentry IO is a robust error tracking and monitoring platform for developers. It helps identify, prioritize, and resolve issues in software applications by capturing real-time error data, providing detailed insights into their causes, and enabling efficient collaboration among development teams. With its user-friendly interface and integrations, Sentry IO enhances software quality and user experience by facilitating proactive error management.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** are individuals who have access to the Sentry platform. Each user has a unique account and can be assigned specific roles and permissions that determine their level of access and actions they can perform within the organization. Users can be developers, administrators, or other team members involved in monitoring and resolving issues.\\r\\n\\r\\n**Teams** are groups of users who collaborate on specific projects and share responsibilities. A team typically represents a functional unit within the organization, such as a development team, operations team, or customer support team. Teams help manage access control, streamline communication, and group users with similar responsibilities together.\\r\\n\\r\\n**Projects** are individual software applications, services, or components that you want to monitor and track for errors and issues. Each project represents a unique codebase or software entity. Errors and events related to a project are collected, analyzed, and presented within the context of that project. Projects can belong to one or more teams, depending on the organizational structure.\\r\\n\\r\\nRelationships between these components:\\r\\n\\r\\n- **Users and Teams**: Users belong to one or more teams. This association helps define which projects a user can access and what actions they can perform within those projects. Teams provide a way to manage user access and collaboration efficiently.\\r\\n\\r\\n-  **Teams and Projects**: Teams can be assigned to one or more projects. This allows multiple teams to work on different aspects of a project or collaborate on multiple projects simultaneously. Teams define who has access to specific projects and contribute to error tracking and resolution efforts.\\r\\n\\r\\n- **Users and Projects**: Users who belong to teams associated with a project can access and work on that project. They can view error reports, manage issues, and collaborate with other team members to address software problems.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Sentry application. We will use the RSA G&L Generic REST collector [^API] for this purpose.\\r\\n<Admonition type=\\"caution\\">\\r\\nG&L does not support the cursor based pagination model used by Sentry. For more information, refer to [Paginating Results](https://docs.sentry.io/api/pagination/)\\r\\n</Admonition>\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sentry**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sentry<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/organizations/ORG_SLUG/members/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.*.user.isActive`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>lastLogin</td>\\r\\n    <td>`$.*.user.lastLogin`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/organizations/ORG_SLUG/teams/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.slug`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/teams/ORG_SLUG/${GroupId}/members/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\n### Roles\\r\\nThis section explains the process for configuring an entitlement collector to collect roles and assignments to users from Sentry application. We will use the RSA G&L Generic REST collector [^API]  for this purpose.\\r\\n<Admonition type=\\"caution\\">\\r\\nG&L does not support the cursor based pagination model used by Sentry. For more information, refer to [Paginating Results](https://docs.sentry.io/api/pagination/)\\r\\n</Admonition>\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sentry**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sentry.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/organizations/ORG_SLUG/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.orgRoleList.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.orgRoleList.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.orgRoleList.*.desc`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/organizations/ORG_SLUG/members/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.teams.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.teams.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n12. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n### Projects\\r\\nThis section explains the process for configuring an entitlement collector to collect projects as roles and its assignments to teams from the Sentry application. We will use the RSA G&L Generic REST collector [^API] for this purpose.\\r\\n<Admonition type=\\"caution\\">\\r\\nG&L does not support the cursor based pagination model used by Sentry. For more information, refer to [Paginating Results](https://docs.sentry.io/api/pagination/)\\r\\n</Admonition>\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sentry**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/25.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sentry.<br /><br />![Alt text](img/26.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/27.png)<br />![Alt text](img/28.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/projects/`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.*.slug`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.platform`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Group Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/29.png)<br />![Alt text](img/30.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/projects/ORG_SLUG/${ApplicationRoleId}/` (Replace ORG_SLUG with your organization SLUG)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.teams.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/31.png)\\r\\n12. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/32.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Sentry for integration with G&L. Sentry API calls require application key and API key for most invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Sentry console, https://organization_slug.sentry.io/.\\r\\n2. Go to Settings and then select **Custom Integrations** under **Developer Settings**.<br /><br />![Alt text](img/33.png)\\r\\n3. Click on **Create New Integration**. Select **Internal Integration** as the type and click **Next**.<br /><br />![Alt text](img/34.png)\\r\\n4. Provide a suitable name and permissions as shown below. Click **Save Changes**.<br /><br />![Alt text](img/35.png)\\r\\n5. Copy the token value.<br /><br />![Alt text](img/36.png)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL042</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://docs.sentry.io/api/\\" target=\\"_blank\\">Sentry Web API </a>"},{"id":"azuread","metadata":{"permalink":"/RSA/blog/azuread","source":"@site/blog/collections/azuread/azuread.mdx","title":"Microsoft Entra ID (Azure AD)","description":"Microsoft Entra ID (Azure AD) is Microsoft\'s cloud-based identity and access","date":"2023-10-15T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Microsoft","permalink":"/RSA/blog/tags/microsoft"},{"inline":true,"label":"Azure","permalink":"/RSA/blog/tags/azure"},{"inline":true,"label":"Entra","permalink":"/RSA/blog/tags/entra"}],"readingTime":78.43333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"azuread","title":"Microsoft Entra ID (Azure AD)","date":"2023-10-15T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Microsoft","Azure","Entra"],"keywords":["Collections","REST","SaaS","Microsoft","Azure","Entra"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Sentry","permalink":"/RSA/blog/sentry"},"nextItem":{"title":"Sumo Logic","permalink":"/RSA/blog/sumologic"}},"content":"import logoPNG from \\"@site/static/img/logos/Entra ID - 180x180.jpg\\";\\r\\nimport LinkSvg from \\"../../iconmonstr-link-thin.svg\\";\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\">\\r\\n      <img src={logoPNG} width=\\"180\\" height=\\"180\\" />\\r\\n      Microsoft Entra ID (Azure AD) is Microsoft\'s cloud-based identity and access\\r\\n      management service. It provides secure authentication, single sign-on, and\\r\\n      identity protection for applications, devices, and users across the cloud and\\r\\n      on-premises environments. Entra ID enhances security and productivity through\\r\\n      centralized management, seamless collaboration, and adaptive access controls,\\r\\n      making it an essential component for modern businesses.<br />\\r\\n      <br />Identities \u2714\ufe0f | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f |\\r\\n      Entitlements \u274c\\r\\n    </td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n<br />Versions: `7.5.2 P08` `8.0.0 P1`\\r\\n\\r\\n<Admonition type=\\"note\\">\\r\\n  We will refer to Entra ID as Azure AD interchangeably\\r\\n</Admonition>\\r\\n\\r\\n**Users** in Entra ID represent individuals who have access to resources within the organization\'s Entra ID tenant. Each user has a unique identity and associated credentials (username and password) to authenticate themselves and gain access to various applications and services. Users can be added manually or synchronized from an on-premises directory using Entra ID Connect.\\r\\n\\r\\n**Groups** are containers that simplify the management of user access and permissions. Instead of assigning permissions to individual users, you can assign them to a group, and all members of that group inherit those permissions. Groups can be created to represent departments, project teams, or any logical grouping of users.\\r\\n\\r\\n**Group Members** are the users associated with a specific group. Users can be added as members of one or more groups, which allows them to inherit the access and permissions granted to those groups. When a user is added to or removed from a group, their access and permissions are automatically updated based on the group\'s configuration. Group members can be individual users, other groups (nested groups), or even service principals (identities used by applications).\\r\\n\\r\\n**Directory Roles** define the level of access and permissions that can be assigned to users or groups within the Entra ID tenant. These roles are predefined and have specific permissions associated with them.\\r\\n\\r\\n**Member Users and Groups** refer to the entities that are assigned roles and granted permissions within Entra ID.\\r\\n\\r\\n<Admonition type=\\"danger\\" title=\\"Performance Considerations\\">\\r\\n- Use the `$select` to bring in only the required data elements thereby reducing the volume of data in the REST API response. This will also result in smaller number of pages in the result set.\\r\\n- Use `$filter` to reduce the data set if you need only a subset of data hereby reducing the volume of data in the REST API response. This will also result in smaller number of pages in the result set. Use `$expand` sparingly as it can result in longer response times as well as larger data volume. If using `$expand` use the $select to filter out unwanted data elements.\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Directory**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\n\\r\\nThis section explains the process for configuring an identity collector for the Entra ID application. We will use the RSA G&L generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Entra ID**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)<br /><br />If authentication type is OAuth2, refer to [OAuth2 Configuration](#oauth2) section.<br />If authentication type is Token, refer to [Token Configuration](#token) section.<br /><br />\\r\\n6. Click **Next**. On the **User Data** page, enter the following configurations.<br /><br />![Alt text](img/4.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>/users</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,givenName,surname,jobTitle,userPrincipalName,mail,officeLocation,companyName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>UserId</td>\\r\\n       <td>`$.value[*].userPrincipalName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.value[*].id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>FirstName</td>\\r\\n       <td>`$.value[*].givenName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>LastName</td>\\r\\n       <td>`$.value[*].surname`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Email</td>\\r\\n       <td>`$.value[*].mail`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Title</td>\\r\\n       <td>`$.value[*].title`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n7. Click **Next**. On the **Map Collector Attributes to User Attributes** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/8-1.png)<br />![Alt text](img/8-2.png)<br />![Alt text](img/8-3.png)\\r\\n8. Click **Finish**. Use the _Test_ function to make sure the configurations are accurate.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\nThis section explains the process for configuring an account collector for the Entra ID application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Entra ID**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/9.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Identity Collector](#identity-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Entra ID<br /><br />![img](img/10.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/11.png)<br />![Alt text](img/6.png)<br />![Alt text](img/12.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`users`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>AccountId</td>\\r\\n       <td>`$.value[*].userPrincipalName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.value[*].id`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n   <p></p>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/13.png)<br />![Alt text](img/6.png)<br />![Alt text](img/14.png)<br />\\r\\n<Admonition type=\\"note\\">\\r\\nHere, the `$expand` query parameter can be optionally passed to collect the group owners information\\r\\n</Admonition>\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`groups`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,displayName,description`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$expand</td>\\r\\n       <td>`owners($select=displayName,userPrincipalName,employeeId)`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>GroupId</td>\\r\\n       <td>`$.value[*].displayName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.value[*].id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Description</td>\\r\\n       <td>`$.value[*].description`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Owner</td>\\r\\n       <td>`$.value.*.owners[*].employeeId`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/6.png)<br />![Alt text](img/16.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`groups/${Id}/members`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,userPrincipalName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Account Identifier</td>\\r\\n       <td>`$.value[*].id`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/17.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/18.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/19.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/20.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/21.png)\\r\\n\\r\\n:bulb: **Info:** This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\n\\r\\nThis section explains the process for configuring an entitlement collector to collect safes from Entra ID application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Entra ID**.\\r\\n4. Navigate to **Collectors** tab and click on **_Create Entitlement Collector_**. Enter the details as shown below.<br /><br />![Alt text](img/22.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Identity Collector](#identity-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Entra ID.<br /><br />![Alt text](img/23.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/24.png)<br />![Alt text](img/25.png)<br />\\r\\n<Admonition type=\\"note\\" title=\\"Pagination\\" >\\r\\nThis API does not support pagination\\r\\n</Admonition>\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`directoryRoles`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,displayName,description`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>ApplicationRoleId</td>\\r\\n       <td>`$.value.*.displayName`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Id</td>\\r\\n       <td>`$.value.*.id`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Description</td>\\r\\n       <td>`$.value.*.description`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/26.png)<br />![Alt text](img/27.png)<br />\\r\\n<Admonition type=\\"note\\" title=\\"Pagination\\" >\\r\\nThis API does not support pagination\\r\\n</Admonition>\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`directoryRoles/${Id}/members/microsoft.graph.user`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,userPrincipalName,mail`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Account Identifier</td>\\r\\n       <td>`$.value.*.id`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n9. Click **Next**. On the **App-Role Group Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/28.png)<br />![Alt text](img/29.png)<br />\\r\\n<Admonition type=\\"note\\" title=\\"Pagination\\" >\\r\\nThis API does not support pagination\\r\\n</Admonition>\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-get\\">GET</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>URL</td>\\r\\n       <td>`directoryRoles/${Id}/members/microsoft.graph.group`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>$select</td>\\r\\n       <td>`id,displayName,description`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authorization</td>\\r\\n       <td>`Bearer ${AuthenticationToken}`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Group Identifier</td>\\r\\n       <td>`$.value.*.displayName`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/30.png)\\r\\n11. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/31.png)\\r\\n12. Click **Next**. In the **Group Evaluation**, map the account collector to group value.<br /><br />![Alt text](img/32.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n### Azure App\\r\\nThis section explains the setup of credentials for the service account that will be used with RSA G&L ADC and EDC.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Azure portal, [Microsoft Azure](https://portal.azure.com/)\\r\\n2. Select Microsoft Entra ID (Azure AD).<br /><br />![Alt text](img/33.png)\\r\\n3. Note down the **Tenant ID**. This is required in the RSA G&L collector configuration.<br /><br />![Alt text](img/34.png)\\r\\n4. Click on **App Registrations**.<br /><br />![Alt text](img/35.png)\\r\\n5. Click on **New Registration**\\r\\n6. Provide the details as shown below. Under **Redirect URI**, provide OAuth callback URL (https://instance.com:8443/aveksa/oauth/callback) for RSA G&L.<br /><br />![Alt text](img/36.png)\\r\\n7. Click **Register**.\\r\\n8. Note down the **Client ID**. This is required in the RSA G&L collector configuration.\\r\\n9. Click on **View API Permissions**.<br /><br />![Alt text](img/37.png)\\r\\n10. Select **Microsoft Graph**.<br /><br />![Alt text](img/38.png)\\r\\n11. Select **Application Permissions**.<br /><br />![Alt text](img/39.png)\\r\\n12. Select the below permissions.<br />![Alt text](img/40.png)<br />![Alt text](img/40-1.png)<br />![Alt text](img/40-2.png)<br />\\r\\n<Admonition type=\\"info\\" title=\\"Permissions\\">\\r\\n    Some suggested permissions (you may need more if you are collecting additional data)\\r\\n    <table>\\r\\n      <tr>\\r\\n        <td>User.Read.All</td>\\r\\n        <td>Read user data</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>Group.Read.All</td>\\r\\n        <td>Read group definitions</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>GroupMember.Read.All</td>\\r\\n        <td>Read group membership data</td>\\r\\n      </tr>\\r\\n      <tr>\\r\\n        <td>RoleManagement.Read.All</td>\\r\\n        <td>For collecting role definitions and role assignments</td>\\r\\n      </tr>\\r\\n    </table>\\r\\n</Admonition>\\r\\n13. Click **Add Permissions**.\\r\\n14. Click on **Certificates & Secrets**. Click on **New Client Secret**.<br /><br />![Alt text](img/41.png)\\r\\n15. Set the **Description** and suitable expiration period for the client secret.<br />![Alt text](img/42.png)\\r\\n16. Click **Add**. Note down the **Client Secret** which will be displayed only once. This is required for the RSA G&L collector configuration.\\r\\n---\\r\\n### Admin Consent\\r\\n\\r\\n**Steps**\\r\\n1. Refer to [Authorization and the Microsoft Graph Security API - Microsoft Graph | Microsoft Docs](https://docs.microsoft.com/en-us/graph/security-authorization) for information on Admin consent.\\r\\n2. Prepare the Admin Consent URL as shown below and send it to the M365 administrator to consent.\\r\\n\\r\\n```json\\r\\nFormat:\\r\\n\\r\\nhttps://login.microsoftonline.com/common/adminconsent?client_id=<Application Id>&state=12345&redirect_uri=<Redirect URL>\\r\\n\\r\\nExample:\\r\\nhttps://login.microsoftonline.com/a6d53c2-0f80-4a2e-947e-2a6h324jg1b71/adminconsent?client_id=24fsdfb1-8b66-4ba9-8f21-a7casdf73b1&state=4534646&redirect_uri=https://igl.company.com:8443/aveksa/oauth/callback\\r\\n```\\r\\n3. Once the Admin clicks the URL, they must login and authorize.\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2 \\r\\nThis section explains the process of setting up RSA G&L ADC with OAuth2 authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/43.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Client ID</td>\\r\\n       <td>The Application (client) ID</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Client Secret</td>\\r\\n       <td>The client secret</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Authentication URL</td>\\r\\n       <td>`https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/authorize`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Access Token URL</td>\\r\\n       <td>`https://login.microsoftonline.com/YOUR_TENANT_ID/oauth2/v2.0/token`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Scope</td>\\r\\n       <td>`openid offline_access`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/44.png)\\r\\n6. Login to Microsoft with the appropriate account credentials.<br /><br />![Alt text](img/45.png)![Alt text](img/45-1.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/46.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC with token authentication from Microsoft Graph.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC or EDC that will be using **Token** authentication.\\r\\n3. On the Connection Details page, configure the following.<br /><br />![Alt text](img/47.png)<br />\\r\\n   <table class=\\"table-container\\">\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Method</td>\\r\\n       <td>\\r\\n         <span class=\\"method-post\\">POST</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Token URL</td>\\r\\n       <td>`https://login.microsoftonline.com/TENANT_ID/oauth2/v2.0/token`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Username</td>\\r\\n       <td>Client ID</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Password</td>\\r\\n       <td>Client Secret</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Headers</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Accept</td>\\r\\n       <td>`application/json`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Content-Type</td>\\r\\n       <td>`application/x-www-form-urlencoded`</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Request Body</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">grant_type=client_credentials&client_id=`${TokenUsername}`&<br />\\r\\n         client_secret=`${TokenPassword}`&scope=https://graph.microsoft.com/.default</td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td colspan=\\"2\\">\\r\\n         <span class=\\"header-2-text\\">Response Mappings</span>\\r\\n       </td>\\r\\n     </tr>\\r\\n     <tr>\\r\\n       <td>Response Path</td>\\r\\n       <td>`$.access_token`</td>\\r\\n     </tr>\\r\\n   </table>\\r\\n4. Save the collector configuration & test.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL041</span>\\r\\n\\r\\n[^API]:\\r\\n    <LinkSvg />\\r\\n    <a\\r\\n      href=\\"https://docs.microsoft.com/en-us/graph/api/overview?view=graph-rest-1.0\\"\\r\\n      target=\\"_blank\\"\\r\\n    >\\r\\n      Microsoft Graph REST API v1.0{\\" \\"}\\r\\n    </a>"},{"id":"sumologic","metadata":{"permalink":"/RSA/blog/sumologic","source":"@site/blog/collections/sumologic/sumologic.mdx","title":"Sumo Logic","description":"Sumo Logic is a cloud-based log management and analytics platform that empowers organizations to collect, analyze, and derive insights from their machine data in real time. It offers a unified view of data across applications and infrastructure, enabling users to troubleshoot issues, monitor performance, detect security threats, and drive data-driven decision-making for enhanced operational efficiency and security.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-14T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Sumo Logic","permalink":"/RSA/blog/tags/sumo-logic"},{"inline":true,"label":"SIEM","permalink":"/RSA/blog/tags/siem"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"}],"readingTime":33.666666666666664,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"sumologic","title":"Sumo Logic","date":"2023-10-14T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Sumo Logic","SIEM","Analytics"],"keywords":["Collections","REST","SaaS","Sumo Logic","SIEM","Analytics"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Microsoft Entra ID (Azure AD)","permalink":"/RSA/blog/azuread"},"nextItem":{"title":"Microsoft Dynamics 365","permalink":"/RSA/blog/dynamics365"}},"content":"import logoPNG from \'@site/static/img/logos/Sumo Logic - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Sumo Logic is a cloud-based log management and analytics platform that empowers organizations to collect, analyze, and derive insights from their machine data in real time. It offers a unified view of data across applications and infrastructure, enabling users to troubleshoot issues, monitor performance, detect security threats, and drive data-driven decision-making for enhanced operational efficiency and security.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** in Sumo Logic are individual accounts that interact with the Sumo Logic platform. Users can be individuals within an organization, such as analysts, administrators, developers, and more. Each user is uniquely identified by their email address and has their own set of credentials (username and password) to log in to the Sumo Logic platform.\\r\\n\\r\\n**Roles** define a set of permissions and access rights that determine what actions a user can perform within the Sumo Logic platform. Roles are used to control access to various features, functionalities, and data. Sumo Logic offers predefined roles, but you can also create custom roles to fit your organization\'s specific needs.\\r\\n\\r\\n**Roles** can be categorized into different types, such as:\\r\\n- **Admin Roles**: These roles have extensive permissions, allowing users to manage and configure various aspects of the Sumo Logic account, such as data sources, collectors, and dashboards.\\r\\n- **User Roles**: These roles provide more limited permissions, focusing on data analysis, querying, and visualization without the ability to modify account settings.\\r\\n\\r\\nThe relationship between users and roles is established through role assignments. Each user can be assigned one or more roles, and these roles collectively define the user\'s permissions and access levels within the Sumo Logic platform.\\r\\n\\r\\n## Table of Contents\\r\\n>\\r\\n- [Application](#application)\\r\\n- [Account Collector](#account-collector)\\r\\n- [Entitlement Collector](#entitlement-collector)\\r\\n- [Application Setup](#application-setup)\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Sumo Logic application. We will use the RSA G&L Generic REST collector for this purpose. \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sumo Logic**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sumo Logic<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.data.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.data.*.isActive`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsLocked</td>\\r\\n    <td>`$.data.*.isLocked`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastLogin</td>\\r\\n    <td>`$.data.*.lastLoginTimestamp`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/8.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/9.png)\\r\\n12. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/10.png)\\r\\n13. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect user roles and assignments from the Sumo Logic application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Sumo Logic**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/11.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Sumo Logic.<br /><br />![Alt text](img/12.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/13.png)<br />![Alt text](img/6.png)<br />![Alt text](img/14.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.data.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.data.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/6.png)<br />![Alt text](img/16.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/roles/${Id}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/17.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/18.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Sumo Logic for integration with G&L. Sumo Logic API calls require application key and API key for most invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Sumo Logic UI, https://service.sumologic.com/.\\r\\n2. Under **Administration**, click on **Security**.\\r\\n3. Click on **Access Keys** tab.\\r\\n4. Click on ***Add Access Key***\\r\\n5. Provide a suitable key name and click **Save**<br />![Alt text](img/19.png)\\r\\n6. Copy the ***Access ID*** (user name) and ***Access Key*** (Password) to be used in Basic Authentication in the collectors. Click **Done**.<br />![Alt text](img/20.png)\\r\\n7. Click on **Policies** tab and set the ***Access Keys Deactivation*** to a longer period. It is 30 days by default.<br /><br />![Alt text](img/21.png)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL040</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://api.sumologic.com/docs/#section/Getting-Started\\" target=\\"_blank\\">Sumo Logic API</a>"},{"id":"dynamics365","metadata":{"permalink":"/RSA/blog/dynamics365","source":"@site/blog/collections/dynamics365/dynamics365.mdx","title":"Microsoft Dynamics 365","description":"Microsoft Dynamics 365 is a comprehensive cloud-based business application suite integrating ERP, CRM, and AI-driven insights. It streamlines operations, enhances customer engagement, and provides data-driven decision-making for businesses of all sizes, fostering growth and efficiency.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-14T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Microsoft","permalink":"/RSA/blog/tags/microsoft"},{"inline":true,"label":"ERP","permalink":"/RSA/blog/tags/erp"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"},{"inline":true,"label":"Dynamics 365","permalink":"/RSA/blog/tags/dynamics-365"}],"readingTime":56.333333333333336,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"dynamics365","title":"Microsoft Dynamics 365","date":"2023-10-14T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Microsoft","ERP","CRM","Dynamics 365"],"keywords":["Collections","REST","SaaS","Microsoft","ERP","CRM","Dynamics 365"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Sumo Logic","permalink":"/RSA/blog/sumologic"},"nextItem":{"title":"Jira Cloud","permalink":"/RSA/blog/jira-cloud"}},"content":"import logoPNG from \'@site/static/img/logos/Dynamics 365 - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Microsoft Dynamics 365 is a comprehensive cloud-based business application suite integrating ERP, CRM, and AI-driven insights. It streamlines operations, enhances customer engagement, and provides data-driven decision-making for businesses of all sizes, fostering growth and efficiency.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Microsoft Dynamics 365 application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Microsoft Dynamics 365**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. <br /><br />![img](img/3.png)<br /><br />If authentication type is OAuth2, refer to [OAuth2 Configuration](#oauth2) section.<br />If authentication type is Token, refer to [Token Configuration](#token) section.<br /><br />\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Microsoft Dynamics 365<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>Get All Users</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/data/SystemUsers`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.value[*].UserID`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.value[*].Email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserName</td>\\r\\n    <td>`$.value[*].UserName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsEnabled</td>\\r\\n    <td>`$.value[*].Enabled`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"@odata.context\\": \\"https://xxxxx.cloudax.dynamics.com/data/$metadata#SystemUsers\\",\\r\\n    \\"value\\": [\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEwNDc4NTI2NDgsNTYzNzE0NDU3NjsyMTIyNzEzNTYyLDU2MzcxNDQ1NzYn\\\\\\"\\",\\r\\n            \\"UserID\\": \\"Admin\\",\\r\\n            \\"WorkflowLineItemNotificationFormat\\": \\"Grouped\\",\\r\\n            \\"DocumentHandlingActive\\": \\"Yes\\",\\r\\n            \\"UserInfo_defaultPartition\\": true,\\r\\n            \\"GlobalListPageLinkMode\\": 0,\\r\\n            \\"GlobalExcelExportMode\\": 0,\\r\\n            \\"ShowAttachmentStatus\\": \\"No\\",\\r\\n            \\"EventPopUpLinkDestination\\": \\"ToAlert\\",\\r\\n            \\"NetworkDomain\\": \\"https://sts.windows.net/\\",\\r\\n            \\"Company\\": \\"DAT\\",\\r\\n            \\"SqmGUID\\": \\"00000000-0000-0000-0000-000000000000\\",\\r\\n            \\"SendNotificationsInEmail\\": \\"No\\",\\r\\n            \\"Alias\\": \\"dk.rao@cgidynamics365.onmicrosoft.com\\",\\r\\n            \\"EmailProviderID\\": \\"SMTP\\",\\r\\n            \\"Email\\": \\"april@contosoax7.onmicrosoft.com\\",\\r\\n            \\"Density\\": \\"Density30\\",\\r\\n            \\"DefaultCountryRegion\\": \\"USA\\",\\r\\n            \\"PersonName\\": \\"\\",\\r\\n            \\"SendAlertAsEmailMessage\\": \\"DefinedOnRule\\",\\r\\n            \\"SqmEnabled\\": \\"PromptMe\\",\\r\\n            \\"GlobalExcelExportFilePath\\": \\"\\",\\r\\n            \\"Language\\": \\"\\",\\r\\n            \\"EventPopUpDisplayWhen\\": \\"DefinedOnRule\\",\\r\\n            \\"EventPollFrequency\\": 15,\\r\\n            \\"EventWorkflowShowPopup\\": \\"Yes\\",\\r\\n            \\"StartPage\\": \\"DefaultDashboard\\",\\r\\n            \\"PreferredTimeZone\\": \\"GMT_COORDINATEDUNIVERSALTIME\\",\\r\\n            \\"HomePageRefreshDuration\\": 0,\\r\\n            \\"UserInfo_language\\": \\"en-us\\",\\r\\n            \\"AutoLogOff\\": 1400,\\r\\n            \\"Theme\\": \\"Theme0\\",\\r\\n            \\"MarkEmptyLinks\\": \\"No\\",\\r\\n            \\"Enabled\\": true,\\r\\n            \\"ShowNotificationsInTheMicrosoftDynamicsAX7Client\\": \\"Yes\\",\\r\\n            \\"Helplanguage\\": \\"en-us\\",\\r\\n            \\"UserName\\": \\"Admin\\",\\r\\n            \\"AccountType\\": \\"ClaimsUser\\",\\r\\n            \\"EventPopUps\\": \\"No\\",\\r\\n            \\"PreferredCalendar\\": \\"Gregorian\\",\\r\\n            \\"PreferredLocale\\": \\"\\",\\r\\n            \\"ExternalUser\\": false,\\r\\n            \\"AutomaticUrlUpdate\\": \\"No\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzIxNTg0MjUxOSw1NjM3MTUwNTc5OzEsNTYzNzE1NTA3Nic=\\\\\\"\\",\\r\\n            \\"UserID\\": \\"Brad\\",\\r\\n            \\"WorkflowLineItemNotificationFormat\\": \\"Grouped\\",\\r\\n            \\"DocumentHandlingActive\\": \\"Yes\\",\\r\\n            \\"UserInfo_defaultPartition\\": true,\\r\\n            \\"GlobalListPageLinkMode\\": 0,\\r\\n            \\"GlobalExcelExportMode\\": 0,\\r\\n            \\"ShowAttachmentStatus\\": \\"No\\",\\r\\n            \\"EventPopUpLinkDestination\\": \\"ToAlert\\",\\r\\n            \\"NetworkDomain\\": \\"https://sts.windows.net/\\",\\r\\n            \\"Company\\": \\"USMF\\",\\r\\n            \\"SqmGUID\\": \\"00000000-0000-0000-0000-000000000000\\",\\r\\n            \\"SendNotificationsInEmail\\": \\"No\\",\\r\\n            \\"Alias\\": \\"Brad@contosoax7.onmicrosoft.com\\",\\r\\n            \\"EmailProviderID\\": \\"\\",\\r\\n            \\"Email\\": \\"\\",\\r\\n            \\"Density\\": null,\\r\\n            \\"DefaultCountryRegion\\": \\"\\",\\r\\n            \\"PersonName\\": \\"\\",\\r\\n            \\"SendAlertAsEmailMessage\\": \\"DefinedOnRule\\",\\r\\n            \\"SqmEnabled\\": \\"PromptMe\\",\\r\\n            \\"GlobalExcelExportFilePath\\": \\"\\",\\r\\n            \\"Language\\": \\"\\",\\r\\n            \\"EventPopUpDisplayWhen\\": \\"DefinedOnRule\\",\\r\\n            \\"EventPollFrequency\\": 15,\\r\\n            \\"EventWorkflowShowPopup\\": \\"Yes\\",\\r\\n            \\"StartPage\\": \\"\\",\\r\\n            \\"PreferredTimeZone\\": \\"GMTMINUS0800PACIFICTIME\\",\\r\\n            \\"HomePageRefreshDuration\\": 0,\\r\\n            \\"UserInfo_language\\": \\"en-us\\",\\r\\n            \\"AutoLogOff\\": 0,\\r\\n            \\"Theme\\": \\"Theme0\\",\\r\\n            \\"MarkEmptyLinks\\": \\"No\\",\\r\\n            \\"Enabled\\": true,\\r\\n            \\"ShowNotificationsInTheMicrosoftDynamicsAX7Client\\": \\"Yes\\",\\r\\n            \\"Helplanguage\\": \\"en-us\\",\\r\\n            \\"UserName\\": \\"Brad Sutton\\",\\r\\n            \\"AccountType\\": \\"ClaimsUser\\",\\r\\n            \\"EventPopUps\\": \\"No\\",\\r\\n            \\"PreferredCalendar\\": \\"Gregorian\\",\\r\\n            \\"PreferredLocale\\": \\"\\",\\r\\n            \\"ExternalUser\\": false,\\r\\n            \\"AutomaticUrlUpdate\\": \\"No\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>Get All Groups</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/data/UserGroups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.value[*].GroupId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.value[*].name`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"@odata.context\\": \\"https://xxxxx.cloudax.dynamics.com/data/$metadata#UserGroups\\",\\r\\n    \\"value\\": [\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzAsNTYzNzE0NDU3Nic=\\\\\\"\\",\\r\\n            \\"GroupId\\": \\"OverBudget\\",\\r\\n            \\"name\\": \\"Over budget processing user group\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU3Nyc=\\\\\\"\\",\\r\\n            \\"GroupId\\": \\"Originator\\",\\r\\n            \\"name\\": \\"Project journal originator group\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU3OCc=\\\\\\"\\",\\r\\n            \\"GroupId\\": \\"Approvers\\",\\r\\n            \\"name\\": \\"Project journal approvers group\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNjg3MTk0NzY3Mzcn\\\\\\"\\",\\r\\n            \\"GroupId\\": \\"TestGroup1\\",\\r\\n            \\"name\\": \\"TestGroup1\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>Get All Group Members</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/data/UserGroupUserLists`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.value[*].userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.value[*].groupId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"@odata.context\\": \\"https://xxxxx.cloudax.dynamics.com/data/$metadata#UserGroupUserLists\\",\\r\\n    \\"value\\": [\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzAsNTYzNzE0NDU3Nic=\\\\\\"\\",\\r\\n            \\"userId\\": \\"Brad\\",\\r\\n            \\"groupId\\": \\"OverBudget\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzAsNTYzNzE0NDU3Nyc=\\\\\\"\\",\\r\\n            \\"userId\\": \\"Admin\\",\\r\\n            \\"groupId\\": \\"OverBudget\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU3OCc=\\\\\\"\\",\\r\\n            \\"userId\\": \\"bradpsus\\",\\r\\n            \\"groupId\\": \\"OverBudget\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU3OSc=\\\\\\"\\",\\r\\n            \\"userId\\": \\"SaraPSUS\\",\\r\\n            \\"groupId\\": \\"OverBudget\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector for the Microsoft Dynamics 365 application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin. \\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Microsoft Dynamics 365**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Microsoft Dynamics 365.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>Get All Roles</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/data/SecurityRoles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.value[*].SecurityRoleName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.value[*].SecurityRoleIdentifier`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.value[*].Description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccessToSensitiveData</td>\\r\\n    <td>`$.value[*].AccessToSensitiveData`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"@odata.context\\": \\"https://xxxxx.cloudax.dynamics.com/data/$metadata#SecurityRoles\\",\\r\\n    \\"value\\": [\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsMic=\\\\\\"\\",\\r\\n            \\"SecurityRoleIdentifier\\": \\"ANONYMOUSAPPLICANT\\",\\r\\n            \\"ContextString\\": \\"\\",\\r\\n            \\"AccessToSensitiveData\\": false,\\r\\n            \\"Description\\": \\"External user application for employment\\",\\r\\n            \\"SecurityRoleName\\": \\"Applicant anonymous (external)\\",\\r\\n            \\"UserLicenseType\\": \\"None\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNCc=\\\\\\"\\",\\r\\n            \\"SecurityRoleIdentifier\\": \\"AUDITPOLICYMANAGER\\",\\r\\n            \\"ContextString\\": \\"\\",\\r\\n            \\"AccessToSensitiveData\\": false,\\r\\n            \\"Description\\": \\"Manages and reviews audit policy performance\\",\\r\\n            \\"SecurityRoleName\\": \\"Auditor\\",\\r\\n            \\"UserLicenseType\\": \\"Enterprise\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>Get All Role Members</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/data/SecurityUserRoles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.value[*].SecurityRoleIdentifier`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.value[*].UserId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"@odata.context\\": \\"https://xxxxx.cloudax.dynamics.com/data/$metadata#SecurityUserRoles\\",\\r\\n    \\"value\\": [\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU4MSc=\\\\\\"\\",\\r\\n            \\"UserId\\": \\"ALICIA\\",\\r\\n            \\"SecurityRoleIdentifier\\": \\"BUDGETBUDGETCLERK\\",\\r\\n            \\"AssignmentStatus\\": \\"Enabled\\",\\r\\n            \\"AssignmentMode\\": \\"Manual\\",\\r\\n            \\"SecurityRoleName\\": \\"Budget clerk\\",\\r\\n            \\"UserLicenseType\\": \\"Activity\\"\\r\\n        },\\r\\n        {\\r\\n            \\"@odata.etag\\": \\"W/\\\\\\"JzEsNTYzNzE0NDU4Mic=\\\\\\"\\",\\r\\n            \\"UserId\\": \\"ALICIA\\",\\r\\n            \\"SecurityRoleIdentifier\\": \\"HCMEMPLOYEE\\",\\r\\n            \\"AssignmentStatus\\": \\"Enabled\\",\\r\\n            \\"AssignmentMode\\": \\"Manual\\",\\r\\n            \\"SecurityRoleName\\": \\"Employee\\",\\r\\n            \\"UserLicenseType\\": \\"Universal\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\r\\n\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the setup of credentials for the service account that will be used ADC and EDC.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Azure portal, Microsoft Azure \\r\\n2. Select **Azure Active Directory**<br /><br />![Alt text](img/25.png)\\r\\n3. Note down the **Tenant ID**. This is required in the RSA G&L collector configuration.<br /><br />![Alt text](img/26.png)\\r\\n4. Click on **App Registrations**.<br /><br />![Alt text](img/27.png)\\r\\n5. Click on **New Registration**.\\r\\n6. Provide the details as shown below. Under **Redirect URI**, provide OAuth callback URL (https://instance.company.com:8443/aveksa/oauth/callback) for RSA G&L.<br /><br />![Alt text](img/28.png)\\r\\n7. Click **Register**.\\r\\n8. Note down the **Client ID**. This is required in the RSA G&L collector configuration.\\r\\n9. Click on **View API Permissions**.<br /><br />![Alt text](img/29.png)\\r\\n10. Select **Microsoft Graph**.<br /><br />![Alt text](img/30.png)\\r\\n11. Select **Delegated Permissions**.<br /><br />![Alt text](img/31.png)\\r\\n12. Select the below permissions. Note that this gives full access and hence needs to be tuned down to read only permissions.<br /><br />![Alt text](img/32.png)\\r\\n13. Click **Add Permissions**.\\r\\n14. Click on **Certificates & Secrets**. Click on **New Client Secret**.<br /><br />![Alt text](img/33.png)\\r\\n15. Set the **Description** and suitable expiration period for the client secret.<br />![Alt text](img/34.png)\\r\\n16. Click **Add**. Note down the **Client Secret** which will be displayed only once. This is required in the RSA G&L collector configuration.\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nRefer to the [OAuth2 Configuration](./../azuread#oauth2)\\r\\n\\r\\n---\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC with token authentication from Microsoft Graph.\\r\\n```json title=\\"Sample API Response\\"\\r\\n{\\r\\n    \\"token_type\\": \\"Bearer\\",\\r\\n    \\"expires_in\\": \\"3599\\",\\r\\n    \\"ext_expires_in\\": \\"3599\\",\\r\\n    \\"expires_on\\": \\"1616882517\\",\\r\\n    \\"not_before\\": \\"1616878617\\",\\r\\n    \\"resource\\": \\"https://xxxxxxxxxx.cloudax.dynamics.com\\",\\r\\n    \\"access_token\\": \\"eyJ0eXAiOi -- TRUNCATED -- CJhbGciOiNENBQT0iLCJhcHBpZCIZLw\\"\\r\\n}\\r\\n```\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC or EDC that will be using **Token** authentication.\\r\\n3. On the Connection Details page, configure the following.<br /><br />![Alt text](img/35.png)<br /><br />![Alt text](img/36.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://login.microsoftonline.com/TENANT_ID/oauth2/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>Client ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>Client Secret</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/x-www-form-urlencoded`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">\\r\\n      grant_type=client_credentials&client_id=$&#123;TokenUsername}&client_secret=$&#123;TokenPassword}\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$.access_token`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL039</span>\\r\\n\\r\\n[^API]: <b>API References</b><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/SystemUsers\\" target=\\"_blank\\">Get All Users</a><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/UserGroups\\" target=\\"_blank\\">Get All Groups</a><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/UserGroupUserLists\\" target=\\"_blank\\">Get All Group Members</a><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/SecurityRoles\\" target=\\"_blank\\">Get All Roles</a><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/SecuritySubRoles\\" target=\\"_blank\\">Get All Sub Roles</a><br /><br /><LinkSvg /><a href=\\"https://INSTANCE.cloudax.dynamics.com/data/SecurityUserRoles\\" target=\\"_blank\\">Get All Role Members</a>"},{"id":"jira-cloud","metadata":{"permalink":"/RSA/blog/jira-cloud","source":"@site/blog/collections/jira-cloud/jira-cloud.mdx","title":"Jira Cloud","description":"Jira Cloud is a popular project management tool that helps teams plan, track, and manage their work efficiently. It provides a centralized platform for creating tasks, organizing workflows, assigning responsibilities, and tracking progress. With features like customizable boards, issue tracking, real-time collaboration, and integrations with other tools, Jira Cloud streamlines project management processes, improves team communication, and facilitates agile development methodologies, ultimately enhancing productivity and delivering high-quality results.\u2003Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-13T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Jira","permalink":"/RSA/blog/tags/jira"},{"inline":true,"label":"Cloud","permalink":"/RSA/blog/tags/cloud"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":40.666666666666664,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"jira-cloud","title":"Jira Cloud","date":"2023-10-13T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Jira","Cloud","Ticketing"],"keywords":["Collections","REST","SaaS","Jira","Cloud","Ticketing"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Microsoft Dynamics 365","permalink":"/RSA/blog/dynamics365"},"nextItem":{"title":"CyberArk","permalink":"/RSA/blog/cyberark"}},"content":"import logoPNG from \'@site/static/img/logos/Jira - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Jira Cloud is a popular project management tool that helps teams plan, track, and manage their work efficiently. It provides a centralized platform for creating tasks, organizing workflows, assigning responsibilities, and tracking progress. With features like customizable boards, issue tracking, real-time collaboration, and integrations with other tools, Jira Cloud streamlines project management processes, improves team communication, and facilitates agile development methodologies, ultimately enhancing productivity and delivering high-quality results.\u2003<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** - Users are individuals who have an account in Jira and can log in to access and work on projects.\\r\\n\\r\\n**Groups** - Groups are collections of users. By assigning permissions to groups, you can easily manage access for multiple users simultaneously.\\r\\n\\r\\n**Roles** - Roles represent a set of responsibilities or functions within a project. Examples include Project Lead, Developer, Tester, etc. Roles can be assigned to users or groups within a specific project.\\r\\n\\r\\n**Permissions** - Permissions control what actions or operations users can perform within Jira. These permissions can be assigned at different levels, such as global (system-wide), project, or issue level. They define who can create, edit, view, transition issues, manage workflows, administer projects, and more.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Jira Cloud application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Jira Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. The endpoint uses a basic authentication using the API token. Refer to [API Setup](#api-token).<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Jira Cloud<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/rest/api/3/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.accountId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.*.emailAddress`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>isActive</td>\\r\\n    <td>`$.*.active`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DisplayName</td>\\r\\n    <td>`$.*.displayName`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<Admonition type=\\"note\\">\\r\\nThe API doesn\'t return group descriptions.\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v4/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.groups.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.groups.*.groupId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<Admonition type=\\"danger\\">\\r\\nCurrently, this configuration is unsupported since G&L REST collectors do not replace placeholder tokens in query parameter. Jira does not support a single API to retrieve group members.\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/rest/api/3/group/member`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>groupId</td>\\r\\n    <td>`${Id}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.username`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect roles from Jira Cloud application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Jira Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Jira Cloud.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/6.png)<br />![Alt text](img/20.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/rest/api/3/role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/rest/api/3/role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.actors.*.actorUser.accountId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **App-Role Group Membership Data** page, enter the following configurations.<br /><br />![Alt text](img/23.png)<br />![Alt text](img/6.png)<br />![Alt text](img/24.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/rest/api/3/role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.actors.*.actorGroup.groupId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br />\\r\\n11. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/25.png)\\r\\n12. Click **Next**. In the **Group Evaluation**, map the account collector to group value.<br /><br />![Alt text](img/26.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\r\\n---\\r\\n## Jira Cloud: Setup\\r\\n### API Token\\r\\nThis section explains the process of acquiring the authentication data required for collectors from Jira Cloud. Refer to Basic authentication section in the API guide [^API] for more information.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Jira Cloud Manage Account page https://id.atlassian.com/manage-profile/security \\r\\n2. Click on *Create and manage API tokens* under **API token** section<br /><br />![Alt text](img/27.png)\\r\\n3. Click on **Create API token**.\\r\\n4. Enter the token label and click Create.<br /><br />![Alt text](img/28.png)\\r\\n5. Copy the API token and save it for use within collector configuration.<br /><br />![Alt text](img/29.png)\\r\\n6. Click **Close**.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL038</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developer.atlassian.com/cloud/jira/platform/rest/v3/intro/#version\\" target=\\"_blank\\">Jira Cloud\'s REST API</a>"},{"id":"cyberark","metadata":{"permalink":"/RSA/blog/cyberark","source":"@site/blog/collections/cyberark/cyberark.mdx","title":"CyberArk","description":"CyberArk is a leading cybersecurity company specializing in privileged access management. Their solutions protect organizations from cyber threats by securing and managing privileged accounts, credentials, and secrets. This helps prevent unauthorized access and potential breaches, ensuring critical assets and sensitive data remain safe and secure.The type of data that can be collected includes accounts, safes, privileged accounts, platforms etc.\u2003Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-13T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Jira","permalink":"/RSA/blog/tags/jira"},{"inline":true,"label":"Cloud","permalink":"/RSA/blog/tags/cloud"}],"readingTime":58,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"cyberark","title":"CyberArk","date":"2023-10-13T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Jira","Cloud"],"keywords":["Collections","REST","SaaS","Jira","Cloud"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Jira Cloud","permalink":"/RSA/blog/jira-cloud"},"nextItem":{"title":"GitHub Enterprise Cloud","permalink":"/RSA/blog/github"}},"content":"import logoPNG from \'@site/static/img/logos/CyberArk - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>CyberArk is a leading cybersecurity company specializing in privileged access management. Their solutions protect organizations from cyber threats by securing and managing privileged accounts, credentials, and secrets. This helps prevent unauthorized access and potential breaches, ensuring critical assets and sensitive data remain safe and secure.<br /><br />The type of data that can be collected includes accounts, safes, privileged accounts, platforms etc.\u2003<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Accounts** - Accounts in CyberArk refer to the privileged accounts or credentials that are stored, managed, and secured within the CyberArk vault. These accounts are typically used to access and manage privileged resources such as servers, databases, applications, or network devices. Accounts can include credentials like usernames, passwords, SSH keys, API keys, or other authentication information necessary for privileged access.\\r\\n\\r\\n**Users** - Users in CyberArk refer to the individuals who interact with the CyberArk solution itself. These users are typically administrators or end-users who perform various tasks related to managing and utilizing the CyberArk platform. Users have different roles and permissions within CyberArk, determining their access levels and privileges for functions such as managing accounts, configuring policies, generating reports, and conducting audits.\\r\\n\\r\\n**Groups** - Groups in CyberArk are logical collections or containers used to organize users and assign permissions and access rights in a more efficient and manageable manner. Instead of individually assigning permissions to each user, administrators can create groups and assign permissions to the group. This way, any user added to the group automatically inherits the group\'s permissions. Groups help simplify administration and access control management in large-scale deployments by allowing administrators to manage permissions at a group level rather than on a per-user basis.\\r\\n\\r\\n**Safes** - Safes in CyberArk refer to secure storage containers within the CyberArk vault where privileged accounts and sensitive information are stored. Safes act as encrypted repositories that protect and control access to the stored credentials and other sensitive data. Safes are typically organized based on the target systems, applications, or business units they relate to. By storing privileged accounts in safes, organizations can enforce strict access controls, audit all access and activity, and enable secure automatic retrieval of credentials when needed. \\r\\n\\r\\n![img](./img/a1.png)\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the CyberArk application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **CyberArk**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)<br /><br />If authentication type is Token, refer to [Token Authentication with RSA G&L](#token) section.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from CyberArk<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/PasswordVault/api/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Users[*].username`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.Users[*].userType`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Users[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Source</td>\\r\\n    <td>`$.Users[*].source`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ComponentUser</td>\\r\\n    <td>`$.Users[*].componentUser`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<p></p>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<Admonition type=\\"note\\">\\r\\nIn our example, the CyberArk groups are AD based and hence we will be collecting only vault (local) groups using the filter. We will collect AD groups to safes relationship directly in EDC\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/PasswordVault/api/UserGroups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.value[*].groupName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.value[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.value[*].groupType`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.value[*].description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Directory</td>\\r\\n    <td>`$.value[*].directory`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DN</td>\\r\\n    <td>`$.value[*].dn`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/PasswordVault/api/UserGroups/${Id}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>groupId</td>\\r\\n    <td>`${Id}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.members.*.username`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\n### Safes\\r\\nThis section explains the process for configuring an entitlement collector to collect safes from CyberArk application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **CyberArk**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from CyberArk.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/6.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/PasswordVault/api/Safes`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.value.*.safeName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.value.*.safeNumber`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.value.*.description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SafeURL</td>\\r\\n    <td>`$.value.*.safeUrlId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/passwordvault/api/Safes/${SafeURL}/Members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.value.*.memberName`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **App-Role Group Membership Data** page, enter the following configurations.<br /><br />![Alt text](img/23.png)<br />![Alt text](img/6.png)<br />![Alt text](img/24.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/passwordvault/api/Safes/${SafeURL}/Members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.value.*.memberName`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br />\\r\\n11. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/25.png)\\r\\n12. Click **Next**. In the **Group Evaluation**, map the account collector to group value.<br /><br />![Alt text](img/26.png)\\r\\n<Admonition type=\\"note\\">\\r\\nYou must add your Active Directory ADC mapping here if Active Directory group entitlements are part of your permissions model. \\r\\n</Admonition>\\r\\n\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\r\\n---\\r\\n## Authentication\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC or EDC that will be using **Token** authentication.\\r\\n3. On the Connection Details page, configure the following.<br /><br />![Alt text](img/27.png)\\r\\n<Admonition type=\\"note\\" title=\\"Important\\">\\r\\nUser Agent header must be set to null or a browser agent type for the API call to succeed\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://instance.privilegecloud.cyberark.com/PasswordVault/API/Auth/CyberArk/Logon`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>`User Name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>`Password`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>User-Agent</td>\\r\\n    <td>`Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">\\r\\n```json\\r\\n{\\r\\n  \\"username\\": \\"${TokenUsername}\\",\\r\\n  \\"password\\": \\"${TokenPassword}\\"\\r\\n}\\r\\n```\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in CyberArk for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to CyberArk Privilege Cloud. For illustration, version 13.1.0.22 is being used.<br /><br />![Alt text](img/28.png)\\r\\n2. From the main menu, navigate to **User Provisioning > Users**.<br /><br />![Alt text](img/29.png)\\r\\n3. Click on **Create CyberArk User** button.<br /><br />![Alt text](img/30.png)\\r\\n4. Under **Define General Properties** page, provide a suitable user name and assign the Auditor role.<br /><br />![Alt text](img/31.png)\\r\\n5. Click **Next**. Under **Add Personal Details** page, provide any optional details. <br /><br />![Alt text](img/32.png)\\r\\n6. Click **Next**. Under **Select Authentication Method** page, select **Internal** authentication method, provide suitable password. Uncheck **User must change password at next logon**. Select **Never** under password expiration.<br /><br />![Alt text](img/33.png)\\r\\n7. Click **Next**. Under **Assign Groups** page, assign to any additional groups as needed.<br /><br />![Alt text](img/34.png)\\r\\n8. Click **Next**.\\r\\n9. Review the information on the Summary page and click **Create**.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL037</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://docs.cyberark.com/Product-Doc/OnlineHelp/PAS/Latest/en/Content/WebServices/Implementing%20Privileged%20Account%20Security%20Web%20Services%20.htm\\" target=\\"_blank\\">CyberArk\'s REST API</a>"},{"id":"github","metadata":{"permalink":"/RSA/blog/github","source":"@site/blog/collections/github/github.mdx","title":"GitHub Enterprise Cloud","description":"GitHub Enterprise Cloud is a fully managed and secure cloud-based solution that allows organizations to host their repositories and collaborate on code without the need for infrastructure management. It provides access to all the features of GitHub, including version control and issue tracking, while offering the convenience and scalability of cloud hosting. With GitHub Enterprise Cloud, organizations can focus on their development workflows while ensuring security and reliability.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-12T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"GitHub","permalink":"/RSA/blog/tags/git-hub"},{"inline":true,"label":"Collaboration","permalink":"/RSA/blog/tags/collaboration"},{"inline":true,"label":"SCM","permalink":"/RSA/blog/tags/scm"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":21.4,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"github","title":"GitHub Enterprise Cloud","date":"2023-10-12T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","GitHub","Collaboration","SCM","Ticketing"],"keywords":["Collections","REST","SaaS","GitHub","Collaboration","SCM","Ticketing"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"CyberArk","permalink":"/RSA/blog/cyberark"},"nextItem":{"title":"GitLab","permalink":"/RSA/blog/gitlab"}},"content":"import logoPNG from \'@site/static/img/logos/GitHub - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>GitHub Enterprise Cloud is a fully managed and secure cloud-based solution that allows organizations to host their repositories and collaborate on code without the need for infrastructure management. It provides access to all the features of GitHub, including version control and issue tracking, while offering the convenience and scalability of cloud hosting. With GitHub Enterprise Cloud, organizations can focus on their development workflows while ensuring security and reliability.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Members** - Members of an organization can have various roles and permissions assigned to them. The specific permissions granted to members depend on their roles within the organization. Members can be added to teams and granted access to repositories based on the team permissions.\\r\\n\\r\\n**Teams** - Teams are groups of organization members that can be assigned specific roles and permissions. You can create teams within an organization and define their access levels to repositories. Teams allow you to manage permissions for multiple members at once.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the GitHub Enterprise Cloud application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **GitHub Enterprise Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. The endpoint uses a static token for authentication.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from GitHub Enterprise Cloud<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/orgs/ORG/members` (Replace ORG with your organization identifier)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.login`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>State</td>\\r\\n    <td>`$.*.url`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/orgs/ORG/teams`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SLUG</td>\\r\\n    <td>`$.*.slug`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/orgs/ORG/teams/${SLUG}/members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.login`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the collected group attributes.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n13. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n14. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL036</span>"},{"id":"gitlab","metadata":{"permalink":"/RSA/blog/gitlab","source":"@site/blog/collections/gitlab/gitlab.mdx","title":"GitLab","description":"GitLab is a DevOps platform that offers a comprehensive suite of tools for software development, version control, and CI/CD. It enables teams to manage repositories, track issues, perform code reviews, and automate the software delivery process. With its self-hosted or cloud-based options, GitLab provides organizations with a flexible and integrated solution to enhance collaboration, streamline workflows, and accelerate software development.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-11T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"GitLab","permalink":"/RSA/blog/tags/git-lab"},{"inline":true,"label":"Collaboration","permalink":"/RSA/blog/tags/collaboration"},{"inline":true,"label":"DevOps","permalink":"/RSA/blog/tags/dev-ops"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":31.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"gitlab","title":"GitLab","date":"2023-10-11T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","GitLab","Collaboration","DevOps","Ticketing"],"keywords":["Collections","REST","SaaS","GitLab","Collaboration","DevOps","Ticketing"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"GitHub Enterprise Cloud","permalink":"/RSA/blog/github"},"nextItem":{"title":"SAP SuccessFactors","permalink":"/RSA/blog/sap-sf"}},"content":"import logoPNG from \'@site/static/img/logos/GitLab - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>GitLab is a DevOps platform that offers a comprehensive suite of tools for software development, version control, and CI/CD. It enables teams to manage repositories, track issues, perform code reviews, and automate the software delivery process. With its self-hosted or cloud-based options, GitLab provides organizations with a flexible and integrated solution to enhance collaboration, streamline workflows, and accelerate software development.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** Users are individuals who have an account on the GitLab SaaS platform. Each user has a unique username and email address associated with their account. Users can belong to multiple groups and have different roles within those groups or projects.\\r\\n\\r\\n**Groups** Groups in GitLab SaaS allow for organizing projects and users. A group can include multiple projects and members, enabling efficient management and collaboration across related repositories. Groups provide a way to apply permissions and access control collectively to a set of projects and users.\\r\\n\\r\\n**Roles** GitLab SaaS offers various roles that define the level of access and permissions a user has within a project or group. The common roles include:\\r\\n\\r\\n**Owner** The highest level of authority within a project or group. Owners have full control over the settings, members, and permissions.\\r\\n\\r\\n**Maintainer** Maintainers have administrative privileges within a project or group. They can manage the project, including repositories, branches, and permissions.\\r\\n\\r\\n**Developer** Developers have write access to the repository and can contribute code, create merge requests, and participate in project activities.\\r\\n\\r\\n**Reporter** Reporters have read-only access and can view project information, including source code, issues, and merge requests. They cannot make any modifications.\\r\\n\\r\\n**Guest** Guests have limited access and can only view basic project information without making any modifications.\\r\\n\\r\\n**Permissions** Permissions define what actions a user can perform within a project or group. These actions may include creating and modifying repositories, pushing changes, managing issues and merge requests, modifying project settings, and more. GitLab SaaS allows administrators, maintainers, and owners to configure and customize permissions for each role within the system.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the GitLab application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **GitLab**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. The endpoint uses a static token for authentication.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from GitLab<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v4/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.username`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>State</td>\\r\\n    <td>`$.*.state`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v4/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v4/groups/${Id}/members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.username`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the collected group attributes.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n13. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n14. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## GitLab: Setup\\r\\n### Personal Access Tokens (PAT)\\r\\nThis section explains the process of acquiring the authentication data required for collectors from GitLab.\\r\\n\\r\\n**Steps**\\r\\n1. Login to GitLab profile https://gitlab.com/-/profile\\r\\n2. Navigate to **Access Tokens**\\r\\n3. Configure the token details as provided below. The token has a maximum validity of 1 year.<br /><br />![Alt text](img/17.png)\\r\\n4. Click **Create personal access token**.\\r\\n5. Copy the token and save it for use within collector configuration.<br /><br />![Alt text](img/18.png) \\r\\n\\r\\n### OAuth\\r\\nThis section explains the process of setting up OAuth for collectors from GitLab\\r\\n\\r\\n**Steps**\\r\\n1. Login to GitLab profile https://gitlab.com/-/profile\\r\\n2. Navigate to **Applications**\\r\\n3. Configure the details as shown below.<br /><br />![Alt text](img/19.png)\\r\\n4. Click **Save Application**.\\r\\n5. Copy the application ID and secret and save it for use within collector configuration.<br /><br />![Alt text](img/20.png)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL034</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://docs.gitlab.com/ee/api/\\" target=\\"_blank\\">GitLab\'s REST API</a>"},{"id":"sap-sf","metadata":{"permalink":"/RSA/blog/sap-sf","source":"@site/blog/collections/sap-sf/sap-sf.mdx","title":"SAP SuccessFactors","description":"SAP SuccessFactors is a comprehensive cloud-based human capital management (HCM) solution that helps organizations streamline their HR processes. It covers areas such as employee onboarding, performance management, learning and development, compensation management, and workforce analytics. SuccessFactors provides tools to attract, develop, and retain talent, enabling businesses to optimize their workforce and drive better business outcomes through effective people management.Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-10-11T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SAP","permalink":"/RSA/blog/tags/sap"},{"inline":true,"label":"SuccessFactors","permalink":"/RSA/blog/tags/success-factors"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"},{"inline":true,"label":"Identities","permalink":"/RSA/blog/tags/identities"}],"readingTime":21.233333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"sap-sf","title":"SAP SuccessFactors","date":"2023-10-11T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SAP","SuccessFactors","HCM","Identities"],"keywords":["Collections","REST","SAP","SuccessFactors","HCM","Identities"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"GitLab","permalink":"/RSA/blog/gitlab"},"nextItem":{"title":"Amazon Redshift","permalink":"/RSA/blog/redshift"}},"content":"import logoPNG from \'@site/static/img/logos/SAP SuccessFactors - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>SAP SuccessFactors is a comprehensive cloud-based human capital management (HCM) solution that helps organizations streamline their HR processes. It covers areas such as employee onboarding, performance management, learning and development, compensation management, and workforce analytics. SuccessFactors provides tools to attract, develop, and retain talent, enabling businesses to optimize their workforce and drive better business outcomes through effective people management.<br /><br />Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** - Each individual who interacts with SAP SuccessFactors has a user account. Users can log in, access their personalized information, and perform various tasks based on their assigned roles and permissions.\\r\\n\\r\\n**Accounts** - Accounts are created for organizations or entities that use SAP SuccessFactors. An account typically represents a company, and it can have multiple users associated with it.\\r\\n\\r\\n**Groups** - Groups are used to organize users based on common characteristics or functional areas. They can be used to facilitate communication, assign permissions, or streamline HR processes for specific user segments.\\r\\n\\r\\n**Group Members** - Group members are individual users who are part of a specific group. Users can be added or removed from groups based on their roles and responsibilities within the organization.\\r\\n\\r\\n**Roles** - Roles define sets of permissions and access rights within the system. Roles are assigned to users or groups to determine the actions they can perform and the data they can access.\\r\\n\\r\\n**Role Members** - Role members are users who are assigned specific roles within the system. They inherit the permissions and access rights associated with those roles. Role assignments can be based on job functions, responsibilities, or organizational hierarchy.\\r\\n\\r\\n**Permissions** - Permissions define the level of access and actions that users or roles can perform within SAP SuccessFactors. They specify what functionalities, data, and features users are allowed to view, edit, or manage.\\r\\n\\r\\n> **API reference guide**\\r\\n> \\r\\n> [SAP Success Factors API Overview](https://api.sap.com/products/SAPSuccessFactors/overview) <LinkSvg />\\r\\n> \\r\\n> [SAP SuccessFactors API Reference Guide (OData V2)](https://help.sap.com/docs/SAP_SUCCESSFACTORS_PLATFORM/d599f15995d348a1b45ba5603e2aba9b/03e1fc3791684367a6a76a614a2916de.html) <LinkSvg />\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\nThis section explains the process for configuring an identity collector for the SAP SuccessFactors application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **SAP SuccessFactors**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. On the **User Data** page, enter the following configurations.<br /><br />![Alt text](img/4.png)<br />![Alt text](img/5.png)<br />![Alt text](img/6.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>/User</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>$format</td>\\r\\n    <td>`json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>$select</td>\\r\\n    <td>`userId,employeeClass,country,state,nickname,email,finalJobCode,homePhone,firstName,`<br />\\r\\n    `title,hireDate,location,username,jobCode, division,businessPhone,status,lastName,`<br />\\r\\n    `city,zipCode,addressLine1,department,manager/userId,empInfo/endDate,empInfo/startDate`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>$expand</td>\\r\\n    <td>`manager,empInfo`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>APIKey</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserId</td>\\r\\n    <td>`$.d.results.*.userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>FirstName</td>\\r\\n    <td>`$.d.results.*.firstName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastName</td>\\r\\n    <td>`$.d.results.*.lastName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.d.results.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Department</td>\\r\\n    <td>`$.d.results.*.department`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Title</td>\\r\\n    <td>`$.d.results.*.title`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>JobStatus</td>\\r\\n    <td>`$.d.results.*.status`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ManagerUserId</td>\\r\\n    <td>`$.d.results.*.manager.userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AddressLine1</td>\\r\\n    <td>`$.d.results.*.addressLine1`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Location</td>\\r\\n    <td>`$.d.results.*.location`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>WorkPhone</td>\\r\\n    <td>`$.d.results.*.businessPhone`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserName</td>\\r\\n    <td>`$.d.results.*.username`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>JobCode</td>\\r\\n    <td>`$.d.results.*.jobCode`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n7. Click **Next**. On the **Map Collector Attributes to User Attributes** page, enter the following configurations.<br /><br />![Alt text](img/7.png)\\r\\n9. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL035</span>"},{"id":"redshift","metadata":{"permalink":"/RSA/blog/redshift","source":"@site/blog/collections/redshift/redshift.mdx","title":"Amazon Redshift","description":"Amazon Redshift is a data warehouse product which forms part of the larger cloud-computing platform Amazon Web Services.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-10T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Amazon","permalink":"/RSA/blog/tags/amazon"},{"inline":true,"label":"AWS","permalink":"/RSA/blog/tags/aws"},{"inline":true,"label":"Redshift","permalink":"/RSA/blog/tags/redshift"}],"readingTime":15.233333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"redshift","title":"Amazon Redshift","date":"2023-10-10T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Amazon","AWS","Redshift"],"keywords":["Collections","SQL","Database","Amazon","AWS","Redshift"]},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"SAP SuccessFactors","permalink":"/RSA/blog/sap-sf"},"nextItem":{"title":"Workday","permalink":"/RSA/blog/workday"}},"content":"import logoPNG from \'@site/static/img/logos/Amazon Redshift - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Amazon Redshift is a data warehouse product which forms part of the larger cloud-computing platform Amazon Web Services.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n<Admonition type=\\"note\\">\\r\\nFor the purpose of this integration, we will use PostgreSQL JDBC driver, since Amazon Redshift officially supports this connection option. [Configuring a JDBC connection - Amazon Redshift](https://docs.aws.amazon.com/redshift/latest/mgmt/configure-jdbc-connection.html)\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Amazon Redshift application. We will use the PostgreSQL database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Amazon Redshift**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\n-- All Users\\r\\nSELECT pg_user.usename AS accountID\\r\\nFROM pg_user\\r\\nGROUP BY 1;\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)<br />\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Amazon Redshift account to user identity.\\r\\n```sql\\r\\n-- All Users\\r\\nSELECT pg_user.usename AS accountID,\\r\\n       pg_user.usename AS userID\\r\\nFROM pg_user\\r\\nGROUP BY 1;\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)<br />\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from Amazon Redshift.\\r\\n```sql\\r\\n-- All Groups\\r\\nSELECT pg_group.groname AS groupName\\r\\nFROM pg_group\\r\\nGROUP BY 1;\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)<br />\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from Amazon Redshift.\\r\\n```sql\\r\\n-- Users and Groups\\r\\nSELECT pg_group.groname AS groupName,\\r\\n       pg_user.usename AS accountID\\r\\nFROM pg_group, pg_user\\r\\nWHERE pg_user.usesysid = ANY (pg_group.grolist)\\r\\nGROUP BY 1,2;\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL033</span>"},{"id":"workday","metadata":{"permalink":"/RSA/blog/workday","source":"@site/blog/collections/workday/workday.mdx","title":"Workday","description":"Workday is a cloud-based software platform that offers financial management and human capital management services. It streamlines HR, payroll, and finance processes, providing businesses with efficient tools for workforce management and financial planning.Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-10-10T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"Workday","permalink":"/RSA/blog/tags/workday"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"},{"inline":true,"label":"RaaS","permalink":"/RSA/blog/tags/raa-s"},{"inline":true,"label":"Identities","permalink":"/RSA/blog/tags/identities"}],"readingTime":14.833333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"workday","title":"Workday","date":"2023-10-10T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","Workday","HCM","RaaS","Identities"],"keywords":["Collections","REST","Workday","HCM","RaaS","Identities"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Amazon Redshift","permalink":"/RSA/blog/redshift"},"nextItem":{"title":"Oracle HCM Cloud","permalink":"/RSA/blog/oracle-hcm"}},"content":"import logoPNG from \'@site/static/img/logos/Workday - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Workday is a cloud-based software platform that offers financial management and human capital management services. It streamlines HR, payroll, and finance processes, providing businesses with efficient tools for workforce management and financial planning.<br /><br />Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n<Admonition type=\\"note\\">\\r\\nThis integration is based on the ***Reporting as a Service (RaaS)*** offered by Workday and will use the out-of-the-box generic REST collectors to collect data. Workday RaaS allows greater flexibility in controlling what data needs to be collected from third party tools like RSA G&L without exposing sensitive data.\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\nThis section explains the process for configuring an account collector for the Workday (RaaS) application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Workday**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. On the **User Data** page, enter the following configurations.<br /><br />![Alt text](img/4.png)<br />![Alt text](img/5.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>Report URL</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>format</td>\\r\\n    <td>`json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserId</td>\\r\\n    <td>`$.Report_Entry[*].EmployeeID`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Company</td>\\r\\n    <td>`$.Report_Entry[*].Company`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n7. Click **Next**. On the **Map Collector Attributes to User Attributes** page, enter the following configurations.<br /><br />![Alt text](img/6.png)\\r\\n8. Click **Next**. On the **Attribute Evaluation** page, enter the following configurations.<br /><br />![Alt text](img/7.png)\\r\\n9. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Workday : Setup\\r\\nWorkday recommends using an Integration System User (ISU) for integration using third party services. RaaS requires basic authentication for REST API invocation.\\r\\n\\r\\nRefer to [Workato connectors - Workday integration connection | Workato Docs](https://docs.workato.com/connectors/workday/connection_setup.html) for more information on setup.\\r\\n\\r\\n## Troubleshooting\\r\\n\\r\\n> **Problem:**  The REST API call returns 400 : Validation error occurred. Report not\\r\\n>\\r\\n> **Solution:** Ensure that the ISU user that is used to collect is the owner of the Report in RaaS.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL032</span>"},{"id":"oracle-hcm","metadata":{"permalink":"/RSA/blog/oracle-hcm","source":"@site/blog/collections/oracle-hcm/oracle-hcm.mdx","title":"Oracle HCM Cloud","description":"Oracle Human Capital Management Cloud is a cloud-based software application suite for global HR, talent, and workforce management.This integration uses the REST APIs to collect accounts and roles. The RSA G&L generic REST collectors are not suitable to collect identity information from Oracle HCM (except basic attributes)Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-09T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Oracle","permalink":"/RSA/blog/tags/oracle"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"}],"readingTime":24,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"oracle-hcm","title":"Oracle HCM Cloud","date":"2023-10-09T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Oracle","HCM"],"keywords":["Collections","REST","SaaS","Oracle","HCM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Workday","permalink":"/RSA/blog/workday"},"nextItem":{"title":"Amazon AWS","permalink":"/RSA/blog/aws"}},"content":"import logoPNG from \'@site/static/img/logos/Oracle HCM - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Oracle Human Capital Management Cloud is a cloud-based software application suite for global HR, talent, and workforce management.<br />This integration uses the REST APIs to collect accounts and roles. The RSA G&L generic REST collectors are not suitable to collect identity information from Oracle HCM (except basic attributes)<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Oracle HCM Cloud application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Oracle HCM Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Oracle HCM Cloud<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/hcmRestApi/scim/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`username,active`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Resources[*].userName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserID</td>\\r\\n    <td>`$.Resources[*].[\\"urn:scim:schemas:extension:fa:2.0:faUser\\"].workerInformation.personNumber`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>isActive</td>\\r\\n    <td>`$.Resources[*].active`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/8.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/9.png)\\r\\n12. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/10.png)\\r\\n13. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect site roles and assignments from the Oracle HCM Cloud application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Oracle HCM Cloud**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/11.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). \\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Oracle HCM Cloud.<br /><br />![Alt text](img/12.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/13.png)<br />![Alt text](img/6.png)<br />![Alt text](img/14.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/hcmRestApi/scim/Roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,name,displayName,description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.Resources[*].name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources[*].id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DisplayName</td>\\r\\n    <td>`$.Resources[*].displayName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.Resources[*].description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Category</td>\\r\\n    <td>`$.Resources[*].category`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/15.png)<br />![Alt text](img/6.png)<br />![Alt text](img/16.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/hcmRestApi/scim/Roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`name,members.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.Resources.*.members.*.value`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/17.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/18.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL031</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://docs.oracle.com/en/cloud/saas/human-resources/20b/farws/index.html\\" target=\\"_blank\\">REST API for Oracle HCM Cloud - About the REST APIs</a>"},{"id":"aws","metadata":{"permalink":"/RSA/blog/aws","source":"@site/blog/collections/aws/aws.mdx","title":"Amazon AWS","description":"AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-09T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Amazon","permalink":"/RSA/blog/tags/amazon"},{"inline":true,"label":"AWS","permalink":"/RSA/blog/tags/aws"},{"inline":true,"label":"IAM","permalink":"/RSA/blog/tags/iam"}],"readingTime":23.233333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"aws","title":"Amazon AWS","date":"2023-10-09T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Amazon","AWS","IAM"],"keywords":["Collections","REST","SaaS","Amazon","AWS","IAM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Oracle HCM Cloud","permalink":"/RSA/blog/oracle-hcm"},"nextItem":{"title":"Epic EMR","permalink":"/RSA/blog/epic-emr"}},"content":"import logoPNG from \'@site/static/img/logos/AWS - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>AWS Identity and Access Management (IAM) enables you to manage access to AWS services and resources securely. Using IAM, you can create and manage AWS users and groups, and use permissions to allow and deny their access to AWS resources.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Amazon AWS IAM application. We will use the RSA G&L out of the box collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Amazon AWS**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.Enter the proxy details if applicable to your environment. Refer to [AWS Setup (Security Credentials)](#aws-setup-security-credentials) for more information on creating the API keys.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. The only available account attribute that can be collected is the *AccountName*.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the mapping screen, add the *AccountName* as the User Reference field.<br /><br />![img](./img/5.png)\\r\\n8. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](./img/6.png)\\r\\n9. Click **Next**. In the **Member Account Resolution Rules**, map the target collector for group members.<br /><br />![img](./img/7.png)\\r\\n10. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from Amazon AWS IAM application. We will use the RSA G&L out of the box collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Amazon AWS**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/8.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). \\r\\n6. Click **Next**.<br /><br />![Alt text](img/9.png)\\r\\n7. Click **Next**.\\r\\n8. Click **Next**.<br /><br />![Alt text](img/10.png)\\r\\n9. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n---\\r\\n## AWS Setup (Security Credentials)\\r\\nThis section explains the setup of security credentials for the service account that will be used with RSA G&L ADC and EDC.\\r\\n\\r\\n**Steps**\\r\\n1. Login to AWS Identity and Access Management (IAM) console https://console.aws.amazon.com/iam/home.\\r\\n2. Expand **Access Management** and click on **Policies**.<br /><br />![Alt text](img/11.png)\\r\\n3. Click on **Create Policy**.\\r\\n4. Click on *JSON* tab and paste the below policy.\\r\\n```json\\r\\n{\\r\\n    \\"Version\\": \\"2012-10-17\\",\\r\\n    \\"Statement\\": [\\r\\n        {\\r\\n            \\"Sid\\": \\"VisualEditor0\\",\\r\\n            \\"Effect\\": \\"Allow\\",\\r\\n            \\"Action\\": [\\r\\n                \\"iam:ListGroupsForUser\\",\\r\\n                \\"iam:ListUsers\\",\\r\\n                \\"iam:ListGroups\\"\\r\\n            ],\\r\\n            \\"Resource\\": \\"*\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n\\r\\n5. Click on **Review Policy**.<br /><br />![Alt text](img/12.png)\\r\\n6. Click **Create Policy**.\\r\\n7. Repeat *Steps 3 through 6* to create another policy *(RSA-IGL-EDC-Policy)* for EDC using the below policy definition.\\r\\n```json\\r\\n{\\r\\n    \\"Version\\": \\"2012-10-17\\",\\r\\n    \\"Statement\\": [\\r\\n        {\\r\\n            \\"Sid\\": \\"VisualEditor0\\",\\r\\n            \\"Effect\\": \\"Allow\\",\\r\\n            \\"Action\\": [\\r\\n                \\"iam:ListGroupPolicies\\",\\r\\n                \\"iam:ListAttachedRolePolicies\\",\\r\\n                \\"iam:ListRoles\\",\\r\\n                \\"iam:ListUserPolicies\\",\\r\\n                \\"iam:ListRolePolicies\\"\\r\\n            ],\\r\\n            \\"Resource\\": \\"*\\"\\r\\n        }\\r\\n    ]\\r\\n}\\r\\n```\\r\\n\\r\\n8. Expand **Access Management** and click on **Users**.<br /><br />![Alt text](img/13.png)\\r\\n9. Click on **Add User**.\\r\\n10. Provide a *user name* for the service account and select *Programmatic Access.*<br /><br />![Alt text](img/14.png)\\r\\n11. Click **Next: Permissions**\\r\\n12. Under **Set Permissions**, click on *Attach existing policies directly*\\r\\n13. Select the two (2) policies created earlier for ADC & EDC.\\r\\n14. Click **Next:Tags.**\\r\\n15. Click **Next :Review**\\r\\n16. Click **Create User**.\\r\\n17. Click on the newly created user and navigate to the *Security Credentials* tab.\\r\\n18. Click **Create Access Key**.<br /><br />![Alt text](img/15.png)\\r\\n19. Click on **Download.csv** file to save the *Access Key* and *Secret Key*. We will need this file during the ADC and EDC configurations in RSA G&L.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL030</span>"},{"id":"epic-emr","metadata":{"permalink":"/RSA/blog/epic-emr","source":"@site/blog/collections/epic-emr/epic-emr.mdx","title":"Epic EMR","description":"Epic Electronic Medical Records (EMR) solution that is widely used by hospitals. To collect data from this application, we use Epic Clarity.Epic EMR is a 3NF data warehouse and relational database (Oracle or Microsoft SQL database) designed for database developers. It enables users to create data-intensive reports without modifying the user database, identify misuse of medications, as well as reduce the incidence of medical error. Features include data distribution, label shift management, Peer-to-Peer Evaluations, and BusinessObjects Dashboard.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-08T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Epic","permalink":"/RSA/blog/tags/epic"},{"inline":true,"label":"EMR","permalink":"/RSA/blog/tags/emr"},{"inline":true,"label":"Clarity","permalink":"/RSA/blog/tags/clarity"}],"readingTime":24.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"epic-emr","title":"Epic EMR","date":"2023-10-08T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Epic","EMR","Clarity"],"keywords":["Collections","SQL","Database","Epic","EMR"]},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"Amazon AWS","permalink":"/RSA/blog/aws"},"nextItem":{"title":"ServiceNow","permalink":"/RSA/blog/snaow"}},"content":"import logoPNG from \'@site/static/img/logos/Epic - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Epic Electronic Medical Records (EMR) solution that is widely used by hospitals. To collect data from this application, we use Epic Clarity.<br /><br />Epic EMR is a 3NF data warehouse and relational database (Oracle or Microsoft SQL database) designed for database developers. It enables users to create data-intensive reports without modifying the user database, identify misuse of medications, as well as reduce the incidence of medical error. Features include data distribution, label shift management, Peer-to-Peer Evaluations, and BusinessObjects Dashboard.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Epic Objects\\r\\n\\r\\n![img](./img/a1.png)\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Epic EMR application. We will use the SQL Server database collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Epic EMR**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the SQL Server database details. Use the Test Connection to make sure the connection details are accurate. Use the latest Microsoft JDBC Driver for SQL Server if NTLM authentication is required.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect. For the purpose of illustration we will collect accounts, groups and user to account mapping from Epic EMR.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT\\r\\n  EMP.SYSTEM_LOGIN EMP,\\r\\n  EMP.PROV_ID AS SER,\\r\\n  EMP.NAME AS displayName,\\r\\n  EMP.USER_ID userID,\\r\\n  CASE\\r\\n    WHEN USER_STATUS_C = 1 THEN 0\\r\\n    WHEN USER_STATUS_C = 2 THEN 1\\r\\n    ELSE \'\'\\r\\n  END AS isDisabled,\\r\\n  LAST_PW_UPDATE AS laspPasswordSetDate,\\r\\n  LAST_ACCS_DATETIME AS lastLoginDate\\r\\nFROM CLARITY_EMP EMP\\r\\nWHERE EMP.SYSTEM_LOGIN IS NOT NULL\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)<br />\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Epic EMR account to user identity.\\r\\n```sql\\r\\nSELECT\\r\\n  EMP.SYSTEM_LOGIN EMP,\\r\\n  EMP.USER_ID userID\\r\\nFROM CLARITY_EMP EMP\\r\\nWHERE EMP.SYSTEM_LOGIN IS NOT NULL\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n9. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/6.png)<br />\\r\\n10. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from Epic EMR application. We will use the SQL Server database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Epic EMR**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/7.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Epic EMR.<br /><br />![Alt text](img/8.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/9.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect admin roles from Epic EMR.\\r\\n```sql\\r\\nSELECT DISTINCT\\r\\n  TEMPLT_DSPLY_TITLE AS templateName,\\r\\n  USER_ID AS template,\\r\\n  TEMPLT_OWNER_PRIM_C AS owner\\r\\nFROM CLARITY_EMP_2\\r\\nWHERE TEMPLT_DSPLY_TITLE IS NOT NULL\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/10.png)<br />\\r\\n9. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to roles.\\r\\n```sql\\r\\nSELECT \\r\\n  TEMPLATE.LNK_TEMPLT_ID as action, \\r\\n  EMP.SYSTEM_LOGIN as account\\r\\nFROM \\r\\n  CLARITY_EMP EMP \\r\\n  LEFT OUTER JOIN EMP_AVAIL_TEMPLT TEMPLATE ON TEMPLATE.USER_ID = EMP.USER_ID \\r\\nWHERE \\r\\n  TEMPLATE.LNK_TEMPLT_ID is not null \\r\\n  and EMP.SYSTEM_LOGIN is not null \\r\\nUNION \\r\\nSELECT \\r\\n  SUBTEMPLATE.APPLD_SUBTMPLT_ID as action, \\r\\n  EMP.SYSTEM_LOGIN as account \\r\\nFROM \\r\\n  CLARITY_EMP EMP \\r\\n  LEFT OUTER JOIN SUBTEMPLATES SUBTEMPLATE ON SUBTEMPLATE.USER_ID = EMP.USER_ID \\r\\nWHERE \\r\\n  SUBTEMPLATE.APPLD_SUBTMPLT_ID is not null \\r\\n  and EMP.SYSTEM_LOGIN is not null\\r\\n```\\r\\n10. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>Epic EMR ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL028</span>"},{"id":"snaow","metadata":{"permalink":"/RSA/blog/snaow","source":"@site/blog/collections/snow/snow.mdx","title":"ServiceNow","description":"ServiceNow is a cloud-based platform offering IT service management, enabling organizations to streamline workflows, automate tasks, and enhance service delivery. It encompasses various modules for IT, HR, customer service, and more, promoting efficiency and collaboration within enterprises.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-08T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"ITSM","permalink":"/RSA/blog/tags/itsm"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"SNOW","permalink":"/RSA/blog/tags/snow"},{"inline":true,"label":"ServiceNow","permalink":"/RSA/blog/tags/service-now"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":31.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"snaow","title":"ServiceNow","date":"2023-10-08T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","ITSM","SaaS","SNOW","ServiceNow","Ticketing"],"keywords":["Collections","REST","ITSM","SaaS","SNOW","ServiceNow","Ticketing"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Epic EMR","permalink":"/RSA/blog/epic-emr"},"nextItem":{"title":"RSA Authentication Manager","permalink":"/RSA/blog/securid"}},"content":"import logoPNG from \'@site/static/img/logos/ServiceNow - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>ServiceNow is a cloud-based platform offering IT service management, enabling organizations to streamline workflows, automate tasks, and enhance service delivery. It encompasses various modules for IT, HR, customer service, and more, promoting efficiency and collaboration within enterprises.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the ServiceNow application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **ServiceNow**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)<br /><br />\\r\\n6. If authentication type [^Authentication] is Basic, enter the credentials as shown below.<br /><br />![img](img/3-1.png)\\r\\n7. Click **Next**. Select the data types that the collector will be collecting from ServiceNow<br /><br />![img](img/4.png)\\r\\n8. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/now/table/sys_user`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_fields</td>\\r\\n    <td>`sys_id,name,employee_number,user_name,email,first_name,last_name,last_login_time,active`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.result[*].user_name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>EmployeeNumber</td>\\r\\n    <td>`$.result[*].employee_number`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.result[*].active`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.result[*].email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastLoginTime</td>\\r\\n    <td>`$.result[*].last_login_time`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SysID</td>\\r\\n    <td>`$.result[*].sys_id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/now/table/sys_user_group`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_fields</td>\\r\\n    <td>`sys_id,name,descraiption,active,sys_updated_by`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_query</td>\\r\\n    <td>`active=true`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.result[*].name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>SysID</td>\\r\\n    <td>`$.result[*].sys_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.result[*].description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Owner</td>\\r\\n    <td>`$.result[*].sys_updated_by`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/now/table/sys_user_grmember`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_fields</td>\\r\\n    <td>`user,group`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.result[*].user.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.result[*].group.value`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n13. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n14. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n15. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n16. Click **Next**. In the **Group Owner Resolution Rules**, map the owner to user attribute.<br /><br />![Alt text](img/16-1.png)\\r\\n17. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from ServiceNow application. We will use the RSA G&L Generic REST collector [^API] for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **ServiceNow**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from ServiceNow.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/6.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/now/table/sys_user_role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_fields</td>\\r\\n    <td>`sys_id,sys_updated_by,name,description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_exclude_reference_link</td>\\r\\n    <td>`true`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_query</td>\\r\\n    <td>`ORDERBYsys_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.result[*].name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>RoleSysID</td>\\r\\n    <td>`$.result[*].sys_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.result[*].description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Owner</td>\\r\\n    <td>`$.result[*].sys_updated_by`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/now/table/sys_user_has_role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_fields</td>\\r\\n    <td>`role,user`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_exclude_reference_link</td>\\r\\n    <td>`true`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>sysparm_query</td>\\r\\n    <td>`roleISNOTEMPTY^userISNOTEMPTY^ORDERBYsys_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.result[*].role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.result[*].user`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL029</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://api.freshservice.com/\\" target=\\"_blank\\">API Reference</a>\\r\\n[^Authentication]: <LinkSvg /><a href=\\"https://api.freshservice.com/#authentication\\" target=\\"_blank\\">ServiceNow authentication</a>"},{"id":"securid","metadata":{"permalink":"/RSA/blog/securid","source":"@site/blog/collections/securid/securid.mdx","title":"RSA Authentication Manager","description":"RSA Authentication Manager is a robust solution for secure access control. It employs RSA\'s proprietary SecureID tokens, offering two-factor authentication. Users enter a unique token-generated code along with their password, enhancing security by requiring both something they know and something they have. The system ensures secure access to networks and applications.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u2714\ufe0f","date":"2023-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"RSA","permalink":"/RSA/blog/tags/rsa"},{"inline":true,"label":"Authentication Manager","permalink":"/RSA/blog/tags/authentication-manager"},{"inline":true,"label":"SecurID","permalink":"/RSA/blog/tags/secur-id"},{"inline":true,"label":"Authentication","permalink":"/RSA/blog/tags/authentication"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"}],"readingTime":58.266666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"securid","title":"RSA Authentication Manager","date":"2023-10-07T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","RSA","Authentication Manager","SecurID","Authentication","Database"],"keywords":["Collections","SQL","RSA","Authentication Manager","SecurID","Authentication","Database"]},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"ServiceNow","permalink":"/RSA/blog/snaow"},"nextItem":{"title":"IBM iSeries (AS400)","permalink":"/RSA/blog/as400"}},"content":"import logoPNG from \'@site/static/img/logos/RSA - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>RSA Authentication Manager is a robust solution for secure access control. It employs RSA\'s proprietary SecureID tokens, offering two-factor authentication. Users enter a unique token-generated code along with their password, enhancing security by requiring both something they know and something they have. The system ensures secure access to networks and applications.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u2714\ufe0f</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Admin Roles** in RSA Authentication Manager define permissions and responsibilities for system administrators, allowing them to manage user authentication and security settings.\\r\\n\\r\\n**Tokens** in RSA Authentication Manager are physical or software-based devices that generate one-time passcodes. Users enter these passcodes during authentication, enhancing security.\\r\\n\\r\\n**Risk-Based Authentication** in RSA Authentication Manager evaluates various factors such as user location, device, and behavior patterns to assess the risk level. Based on this assessment, it adapts the authentication process, adding or reducing security measures accordingly to mitigate potential risks.\\r\\n\\r\\n<Admonition type=\\"info\\" title=\\"Assumptions\\">\\r\\n1. The PostgreSQL JDBC driver has been uploaded via the admin console.\\r\\n2. The RSA Authentication Manager certificate `RSAAMTrustedRootSSLCA.crt` has been imported via admin console.\\r\\n3. To enable RSA Identity G&L to connect to PostgreSQL database, a <u>read only user</u> has to be created using the `rsautil manage-readonly-dbusers` tool. Refer to SQL Access to the RSA Authentication Manager Database section in the RSA Authentication Manager 8.x Developer\'s Guide for detailed information.\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\nThe first step in collecting accounts, tokens information from RSA Authentication Manager is to create a placeholder application to store this information in RSA Identity G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below. If you intend to collect the account status and/or the locked status of the account configure the highlighted options.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring a account collector for the RSA Authentication Manager application. We will use the PostgreSQL database collector for this purpose. \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **RSA Authentication Manager**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the PostgreSQL database connection details. Use the Test Connection to make sure the connection details are accurate.<br /><br />![img](img/3.png)<br />\\r\\n6. Click **Next**. Select the appropriate data that you intend to collect. For the purpose of illustration we will collect accounts, groups and user to account mapping from RSA Authentication Manager.<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT DISTINCT principalData.loginuid AS account\\r\\n     ,login.login_date AS login_date\\r\\n     ,CONCAT (principal.first_name, \' \', principal.last_name) AS full_name\\r\\n     --1 = enabled, 2 = disabled \\r\\n     ,CASE\\r\\n        WHEN principalData.lockout_flag = \'1\' THEN \'1\'\\r\\n        ELSE \'0\'\\r\\n      END AS account_locked\\r\\n     ,securityDomain.NAME AS securityDomain_domain\\r\\n     ,CASE\\r\\n        WHEN principalData.security_ques_answers IS NULL THEN \'0\'\\r\\n        ELSE \'1\'\\r\\n      END AS securityDomain_questions,\\r\\n       --1 = user is enabled, 0 = user is disabled\\r\\n     CASE\\r\\n        WHEN principalData.enable_flag = \'1\' THEN \'0\'\\r\\n        ELSE \'1\'\\r\\n      END AS account_status     \\r\\n      --1 = user has administrative roles assigned\\r\\n       --0 = user does not have any administrative roles assigned\\r\\n     ,principalData.administrator_flag AS privileged\\r\\n--Basic user settings\\r\\nFROM IMS_PRINCIPAL principal\\r\\n--Detailed information about the user\\r\\nFULL JOIN IMS_PRINCIPAL_DATA principalData\\r\\n     ON principal.loginuid = principalData.loginuid\\r\\n--Information about the security domain\\r\\nJOIN IMS_SECURITY_DOMAIN securityDomain\\r\\n     ON principalData.owner_id = securityDomain.id\\r\\n--Last logon date and time of the user      \\r\\nJOIN IMS_PRINCIPAL_LOGIN_DATE login\\r\\n     ON principalData.id = login.principal_id \u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)<br />\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the RSA Authentication Manager account to user identity.\\r\\n```sql\\r\\nSELECT DISTINCT\\r\\n     loginuid,loginuid AS account\\r\\nFROM \\r\\n     rsa_rep.IMS_PRINCIPAL_DATA \\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)<br />\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from RSA Authentication Manager.\\r\\n```sql\\r\\nSELECT DISTINCT\\r\\n     (name) AS \\"group\\"\\r\\n     ,description\\r\\nFROM\\r\\n     rsa_rep.IMS_GROUP_DATA\\r\\n-- Optional Filter \\r\\nWHERE  \\r\\n     identity_src_id = \'The Identity Source ID\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)<br />\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from RSA Authentication Manager.\\r\\n```sql\\r\\nSELECT \\r\\n     accounts.loginuid AS account\\r\\n    ,GROUPS.name AS \\"group\\"\\r\\nFROM rsa_rep.IMS_PRINCIPAL_DATA accounts\\r\\nJOIN rsa_rep.IMS_PRINCIPAL_GROUP groupMembership\\r\\n     ON accounts.id = groupMembership.principal_id\\r\\nJOIN rsa_rep.IMS_GROUP_DATA GROUPS\\r\\n     ON groupMembership.group_id = GROUPS.id\\r\\n-- Optional Filter\\r\\nWHERE\\r\\n     GROUPS.identity_src_id = \'The Identity Source Identitfier\' \\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Target Collector</th>\\r\\n    <th>User Attribute</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>Users</th>\\r\\n    <th>User Id</th>\\r\\n  </tr>\\r\\n</table>\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Target Collector</th>\\r\\n    <th>Account Attribute</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>RSA Authentication Manager ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector : Admin Roles\\r\\nThis section explains the process for configuring a entitlement collector to collect admin roles from RSA Authentication Manager application. We will use the PostgreSQL database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **RSA Authentication Manager**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/8.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from RSA Authentication Manager.<br /><br />![Alt text](img/9.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/10.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect admin roles from RSA Authentication Manager.\\r\\n```sql\\r\\nSELECT \\r\\n     name AS AppRole\\r\\n     ,description\\r\\nFROM\\r\\n     IMS_ADMIN_ROLE\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/11.png)<br />\\r\\n9. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to admin roles.\\r\\n```sql\\r\\nSELECT \\r\\n     users.loginuid AS Account\\r\\n     ,ROLES.name AS AppRole\\r\\nFROM IMS_PRINCIPAL_DATA users\\r\\nJOIN IMS_PRINCIPAL_ADMIN_ROLE admins\\r\\n     ON users.id = admins.principal_id\\r\\nJOIN IMS_ADMIN_ROLE ROLES\\r\\n     ON admins.admin_role_id = ROLES.id\\r\\n```\\r\\n10. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>RSA Authentication Manager ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector : Tokens\\r\\nThis section explains the process for configuring a entitlement collector to collect tokens as account entitlements from RSA Authentication Manager application. We will use the PostgreSQL database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **RSA Authentication Manager**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/12.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from RSA Authentication Manager.<br /><br />![Alt text](img/13.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/14.png)\\r\\n8. Click **Next**. \\r\\n9. Click **Next** on the **Resource Data** page.\\r\\n10. Click **Next**. Under **Resource Entitlement Data** section, use the following query to collect tokens information from RSA Authentication Manager.\\r\\n```sql\\r\\nSELECT \\r\\n     tokens.serial_number AS RESOURCE\\r\\n     ,CASE\\r\\n        WHEN tokens.token_type = \'0\' THEN \'Std Card\'\\r\\n        WHEN tokens.token_type = \'1\' THEN \'PIN Pad\'\\r\\n        WHEN tokens.token_type = \'2\' THEN \'SID 700\'\\r\\n        WHEN tokens.token_type = \'4\' THEN \'Soft Token\'\\r\\n        WHEN tokens.token_type = \'9\' THEN \'SID 800\'\\r\\n        WHEN tokens.token_type = \'10\' THEN \'Flex Card\'\\r\\n      END               AS Action\\r\\n     ,tokens.token_shutdown_date AS Expiration\\r\\n     ,tokenDetails.last_login_date     AS lastlogin,\\r\\n     CASE\\r\\n        WHEN tokens.is_enabled = \'true\' OR tokens.is_enabled = \'t\' THEN \'true\'\\r\\n        ELSE \'false\'\\r\\n     END as tokenEnabled\\r\\nFROM   AM_TOKEN tokens\\r\\n     ,AM_TOKEN_OOB tokenDetails\\r\\nWHERE  tokens.id = tokenDetails.am_token_id\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to tokens.\\r\\n```sql\\r\\nSELECT users.loginuid   AS Account\\r\\n     ,serial_number AS RESOURCE\\r\\n     ,CASE\\r\\n        WHEN token_type = \'0\' THEN \'Std Card\'\\r\\n        WHEN token_type = \'1\' THEN \'PIN Pad\'\\r\\n        WHEN token_type = \'2\' THEN \'SID 700\'\\r\\n        WHEN token_type = \'4\' THEN device.family_key\\r\\n        WHEN token_type = \'9\' THEN \'SID 800\'\\r\\n        WHEN token_type = \'10\' THEN \'Flex Card\'\\r\\n      END         AS Action\\r\\nFROM IMS_PRINCIPAL_DATA users\\r\\nJOIN AM_TOKEN tokens\\r\\n     ON users.id = tokens.principal_id\\r\\nLEFT JOIN AM_SW_TOKEN_DEVICE_TYPES device\\r\\n     ON tokens.sw_token_device_type_id = device.id\\r\\n```\\r\\n12. Click **Next**. In the Account Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>RSA Authentication Manager ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n13. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector : Risk Based Authentication\\r\\nThis section explains the process for configuring a entitlement collector to collect information regarding Risk Based Authentication (RBA) being enabled for an account from RSA Authentication Manager application. We will use the PostgreSQL database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **RSA Authentication Manager**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/15.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from RSA Authentication Manager.<br /><br />![Alt text](img/16.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/17.png)\\r\\n8. Click **Next**. \\r\\n9. Click **Next** on the **Resource Data** page.\\r\\n10. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to tokens.\\r\\n```sql\\r\\nSELECT loginuid AS Account\\r\\n     ,\'RBA\'   AS RESOURCE\\r\\n     ,CASE\\r\\n        WHEN SUBSTR (authenticator_bit_flags, 7, 1) = \'1\' THEN \'Yes\'\\r\\n        ELSE \'No\'\\r\\n     END     AS Action\\r\\nFROM\\r\\n     IMS_PRINCIPAL_DATA\\r\\n```\\r\\n11. Click **Next**. In the Account Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>RSA Authentication Manager ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n12. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL027</span>"},{"id":"as400","metadata":{"permalink":"/RSA/blog/as400","source":"@site/blog/collections/as400/as400.mdx","title":"IBM iSeries (AS400)","description":"The IBM AS400 is another name for the IBM Power Systems server line, started in the late 1980s. Technically, AS400 is the name of the first generation, and the computer is now called the IBM iSeries. The IBM AS400 is designed to provide extremely high redundancy and uptime. It is traditionally run on-premise, using one of three mature operating systems, optimized for the architecture: OS/400 and AIX.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u2714\ufe0f","date":"2023-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"IBM","permalink":"/RSA/blog/tags/ibm"},{"inline":true,"label":"iSeries","permalink":"/RSA/blog/tags/i-series"},{"inline":true,"label":"AS400","permalink":"/RSA/blog/tags/as-400"}],"readingTime":41.666666666666664,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"as400","title":"IBM iSeries (AS400)","date":"2023-10-07T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","IBM","iSeries","AS400"],"keywords":["Collections","SQL","Database","IBM","iSeries","AS400"]},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"RSA Authentication Manager","permalink":"/RSA/blog/securid"},"nextItem":{"title":"Miro","permalink":"/RSA/blog/miro"}},"content":"import logoPNG from \'@site/static/img/logos/IBM iSeries (AS400) - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>The IBM AS400 is another name for the IBM Power Systems server line, started in the late 1980s. Technically, AS400 is the name of the first generation, and the computer is now called the IBM iSeries. The IBM AS400 is designed to provide extremely high redundancy and uptime. It is traditionally run on-premise, using one of three mature operating systems, optimized for the architecture: OS/400 and AIX.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u2714\ufe0f</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the IBM iSeries (AS400) application. We will use the Oracle database collector for this purpose. \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **IBM iSeries (AS400).**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td><span class=\\"header-2-text\\">Driver</span></td>\\r\\n    <td>com.ibm.as400.access.AS400JDBCDriver</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td><span class=\\"header-2-text\\">URL</span></td>\\r\\n    <td>jdbc:as400://HOST_NAME:8471;date format=iso;errors=full;naming=sql;prompt=false;time format=iso;transaction isolation=none;translate binary=true;</td>\\r\\n  </tr>\\r\\n</table>\\r\\n5. Click **Next** and enter the database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT \\r\\n  -- Profile\\r\\n  trim(UPUPRF) AS accountName, \\r\\n  trim(UPTEXT) AS description, \\r\\n  CASE UPSTAT WHEN \'*DISABLED\' THEN 1 ELSE 0 AS isDisabled \\r\\nFROM \\r\\n  DSPUSRPRF \\r\\nWHERE \\r\\n  UPTEXT NOT like \'%Group%\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)<br />\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the IBM iSeries (AS400) account to user identity.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT -- Profile\\r\\n  trim(UPUPRF) AS accountName, \\r\\n  trim(UPUPRF) AS userID \\r\\nFROM \\r\\n  DSPUSRPRF \\r\\nWHERE \\r\\n  UPTEXT NOT LIKE \'%Group%\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)<br />\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from IBM iSeries (AS400).\\r\\n```sql\\r\\nSELECT \\r\\n  distinct trim(UPUPRF) AS groupName, \\r\\n  trim(UPTEXT) AS description \\r\\nFROM \\r\\n  DSPUSRPRF \\r\\nWHERE \\r\\n  UPTEXT LIKE \'%Group%\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from IBM iSeries (AS400).\\r\\n```sql\\r\\nSELECT \\r\\n  trim(UPUPRF) AS accountName, \\r\\n  UPSUPG AS groupName \\r\\nFROM \\r\\n  DSPUSRPRF\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from IBM iSeries (AS400) application. We will use the Oracle database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **IBM iSeries (AS400)**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/10.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from IBM iSeries (AS400).<br /><br />![Alt text](img/11.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/12.png)\\r\\n8. Click **Next**. Under **Resource Data** section, use the following query to collect roles from IBM iSeries (AS400).\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) AS resource \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/13.png)<br />\\r\\n9. Click **Next**. On the **Resource-Action Entitlements Data** section, enter the query below to collect resource action mappings for roles.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*ALLOBJ\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*ALLOBJ%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*AUDIT\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*AUDIT%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*IOSYSCFG\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*IOSYSCFG%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'* JOBCTL\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*JOBCTL%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'* SAVSYS\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SAVSYS%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SECADM\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%* SECADM%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SERVICE\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SERVICE%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SPLCTL\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SPLCTL%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*NONE\' as action \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*NONE%\'\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n10. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to roles.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*ALLOBJ\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*ALLOBJ%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*AUDIT\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*AUDIT%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*IOSYSCFG\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*IOSYSCFG%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'* JOBCTL\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*JOBCTL%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'* SAVSYS\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SAVSYS%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SECADM\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%* SECADM%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SERVICE\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SERVICE%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*SPLCTL\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*SPLCTL%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT trim(UPUSCL) as resource, \'*NONE\' as action, trim(UPUPRF) as LID \\r\\nFROM \\r\\n  QGPL.DSPUSRPRF \\r\\nWHERE \\r\\n  UPSPAU LIKE \'%*NONE%\'\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n10. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table>\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IBM iSeries (AS400) ADC</td>\\r\\n    <td>Account Name</td>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n## Setup\\r\\n### AS400\\r\\nUser profile information available on the AS400 is not automatically maintained in an accessible table format. The table needs to be created and refreshed by running a simple command on the AS400.  Typically, the command is scheduled to be run daily, before collection is initiated from the RSA G&L.  \\r\\n\\r\\nA JDBC based AS400 specific collector can collect and parse the user account data for both account and entitlement information.  A user account with read access is required to the AS400.\\r\\n\\r\\nThe high-level steps are as follows:\\r\\n1. Generate the user table by executing the following command.\\r\\n>\\r\\n> **DSPUSRPRF USRPRF(*ALL) TYPE(*BASIC) OUTPUT(*OUTFILE) OUTFILE(QGPL/DSPUSRPRF)**\\r\\n>\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n\\r\\n2. Set up a batch job to run the above command daily, before scheduled collections run on RSA G&L.\\r\\n3. Create a user account that has read access to the table: **QGPL/DSPUSRPRF**.\\r\\n\\r\\n### RSA G&L\\r\\nThis integration uses the AS400 JDBC Driver (`com.ibm.as400.access.AS400JDBCDriver`) to connect to the database to extract information. The high level steps are as follows:\\r\\n\\r\\n1. Download the AS400 JDBC driver from https://sourceforge.net/projects/jt400/  and extract the jt400.jar file.<br /><br />![img](img/14.png)\\r\\n2. Add the jar file to ACM by uploading via the admin console.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL026</span>"},{"id":"miro","metadata":{"permalink":"/RSA/blog/miro","source":"@site/blog/collections/miro/miro.mdx","title":"Miro","description":"Miro, a digital collaboration platform, empowers teams to innovate together regardless of their locations. With an intuitive interface, it facilitates real-time brainstorming, visual planning, and sharing of ideas. Miro\'s virtual whiteboards, sticky notes, and interactive tools foster creativity, making it an essential tool for modern teamwork, boosting productivity and idea exchange across diverse projects and industries.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-07T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Miro","permalink":"/RSA/blog/tags/miro"},{"inline":true,"label":"Collaboration","permalink":"/RSA/blog/tags/collaboration"},{"inline":true,"label":"Productivity","permalink":"/RSA/blog/tags/productivity"}],"readingTime":43.43333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"miro","title":"Miro","date":"2023-10-07T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Miro","Collaboration","Productivity"],"keywords":["Collections","REST","SaaS","Miro","Collaboration","Productivity"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"IBM iSeries (AS400)","permalink":"/RSA/blog/as400"},"nextItem":{"title":"WebFOCUS BI & Analytics","permalink":"/RSA/blog/webfocus"}},"content":"import logoPNG from \'@site/static/img/logos/Miro - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Miro, a digital collaboration platform, empowers teams to innovate together regardless of their locations. With an intuitive interface, it facilitates real-time brainstorming, visual planning, and sharing of ideas. Miro\'s virtual whiteboards, sticky notes, and interactive tools foster creativity, making it an essential tool for modern teamwork, boosting productivity and idea exchange across diverse projects and industries.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n> Miro support both REST API [^API] and SCIM APIs [^SCIM]. For the purposes of this article, we will use the SCIM APIs.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Miro application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Miro**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Miro<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/scim/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,userName,active`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.Resources.*.userName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.Resources.*.active`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/scim/Groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,displayName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.Resources.*.displayName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/scim/Groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,members.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.Resources.*.members.*.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect user roles and assignments from the Miro application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Miro**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Miro.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/MiroRolesv1.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.roles.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://miro.com/api/v1/scim/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>attributes</td>\\r\\n    <td>`id,roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.Resources.*.roles.*.value`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.Resources.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\n### SCIM\\r\\nThis section explains the process of setting up Miro for integration with G&L using the SCIM APIs.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Miro dashboard https://miro.com/app/dashboard/\\r\\n2. Click on profile and select **Settings**.<br /><br />![Alt text](img/25.png)\\r\\n3. Navigate to **Security & compliance > Authentication** page and enable SSO/SAML feature.<br /><br />![Alt text](img/26.png)\\r\\n4. Navigate to **Account > Enterprise integrations** page and copy the ***Base URL*** and ***API token***<br /><br />![Alt text](img/27.png)\\r\\n---\\r\\n### OAuth2\\r\\nThis section explains the process of setting up Miro for integration with G&L using OAuth2 authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Miro dashboard https://miro.com/app/dashboard/\\r\\n2. Click on profile and select **Settings**.<br /><br />![Alt text](img/25.png)\\r\\n3. Under **Profile Settings**, click on **Integrations** tab.<br /><br />![Alt text](img/28.png)\\r\\n4. Click on **Create New App**.\\r\\n5. Provide a suitable name for the application.\\r\\n6. Select a Developer Team to place the application in. If you do not have a team, then got to **Teams** under **User Management** and create developer team.<br />![Alt text](img/29.png)\\r\\n7. Click on **Create App**.\\r\\n8. Copy the `Client ID` and `Client Secret`.<br /><br />![Alt text](img/30.png)\\r\\n9. Add the G&L callback URL to redirect to `https://instance/aveksa/oauth/callback`<br /><br />![Alt text](img/31.png)\\r\\n10. Provide the necessary permissions to the app and click **Install App and Get OAuth Token**.<br /><br />![Alt text](img/32.png)\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC to acquire the OAuth2 token dynamically from Miro.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>CLIENT_ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>CLIENT_SECRET</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://instance.aha.io/oauth/authorize`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://instance.aha.io/oauth/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td></td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/33.png)\\r\\n6. Login to Miro account.<br />![Alt text](img/34.png)![Alt text](img/35.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/36.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL025</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developers.miro.com/reference/api-reference\\" target=\\"_blank\\">REST API 2.0</a>\\r\\n[^SCIM]: <LinkSvg /><a href=\\"https://developers.miro.com/docs/scim\\" target=\\"_blank\\">SCIM API</a>"},{"id":"webfocus","metadata":{"permalink":"/RSA/blog/webfocus","source":"@site/blog/collections/webfocus/webfocus.mdx","title":"WebFOCUS BI & Analytics","description":"WebFOCUS is a cloud-based / on premise business intelligence (BI) and analytics platform that offers analytical tools, applications, reports and documents for business stakeholders such as management teams, analysts, line-of-business workers, partners and customers. The solution also provides other capabilities including data discovery, location intelligence, predictive and prescriptive analytics, BI smart search and natural language search.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"WebFOCUS","permalink":"/RSA/blog/tags/web-focus"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"},{"inline":true,"label":"Business Intelligence","permalink":"/RSA/blog/tags/business-intelligence"}],"readingTime":24.733333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"webfocus","title":"WebFOCUS BI & Analytics","date":"2023-10-06T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","WebFOCUS","Database","Analytics","Business Intelligence"],"keywords":["Collections","SQL","WebFOCUS","Database","Analytics","Business Intelligence"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Miro","permalink":"/RSA/blog/miro"},"nextItem":{"title":"Deltek CostPoint","permalink":"/RSA/blog/deltek"}},"content":"import logoPNG from \'@site/static/img/logos/WebFOCUS - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>WebFOCUS is a cloud-based / on premise business intelligence (BI) and analytics platform that offers analytical tools, applications, reports and documents for business stakeholders such as management teams, analysts, line-of-business workers, partners and customers. The solution also provides other capabilities including data discovery, location intelligence, predictive and prescriptive analytics, BI smart search and natural language search.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n<Admonition type=\\"note\\">\\r\\nThis document covers the integration with On Premise version of the product with repository as Oracle database\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\nThe first step in collecting accounts, tokens information from WebFOCUS is to create a placeholder application to store this information in RSA Identity G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the WebFOCUS application. We will use the Oracle database collector for this purpose. \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **WebFOCUS BI & Analytics**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  userid AS account, \\r\\n  username AS userID, \\r\\n  email, \\r\\n  CASE isactive WHEN 1 THEN 0 ELSE 1 AS isDisabled \\r\\nFROM \\r\\n  WF_MRUSERS\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the WebFOCUS account to user identity.\\r\\n```sql\\r\\nSELECT \\r\\n  userid AS account, \\r\\n  username AS userID\\r\\nFROM \\r\\n  WF_MRUSERS\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from WebFOCUS.\\r\\n```sql\\r\\nSELECT \\r\\n  distinct groupName, \\r\\n  groupid \\r\\nFROM \\r\\n  WF_MRGROUPS\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from WebFOCUS.\\r\\n```sql\\r\\nSELECT \\r\\n  userid AS account, \\r\\n  groupid \\r\\nFROM \\r\\n  WF_USRGRPTB \\r\\nWHERE \\r\\n  userid is NOT NULL\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from WebFOCUS application. We will use the Oracle database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **WebFOCUS BI & Analytics**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/10.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from WebFOCUS.<br /><br />![Alt text](img/11.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/12.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect admin roles from WebFOCUS.\\r\\n```sql\\r\\nSELECT \\r\\n  distinct roleid, \\r\\n  rolename AS role, \\r\\n  roleflag AS description \\r\\nFROM \\r\\n  WF_MRROLES\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/13.png)\\r\\n\\r\\n9. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to admin roles.\\r\\n```sql\\r\\nSELECT \\r\\n  users.userid AS account, \\r\\n  roles.rolenameAS role \\r\\nFROM \\r\\n  WF_MRUSERS users \\r\\n  INNER JOIN WF_MRROLES roles ON roles.roleid = users.roleid\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n10. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>WebFOCUS BI & Analytics ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL024</span>"},{"id":"deltek","metadata":{"permalink":"/RSA/blog/deltek","source":"@site/blog/collections/deltek/deltek.mdx","title":"Deltek CostPoint","description":"Deltek CostPoint is an ERP software solution designed for government contractors. It enables users to manage project accounting, labor management, manufacturing, and business intelligence. Modules include payroll, budgeting and planning, reporting, human resources and benefits, manufacturing and compliance, subcontractor management, time and expense, contract management, and enterprise insights for planning and forecasting.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-06T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"ERP","permalink":"/RSA/blog/tags/erp"},{"inline":true,"label":"Deltek","permalink":"/RSA/blog/tags/deltek"},{"inline":true,"label":"CostPoint","permalink":"/RSA/blog/tags/cost-point"}],"readingTime":17.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"deltek","title":"Deltek CostPoint","date":"2023-10-06T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","ERP","Deltek","CostPoint"],"keywords":["Collections","SQL","Database","ERP","Deltek","CostPoint"]},"unlisted":false,"lastUpdatedAt":1718029732000,"prevItem":{"title":"WebFOCUS BI & Analytics","permalink":"/RSA/blog/webfocus"},"nextItem":{"title":"Lawson","permalink":"/RSA/blog/lawson"}},"content":"import logoPNG from \'@site/static/img/logos/Deltek - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Deltek CostPoint is an ERP software solution designed for government contractors. It enables users to manage project accounting, labor management, manufacturing, and business intelligence. Modules include payroll, budgeting and planning, reporting, human resources and benefits, manufacturing and compliance, subcontractor management, time and expense, contract management, and enterprise insights for planning and forecasting.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\nThe first step in collecting accounts, tokens information from Deltek CostPoint is to create a placeholder application to store this information in RSA Governance & Lifecycle.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Deltek Costpoint application. We will use the SQL Server database collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Deltek CostPoint**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the database details. Use the *Test Connection* to make sure the connection details are accurate. Use the latest Microsoft JDBC Driver for SQL Server if NTLM authentication is required.<br /><br />![img](./img/3.png)\\r\\n6. Click **Next**. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT users.USER_ID as accountName, \\r\\n  user_details.NAME as displayname, \\r\\n  user_details.EMPL_ID as employeeID, \\r\\n  user_details.LAST_PSWD_CHNG_DT as passwordChangeDate, \\r\\n  CASE WHEN user_details.DE_ACTIVATION_DT IS NULL \\r\\n    THEN 0 ELSE 1 \\r\\n  END as isDisabled, \\r\\n  user_details.LAST_LOGIN_DT as lastLogin, \\r\\n  company.ORG_SEC_GRP_CD as company \\r\\nFROM \\r\\n  CPADMIN.W_USER_GRP_USERS users \\r\\n  JOIN CPADMIN.W_USER_UGRP_LIST user_details \\r\\n    ON users.USER_ID = user_details.SEC_OBJ_ID \\r\\n  JOIN CPADMIN.W_USER_COMPANY company \\r\\n    ON users.USER_ID = company.USER_ID\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)<br />\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Deltek CostPoint account to user identity.\\r\\n```sql\\r\\nselect \\r\\n  CPADMIN.W_USER_GRP_USERS.USER_ID as accountName, \\r\\n  CPADMIN.W_USER_GRP_USERS.USER_ID as userID \\r\\nfrom \\r\\n  CPADMIN.W_USER_GRP_USERS\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)<br />\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from Deltek CostPoint.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT SEC_OBJ_ID as groupID, \\r\\n  NAME as groupName \\r\\nFROM \\r\\n  CPADMIN.W_USER_UGRP_LIST groups \\r\\nWHERE \\r\\n  TYPE = \'G\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)<br />\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from Deltek CostPoint.\\r\\n```sql\\r\\nSELECT \\r\\n  groups.NAME as groupName, \\r\\n  groups.SEC_OBJ_ID as groupID, \\r\\n  users.USER_ID as accountName\\r\\nFROM \\r\\n  CPADMIN.W_USER_GRP_USERS users \\r\\n  INNER JOIN CPADMIN.W_USER_UGRP_LIST groups \\r\\n    ON groups.SEC_OBJ_ID = users.SEC_OBJ_ID \\r\\nWHERE \\r\\n  groups.TYPE = \'G\'\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL023</span>"},{"id":"lawson","metadata":{"permalink":"/RSA/blog/lawson","source":"@site/blog/collections/lawson/lawson.mdx","title":"Lawson","description":"Lawson is a suite of HR management applications offering absence management tools, employee and manager self-service features, benefits and personnel administration, payroll management, and other tools.Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c","date":"2023-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Lawson","permalink":"/RSA/blog/tags/lawson"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"},{"inline":true,"label":"Identities","permalink":"/RSA/blog/tags/identities"}],"readingTime":13.833333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"lawson","title":"Lawson","date":"2023-10-05T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Lawson","HCM","Identities"],"keywords":["Collections","SQL","Database","Lawson","HCM","Identities"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Deltek CostPoint","permalink":"/RSA/blog/deltek"},"nextItem":{"title":"Cherwell","permalink":"/RSA/blog/cherwell"}},"content":"import logoPNG from \'@site/static/img/logos/Lawson - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Lawson is a suite of HR management applications offering absence management tools, employee and manager self-service features, benefits and personnel administration, payroll management, and other tools.<br /><br />Identities \u2714\ufe0f | Accounts \u274c | Groups \u274c | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n<Admonition type=\\"info\\" title=\\"Assumptions\\">\\r\\nThis guide is based on the Velocity solution to synchronize Lawson data into local Oracle database\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Identity Collector\\r\\nThis section explains the process for configuring an identity collector for the Lawson application. We will use the Oracle database collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Lawson**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Identity Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the Test Connection to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click **Next**.\\r\\n7. Click **Next**. On the **User Data** configuration page, enter the following query to collect account information from Lawson\\r\\n```sql\\r\\nSELECT \\r\\n  TRIM(employee.FIRST_NAME) AS firstName, \\r\\n  TRIM(employee.LAST_NAME) AS lastName, \\r\\n  TRIM(employee.MIDDLE_INIT) AS middleInitial, \\r\\n  TRIM(employee.EMPLOYEE) AS employeeID, \\r\\n  TRIM(POS.DESCRIPTION) AS title, \\r\\n  TRIM(DPT.R_NAME) AS departmentName, \\r\\n  TRIM(employee.DEPARTMENT) AS departmentCode, \\r\\n  (\\r\\n    CASE \\r\\n        WHEN employee.TERM_DATE = TO_DATE(\'01/01/1700\', \'MM/DD/YYYY\') \\r\\n        THEN \' \' ELSE TO_CHAR(employee.TERM_DATE, \'MM/DD/YYYY\') END\\r\\n  ) AS terminationDate, \\r\\n  TRIM(employee.NICK_NAME) AS preferredName, \\r\\n  TRIM(employee.JOB_CODE) AS jobCode, \\r\\n  TRIM(employee.POSITION) AS positionCode, \\r\\n  TRIM(employee.COMPANY) AS company, \\r\\n  TRIM(XR.BUS_UNIT_CD) AS location, \\r\\n  TRIM(BU.UNIT_CODE_DESC) AS locationDetails, \\r\\n  TRIM(employee.HM_ACCT_UNIT) AS homeAccountingUnit, \\r\\n  TRIM(employee.ADJ_HIRE_DATE) AS adjustedHireDate, \\r\\n  TRIM(employee.EMP_STATUS) AS jobStatus, \\r\\n  TRIM(employee.PROCESS_LEVEL) AS processLevel, \\r\\n  TO_CHAR(PA.BIRTHDATE, \'MM\') AS dobMonth, \\r\\n  TO_CHAR(PA.BIRTHDATE, \'DD\') AS dobDay, \\r\\n  employee.SUPERVISOR AS supervisorEmployeeID\\r\\nFROM \\r\\n  EMPLOYEE employee \\r\\n  INNER JOIN PAEMPLOYEE PA ON employee.COMPANY = PA.COMPANY \\r\\n  AND employee.EMPLOYEE = PA.EMPLOYEE \\r\\n  LEFT OUTER JOIN HRSUPER SUP ON employee.COMPANY = SUP.COMPANY \\r\\n  AND employee.SUPERVISOR = SUP.CODE \\r\\n  LEFT OUTER JOIN PAPOSITION POS ON POS.COMPANY = employee.COMPANY \\r\\n  AND POS.POSITION = employee.POSITION \\r\\n  AND POS.END_DATE = TO_DATE(\'01/01/1700\', \'MM/DD/YYYY\') \\r\\n  LEFT JOIN ZIBUXREF XR ON XR.ACCT_UNIT = employee.HM_ACCT_UNIT \\r\\n  LEFT JOIN ZIBUSUNIT BU ON XR.BUS_UNIT_CD = BU.UNIT_CODE \\r\\n  LEFT JOIN DEPTCODE DPT ON employee.COMPANY = DPT.COMPANY \\r\\n  AND employee.PROCESS_LEVEL = DPT.PROCESS_LEVEL \\r\\n  AND employee.DEPARTMENT = DPT.DEPARTMENT\\r\\n```\\r\\n8. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL022</span>"},{"id":"cherwell","metadata":{"permalink":"/RSA/blog/cherwell","source":"@site/blog/collections/cherwell/cherwell.mdx","title":"Cherwell","description":"Cherwell Service Management is a cloud-based IT service management solution that helps IT teams in organizations to implement, automate and upgrade service and support processes.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-05T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"ITSM","permalink":"/RSA/blog/tags/itsm"},{"inline":true,"label":"Cherwell","permalink":"/RSA/blog/tags/cherwell"}],"readingTime":32,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"cherwell","title":"Cherwell","date":"2023-10-05T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","ITSM","Cherwell"],"keywords":["Collections","SQL","Database","ITSM","Cherwell"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Lawson","permalink":"/RSA/blog/lawson"},"nextItem":{"title":"SAP Business Planning and Consolidation (BPC)","permalink":"/RSA/blog/sap-bpc"}},"content":"import logoPNG from \'@site/static/img/logos/Cherwell - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Cherwell Service Management is a cloud-based IT service management solution that helps IT teams in organizations to implement, automate and upgrade service and support processes.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n<Admonition type=\\"note\\" title=\\"Assumptions\\">\\r\\n This guide is intended for On Premise deployment mode.\\r\\n</Admonition>\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Cherwell application. We will use the MySQL database collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Cherwell**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click **Next**. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT\\r\\n  -- Local accounts\\r\\n  auth.StandardIdentifier as accountName, \\r\\n  auth.LastPasswordResetDT as lastPasswordSetDate, \\r\\n  auth.AccountLocked as isLocked \\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth \\r\\nWHERE \\r\\n  auth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT\\r\\n  -- Domain accounts\\r\\n  CASE WHEN LEFT(auth.WindowsIdentifier, 7) = \'DOMAIN\\\\\\\\\' \\r\\n  THEN REPLACE(auth.WindowsIdentifier,\'DOMAIN\\\\\\\\\',\'\') \\r\\n  ELSE auth.WindowsIdentifier  \\r\\n  END as accountName, \\r\\n  auth.LastPasswordResetDT as lastPasswordSetDate,\\r\\n  auth.AccountLocked as isLocked\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth\\r\\nWHERE auth.StandardIdentifier <> \'\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Cherwell account to user identity.\\r\\n```sql\\r\\nSELECT\\r\\n  -- Local accounts\\r\\n  auth.StandardIdentifier as accountName, \\r\\n  auth.StandardIdentifier as userID\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth \\r\\nWHERE \\r\\n  auth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT\\r\\n  -- Domain accounts\\r\\n  CASE WHEN LEFT(auth.WindowsIdentifier, 7) = \'DOMAIN\\\\\\\\\' \\r\\n  THEN REPLACE(auth.WindowsIdentifier,\'DOMAIN\\\\\\\\\',\'\') \\r\\n  ELSE auth.WindowsIdentifier  \\r\\n  END as accountName,\\r\\n  auth.StandardIdentifier as userID\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth\\r\\nWHERE auth.StandardIdentifier <> \'\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from Cherwell.\\r\\n```sql\\r\\nSELECT \\r\\n  -- Local accounts\\r\\n  auth.StandardIdentifier as accountName, \\r\\n  groups.DefName as groupName,\\r\\n  groups.DefDescription as description,\\r\\n  groups.DefOwner as owner\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth,\\r\\n  dbo.TrebuchetSecGroups groups\\r\\nWHERE \\r\\n  auth.SecurityGroupID = groups.DefID \\r\\n  AND auth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT \\r\\n  -- Domain accounts\\r\\n  CASE WHEN LEFT(auth.WindowsIdentifier, 7) = \'DOMAIN\\\\\\\\\' \\r\\n  THEN REPLACE(auth.WindowsIdentifier,\'DOMAIN\\\\\\\\\',\'\') \\r\\n  ELSE auth.WindowsIdentifier  \\r\\n  END as accountName,\\r\\n  groups.DefName as groupName,\\r\\n  groups.DefDescription as description,\\r\\n  groups.DefOwner as owner\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth,\\r\\n  dbo.TrebuchetSecGroups groups\\r\\nWHERE auth.SecurityGroupID = groups.DefID\\r\\n  AND auth.StandardIdentifier <> \'\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from Cherwell.\\r\\n```sql\\r\\nSELECT \\r\\n  -- Local accounts\\r\\n  auth.StandardIdentifier as accountName, \\r\\n  groups.DefName as groupName\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth,\\r\\n  dbo.TrebuchetSecGroups groups\\r\\nWHERE \\r\\n  auth.SecurityGroupID = groups.DefID \\r\\n  AND auth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT \\r\\n  -- Domain accounts\\r\\n  CASE WHEN LEFT(auth.WindowsIdentifier, 7) = \'DOMAIN\\\\\\\\\' \\r\\n  THEN REPLACE(auth.WindowsIdentifier,\'DOMAIN\\\\\\\\\',\'\') \\r\\n  ELSE auth.WindowsIdentifier  \\r\\n  END as accountName,\\r\\n  groups.DefName as groupName\\r\\nFROM \\r\\n  dbo.TrebuchetAuth auth,\\r\\n  dbo.TrebuchetSecGroups groups\\r\\nWHERE auth.SecurityGroupID = groups.DefID\\r\\n  AND auth.StandardIdentifier <> \'\'\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Next**. In the **Group Owner Resolution Rules**, map the account collector.<br /><br />![img](img/10.png)\\r\\n14. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect application roles from Cherwell application.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Cherwell**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/11.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Cherwell.<br /><br />![Alt text](img/12.png)\\r\\n7. Click **Next**. On the **Column Names**, map the attribute names.<br /><br />![Alt text](img/13.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect app roles from Cherwell.\\r\\n```sql\\r\\nSELECT \\r\\n  dbo.TrebuchetAuth.StandardIdentifier AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName \\r\\nFROM \\r\\n  [dbo].[TrebuchetAuth], \\r\\n  [dbo].[TrebuchetSecGroups] \\r\\nWHERE \\r\\n  dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID \\r\\n  AND dbo.TrebuchetAuth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT \\r\\n  CASE WHEN left(dbo.TrebuchetAuth.WindowsIdentifier, 5) = \'dom1\\\\\\\\\' \\r\\n    THEN replace(dbo.TrebuchetAuth.WindowsIdentifier,\' dom1\\\\ \',\'\') \\r\\n    ELSE dbo.TrebuchetAuth.WindowsIdentifier \\r\\n  END AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName FROM [dbo].[TrebuchetAuth] ,[dbo].[TrebuchetSecGroups]\\r\\nWHERE dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID\\r\\nAND dbo.TrebuchetAuth.WindowsIdentifier <> \'\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/14.png)\\r\\n\\r\\n9. Click **Next**. Under **Resource-Action Entitlements Data** section, use the following query to collect resource action mapping from Cherwell.\\r\\n```sql\\r\\nSELECT \\r\\n  dbo.TrebuchetAuth.StandardIdentifier AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName \\r\\nFROM \\r\\n  [dbo].[TrebuchetAuth], \\r\\n  [dbo].[TrebuchetSecGroups] \\r\\nWHERE \\r\\n  dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID \\r\\n  AND dbo.TrebuchetAuth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT \\r\\n  CASE WHEN left(dbo.TrebuchetAuth.WindowsIdentifier, 5) = \'dom1\\\\\\\\\' \\r\\n    THEN replace(dbo.TrebuchetAuth.WindowsIdentifier,\' dom1\\\\ \',\'\') \\r\\n    ELSE dbo.TrebuchetAuth.WindowsIdentifier \\r\\n  END AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName FROM [dbo].[TrebuchetAuth] ,[dbo].[TrebuchetSecGroups]\\r\\nWHERE dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID\\r\\nAND dbo.TrebuchetAuth.WindowsIdentifier <> \'\'\\r\\n```\\r\\n\\r\\n10. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to admin roles.\\r\\n```sql\\r\\nSELECT \\r\\n  dbo.TrebuchetAuth.StandardIdentifier AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName \\r\\nFROM \\r\\n  [dbo].[TrebuchetAuth], \\r\\n  [dbo].[TrebuchetSecGroups] \\r\\nWHERE \\r\\n  dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID \\r\\n  AND dbo.TrebuchetAuth.StandardIdentifier <> \'\' \\r\\nUNION \\r\\nSELECT \\r\\n  CASE WHEN left(dbo.TrebuchetAuth.WindowsIdentifier,5) = \'dom1\\\\\\\\\' \\r\\n    THEN replace(dbo.TrebuchetAuth.WindowsIdentifier,\' dom1\\\\ \',\'\') \\r\\n    ELSE dbo.TrebuchetAuth.WindowsIdentifier \\r\\n  END AS Identifier, \\r\\n  dbo.TrebuchetSecGroups.DefName FROM [dbo].[TrebuchetAuth] ,[dbo].[TrebuchetSecGroups]\\r\\nWHERE dbo.TrebuchetAuth.SecurityGroupID = [dbo].[TrebuchetSecGroups].DefID\\r\\nAND dbo.TrebuchetAuth.WindowsIdentifier <> \'\'\\r\\n```\\r\\n11. Click **Next**. In the User Evaluation, map the account to the ADC.<br /><br />![img](img/15.png)\\r\\n12. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL021</span>"},{"id":"sap-bpc","metadata":{"permalink":"/RSA/blog/sap-bpc","source":"@site/blog/collections/sap-bpc/sap-bpc.mdx","title":"SAP Business Planning and Consolidation (BPC)","description":"SAP Business Planning and Consolidation (BPC) is an integrated financial planning and consolidation solution. It enables organizations to streamline budgeting, forecasting, and financial reporting processes. BPC helps in aligning financial plans with strategic goals, ensuring accurate data consolidation, and facilitating regulatory compliance for enhanced business decision-making and efficiency.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-04T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"SAP","permalink":"/RSA/blog/tags/sap"},{"inline":true,"label":"BPC","permalink":"/RSA/blog/tags/bpc"},{"inline":true,"label":"Financial","permalink":"/RSA/blog/tags/financial"}],"readingTime":21.333333333333332,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"sap-bpc","title":"SAP Business Planning and Consolidation (BPC)","date":"2023-10-04T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","SAP","BPC","Financial"],"keywords":["Collections","SQL","Database","SAP","BPC","Financial"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Cherwell","permalink":"/RSA/blog/cherwell"},"nextItem":{"title":"Kronos","permalink":"/RSA/blog/kronos"}},"content":"import logoPNG from \'@site/static/img/logos/SAP BPC - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>SAP Business Planning and Consolidation (BPC) is an integrated financial planning and consolidation solution. It enables organizations to streamline budgeting, forecasting, and financial reporting processes. BPC helps in aligning financial plans with strategic goals, ensuring accurate data consolidation, and facilitating regulatory compliance for enhanced business decision-making and efficiency.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **SAP Business Planning and Consolidation**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT Users.UserID AS account, \\r\\n  Users.FullName CASE WHEN Users.Active = \'Y\' THEN 0 ELSE 1 END AS isDisabled, \\r\\n  (\\r\\n    SELECT \\r\\n      J.ProfileID \\r\\n    FROM \\r\\n      UserProfile J \\r\\n    WHERE \\r\\n      J.ProfileID = \'CreateJournal\' \\r\\n      AND J.UserID = Users.UserID\\r\\n  ) + \', \' + (\\r\\n    SELECT \\r\\n      J.ProfileID \\r\\n    FROM \\r\\n      UserProfile J \\r\\n    WHERE \\r\\n      J.ProfileID = \'PostJournal\' \\r\\n      AND J.UserID = Users.UserID\\r\\n  ) + \', \' + (\\r\\n    SELECT \\r\\n      J.ProfileID \\r\\n    FROM \\r\\n      UserProfile J \\r\\n    WHERE \\r\\n      J.ProfileID = \'UnpostJournal\' \\r\\n      AND J.UserID = Users.UserID\\r\\n  ) AS description \\r\\nFROM \\r\\n  tblUsers Users\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the SAP Business Planning and Consolidation account to user identity.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT UserID AS account, \\r\\n  CASE \\r\\n    WHEN UserID LIKE \'DS\\\\%\' \\r\\n    THEN SUBSTRING(UserID, CHARINDEX(\'\\\\\', UserID)+1, 500) + \' @dsp.local \'   \\r\\n    WHEN UserID LIKE \' US\\\\ % \' \\r\\n    THEN SUBSTRING(UserID, CHARINDEX(\' \\\\ \', UserID)+1, 500) + \' @us.company.com \'\\r\\n    ELSE UserID \\r\\n  END AS userID\\r\\nFROM \\r\\n  tblUsers\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from SAP Business Planning and Consolidation.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT TeamID AS groupName, \\r\\n  TeamDesc AS description, \\r\\n  NULL AS owner \\r\\nFROM \\r\\n  Teams \\r\\nWHERE \\r\\n  TeamID NOT LIKE \'OWN_%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT \'Y-\' + UTA.MemberOfTeamID AS groupName, \\r\\n  (\\r\\n    SELECT \\r\\n      TeamDesc \\r\\n    FROM \\r\\n      Teams \\r\\n    WHERE \\r\\n      TeamID = UTA.MemberOfTeamID\\r\\n  ) AS description, \\r\\n  NULL AS owner \\r\\nFROM \\r\\n  UserTeamAssign UTA \\r\\nWHERE \\r\\n  UTA.TeamLeader = \'Y\' \\r\\n  AND UTA.MemberOfTeamID NOT LIKE \'OWN_%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT ProfileID AS groupName, \\r\\n  ProfileDesc AS description, \\r\\n  REPLACE(Approver, \',\', \'\') AS owner \\r\\nFROM \\r\\n  Profiles \\r\\n  LEFT JOIN ER_ApproversbyGroup ON ProfileID = \\"Group\\"\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from SAP Business Planning and Consolidation.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT UserOrTeamID AS account, \\r\\n  CASE WHEN TeamLeader = \'Y\' THEN \'Y-\' + MemberOfTeamID ELSE MemberofTeamID END AS groupName \\r\\nFROM \\r\\n  UserTeamAssign \\r\\nWHERE \\r\\n  IsATeam = \'N\' \\r\\n  AND TeamLeader = \'Y\' \\r\\n  AND MemberOfTeamID NOT LIKE \'OWN_%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT UserOrTeamID AS account, \\r\\n  MemberOfTeamID AS groupName \\r\\nFROM \\r\\n  UserTeamAssign \\r\\nWHERE \\r\\n  IsATeam = \'N\' \\r\\n  AND TeamLeader <> \'Y\' \\r\\n  AND MemberOfTeamID NOT LIKE \'OWN_%\' \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT UserID AS account, \\r\\n  ProfileID AS groupName \\r\\nFROM \\r\\n  UserProfile\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL020</span>"},{"id":"kronos","metadata":{"permalink":"/RSA/blog/kronos","source":"@site/blog/collections/kronos/kronos.mdx","title":"Kronos","description":"Kronos is a leading human capital and workforce management solution, streamlining workforce operations for organizations. It offers tools for scheduling, time tracking, payroll, and HR management, optimizing workforce efficiency and productivity.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-04T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Kronos","permalink":"/RSA/blog/tags/kronos"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"}],"readingTime":22.133333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"kronos","title":"Kronos","date":"2023-10-04T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Kronos","HCM"],"keywords":["Collections","SQL","Database","Kronos","HCM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"SAP Business Planning and Consolidation (BPC)","permalink":"/RSA/blog/sap-bpc"},"nextItem":{"title":"AutoSys Workload Automation","permalink":"/RSA/blog/autosys"}},"content":"import logoPNG from \'@site/static/img/logos/Kronos - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Kronos is a leading human capital and workforce management solution, streamlining workforce operations for organizations. It offers tools for scheduling, time tracking, payroll, and HR management, optimizing workforce efficiency and productivity.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Kronos application. We will use the SQL Server database collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Kronos**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the SQL Server database details. Use the Test Connection to make sure the connection details are accurate. Use the latest Microsoft JDBC Driver for SQL Server if NTLM authentication is required.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect. For the purpose of illustration we will collect accounts, groups and user to account mapping from Kronos.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT\\r\\n  UA.USERACCOUNTNM AS accountID,\\r\\n  (\\r\\n  CASE\\r\\n    WHEN ua.consecbadlogoncnt < 0 THEN \'1\'\\r\\n    ELSE \'0\'\\r\\n  END\\r\\n  )\\r\\n  AS isLocked,\\r\\n  (\\r\\n  CASE\\r\\n    WHEN UA.USERACCOUNTSTATUS = \'Active\' THEN \'0\'\\r\\n    ELSE \'1\'\\r\\n  END\\r\\n  )\\r\\n  AS isDisabled\\r\\nFROM VP_USERACCOUNT UA\\r\\nLEFT JOIN VP_ALLPERSONV42 EE\\r\\n  ON UA.PERSONID = EE.PERSONID\\r\\nWHERE UA.PERSONID > 0\\r\\nORDER BY UA.USERACCOUNTNM\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Kronos account to user identity.\\r\\n```sql\\r\\nSELECT\\r\\n  UA.USERACCOUNTNM AS accountID,\\r\\n  EE.PERSONNUM AS userID\\r\\nFROM VP_USERACCOUNT UA\\r\\nLEFT JOIN VP_ALLPERSONV42 EE\\r\\n  ON UA.PERSONID = EE.PERSONID\\r\\nWHERE UA.PERSONID > 0\\r\\nORDER BY UA.USERACCOUNTNM\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/7.png)\\r\\n10. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from Kronos application. We will use the SQL Server database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Kronos**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/8.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Kronos.<br /><br />![Alt text](img/9.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/10.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect admin roles from Kronos.\\r\\n```sql\\r\\nSELECT DISTINCT\\r\\n  PROFILENM AS role,\\r\\n  PROFILEDSC AS description\\r\\nFROM ACCESSPROFILE\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/11.png)\\r\\n\\r\\n9. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to roles.\\r\\n```sql\\r\\nSELECT\\r\\n  UA.USERACCOUNTNM AS account,\\r\\n  EE.ACCESSPROFILENM AS role\\r\\nFROM VP_USERACCOUNT UA\\r\\nLEFT JOIN VP_ALLPERSONV42 EE\\r\\n  ON UA.PERSONID = EE.PERSONID\\r\\nWHERE UA.PERSONID > 0\\r\\nORDER BY UA.USERACCOUNTNM\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n10. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>Kronos ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL019</span>"},{"id":"autosys","metadata":{"permalink":"/RSA/blog/autosys","source":"@site/blog/collections/autosys/autosys.mdx","title":"AutoSys Workload Automation","description":"AutoSys Workload Automation (formerly CA Workload Automation AE) improves the availability of critical application workloads across the enterprise by dynamically responding to real time business events, mapping workload processes to service level agreements, ensuring continual monitoring, and automating recovery.Also known as Unicenter AutoSys Job ManagementIdentities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"CA","permalink":"/RSA/blog/tags/ca"},{"inline":true,"label":"AutoSys","permalink":"/RSA/blog/tags/auto-sys"},{"inline":true,"label":"Automation","permalink":"/RSA/blog/tags/automation"}],"readingTime":14.933333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"autosys","title":"AutoSys Workload Automation","date":"2023-10-03T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","CA","AutoSys","Automation"],"keywords":["Collections","SQL","Database","CA","AutoSys","Automation"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Kronos","permalink":"/RSA/blog/kronos"},"nextItem":{"title":"Informatica","permalink":"/RSA/blog/informatica"}},"content":"import logoPNG from \'@site/static/img/logos/CA - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>AutoSys Workload Automation (formerly CA Workload Automation AE) improves the availability of critical application workloads across the enterprise by dynamically responding to real time business events, mapping workload processes to service level agreements, ensuring continual monitoring, and automating recovery.<br /><br />Also known as Unicenter AutoSys Job Management<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **CA Workload Automation**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISPLAY_ID as accountID, \\r\\n  CASE WHEN LOCK_ID = 2 THEN 1 ELSE 0 END as isLocked \\r\\nFROM \\r\\n  WA.ESP_USER\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the CA Workload Automation account to user identity.\\r\\n```sql\\r\\nSELECT\\r\\n  DISPLAY_ID as accountID,\\r\\n  DISPLAY_ID as userID\\r\\nFROM\\r\\n  WA.ESP_USER\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from CA Workload Automation.\\r\\n```sql\\r\\nSELECT\\r\\n  DISTINCT NAME as groupName,\\r\\n  GROUP_ID as groupID,\\r\\n  DESCRIPTION as description\\r\\nFROM\\r\\n  WA.ESP_GROUP\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from CA Workload Automation.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT groups.NAME as groupName, \\r\\n  users.DISPLAY_ID as accountID \\r\\nFROM \\r\\n  WA.ESP_GROUP groups \\r\\n  INNER JOIN WA.ESP_USERGROUP members ON members.GROUP_ID = groups.GROUP_ID \\r\\n  INNER JOIN WA.ESP_USER users ON users.USER_ID = members.USER_ID\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Target Collector</th>\\r\\n    <th>Account Attribute</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>CA Workload Automation ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL018</span>"},{"id":"informatica","metadata":{"permalink":"/RSA/blog/informatica","source":"@site/blog/collections/informatica/informatica.mdx","title":"Informatica","description":"Informatica is a leading data integration and management software, empowering organizations to extract, transform, and load data for efficient analysis and decision-making. It facilitates seamless integration of disparate data sources, ensuring data quality and governance throughout the process.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-03T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Informatica","permalink":"/RSA/blog/tags/informatica"},{"inline":true,"label":"ETL","permalink":"/RSA/blog/tags/etl"}],"readingTime":27.766666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"informatica","title":"Informatica","date":"2023-10-03T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Informatica","ETL"],"keywords":["Collections","SQL","Database","Informatica","ETL"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"AutoSys Workload Automation","permalink":"/RSA/blog/autosys"},"nextItem":{"title":"OpenText RightFax","permalink":"/RSA/blog/rightfax"}},"content":"import logoPNG from \'@site/static/img/logos/Informatica - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Informatica is a leading data integration and management software, empowering organizations to extract, transform, and load data for efficient analysis and decision-making. It facilitates seamless integration of disparate data sources, ensuring data quality and governance throughout the process.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Informatica**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT\\r\\n  a.pos_name accountID,\\r\\n  b.pou_fullname fullName,\\r\\n  a.groupName groupName,\\r\\n  a.poi_securitydomain securityDomain\\r\\nFROM\\r\\n  (\\r\\n    SELECT\\r\\n      poi3.poi_userinfo,\\r\\n      poi2.psi_discriminator,\\r\\n      poi2.pos_name,\\r\\n      poi1.pos_name groupName,\\r\\n      poi2.poi_securitydomain\\r\\n    FROM\\r\\n      PO_IDOBJ poi1,\\r\\n      PO_IDOBJ poi2,\\r\\n      PO_IDOBJ poi3\\r\\n    WHERE\\r\\n      poi1.poi_securitydomain = \'Native\'\\r\\n      AND poi1.psi_discriminator LIKE \'GROUP\'\\r\\n      AND poi2.psi_container = poi1.psi_container\\r\\n      AND poi3.pos_name = poi2.pos_name\\r\\n      AND poi3.psi_discriminator = \'LDAPUSER\'\\r\\n      AND poi3.poi_securitydomain = poi2.poi_securitydomain\\r\\n    ORDER BY\\r\\n      poi1.pos_name,\\r\\n      poi2.pos_name\\r\\n  ) a,\\r\\n  PO_USERINFO b\\r\\nWHERE\\r\\n  a.poi_userinfo = b.psu_opid\\r\\n  AND a.groupName <> \'Everyone\'\\r\\nORDER BY\\r\\n  a.pos_name\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the Informatica account to user identity.\\r\\n```sql\\r\\nSELECT\\r\\n  DISTINCT(accountID),\\r\\n  accountID AS userID,\\r\\n  fullName\\r\\nFROM\\r\\n  (\\r\\n    SELECT\\r\\n      a.pos_name accountID,\\r\\n      B.POU_FULLNAME fullName,\\r\\n      a.groupName groupName,\\r\\n      a.poi_securitydomain securityDomain\\r\\n    FROM\\r\\n      (\\r\\n        SELECT\\r\\n          poi3.poi_userinfo,\\r\\n          poi2.psi_discriminator,\\r\\n          poi2.pos_name,\\r\\n          poi1.pos_name groupName,\\r\\n          poi2.poi_securitydomain\\r\\n        FROM\\r\\n          PO_IDOBJ poi1,\\r\\n          PO_IDOBJ poi2,\\r\\n          PO_IDOBJ poi3\\r\\n        WHERE\\r\\n          poi1.poi_securitydomain = \'Native\'\\r\\n          AND poi1.psi_discriminator LIKE \'GROUP\'\\r\\n          AND poi2.psi_container = poi1.psi_container\\r\\n          AND poi3.pos_name = poi2.pos_name\\r\\n          AND poi3.psi_discriminator = \'LDAPUSER\'\\r\\n          AND poi3.poi_securitydomain = poi2.poi_securitydomain\\r\\n        ORDER BY\\r\\n          poi1.pos_name,\\r\\n          poi2.pos_name\\r\\n      ) a,\\r\\n      po_userinfo b\\r\\n    WHERE\\r\\n      a.poi_userinfo = b.psu_opid\\r\\n      AND a.groupName <> \'Everyone\'\\r\\n    ORDER BY\\r\\n      pos_name\\r\\n  )\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from Informatica.\\r\\n```sql\\r\\n(\\r\\n  SELECT\\r\\n    groupName,\\r\\n    REPLACE(\\r\\n      \'<p>The group gives access to folders:<br />\' || RTRIM(\\r\\n        XMLAGG(\\r\\n          XMLELEMENT(E, PERMISSIONS, \';\').EXTRACT(\'//text()\')\\r\\n          ORDER BY\\r\\n            PERMISSIONS\\r\\n        ).GetClobVal(),\\r\\n        \'<br />\'\\r\\n      ) || \'</p>\',\\r\\n      \';\',\\r\\n      \'<br />\'\\r\\n    ) AS description\\r\\n  FROM\\r\\n    (\\r\\n      SELECT\\r\\n        groupName,\\r\\n        FOLDER_NAME || \': \' || PERMISSIONS AS PERMISSIONS\\r\\n      FROM\\r\\n        (\\r\\n          SELECT\\r\\n            \'REP_ICOE_TEST\' AS REPOSITORY,\\r\\n            subj.subj_name folder_name,\\r\\n            user_group.NAME groupName,\\r\\n            CASE\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (8, 16)\\r\\n              ) THEN \'READ\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (10, 20)\\r\\n              ) THEN \'READ,  EXECUTE\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (12, 24)\\r\\n              ) THEN \'READ, WRITE\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (14, 28)\\r\\n              ) THEN \'READ, WRITE, EXECUTE\'\\r\\n              ELSE \'NO PERMISSIONS\'\\r\\n            END permissions\\r\\n          FROM\\r\\n            ETLREPT.opb_object_access obj_access,\\r\\n            ETLREPT.opb_subject subj,\\r\\n            ETLREPT.opb_user_group user_group\\r\\n          WHERE\\r\\n            obj_access.object_type = 29\\r\\n            AND obj_access.object_id = subj.subj_id\\r\\n            AND obj_access.accountID = user_group.ID\\r\\n            AND obj_access.user_type = user_group.TYPE\\r\\n            AND obj_access.user_type = 2\\r\\n            AND user_group.NAME LIKE \'GRP%\'\\r\\n          UNION\\r\\n          SELECT\\r\\n            \'REP_ICOE_TEST2\' AS REPOSITORY,\\r\\n            subj.subj_name folder_name,\\r\\n            user_group.NAME groupName,\\r\\n            CASE\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (8, 16)\\r\\n              ) THEN \'READ\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (10, 20)\\r\\n              ) THEN \'READ,  EXECUTE\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (12, 24)\\r\\n              ) THEN \'READ, WRITE\'\\r\\n              WHEN (\\r\\n                (\\r\\n                  obj_access.permissions - (obj_access.accountID + 1)\\r\\n                ) IN (14, 28)\\r\\n              ) THEN \'READ, WRITE, EXECUTE\'\\r\\n              ELSE \'NO PERMISSIONS\'\\r\\n            END permissions\\r\\n          FROM\\r\\n            ETLREP2T.opb_object_access obj_access,\\r\\n            ETLREP2T.opb_subject subj,\\r\\n            ETLREP2T.opb_user_group user_group\\r\\n          WHERE\\r\\n            obj_access.object_type = 29\\r\\n            AND obj_access.object_id = subj.subj_id\\r\\n            AND obj_access.accountID = user_group.ID\\r\\n            AND obj_access.user_type = user_group.TYPE\\r\\n            AND obj_access.user_type = 2\\r\\n            AND user_group.NAME LIKE \'GRP%\'\\r\\n        )\\r\\n    )\\r\\n  GROUP BY\\r\\n    groupName\\r\\n)\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from Informatica.\\r\\n```sql\\r\\nSELECT\\r\\n  a.pos_name accountID,\\r\\n  B.POU_FULLNAME fullName,\\r\\n  a.groupName groupName,\\r\\n  a.poi_securitydomain securityDomain\\r\\nFROM\\r\\n  (\\r\\n    SELECT\\r\\n      poi3.poi_userinfo,\\r\\n      poi2.psi_discriminator,\\r\\n      poi2.pos_name,\\r\\n      poi1.pos_name groupName,\\r\\n      poi2.poi_securitydomain\\r\\n    FROM\\r\\n      PO_IDOBJ poi1,\\r\\n      PO_IDOBJ poi2,\\r\\n      PO_IDOBJ poi3\\r\\n    WHERE\\r\\n      poi1.poi_securitydomain = \'Native\'\\r\\n      AND poi1.psi_discriminator LIKE \'GROUP\'\\r\\n      AND poi2.psi_container = poi1.psi_container\\r\\n      AND poi3.pos_name = poi2.pos_name\\r\\n      AND poi3.psi_discriminator = \'LDAPUSER\'\\r\\n      AND poi3.poi_securitydomain = poi2.poi_securitydomain\\r\\n    ORDER BY\\r\\n      poi1.pos_name,\\r\\n      poi2.pos_name\\r\\n  ) a,\\r\\n  po_userinfo b\\r\\nWHERE\\r\\n  a.poi_userinfo = b.psu_opid\\r\\n  AND a.groupName <> \'Everyone\'\\r\\nORDER BY\\r\\n  pos_name\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL017</span>"},{"id":"rightfax","metadata":{"permalink":"/RSA/blog/rightfax","source":"@site/blog/collections/rightfax/rightfax.mdx","title":"OpenText RightFax","description":"OpenText RightFax is a robust fax server software that enables organizations to send and receive faxes digitally. It eliminates the need for traditional fax machines and paper-based communication, streamlining document transmission processes. RightFax offers secure, reliable, and scalable faxing solutions, integrating seamlessly with email and other business applications. It provides advanced features like automated routing, archiving, and tracking, enhancing efficiency and compliance. With its user-friendly interface and extensive capabilities, RightFax revolutionizes fax communication, optimizing productivity and reducing costs for businesses of all sizes.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-10-02T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"Fax","permalink":"/RSA/blog/tags/fax"},{"inline":true,"label":"OpenText","permalink":"/RSA/blog/tags/open-text"},{"inline":true,"label":"RightFax","permalink":"/RSA/blog/tags/right-fax"}],"readingTime":16.633333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"rightfax","title":"OpenText RightFax","date":"2023-10-02T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","Fax","OpenText","RightFax"],"keywords":["Collections","SQL","Database","Fax","OpenText","RightFax"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Informatica","permalink":"/RSA/blog/informatica"},"nextItem":{"title":"Oracle PeopleTools (PeopleSoft)","permalink":"/RSA/blog/peoplesoft"}},"content":"import logoPNG from \'@site/static/img/logos/OpenText RightFax - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>OpenText RightFax is a robust fax server software that enables organizations to send and receive faxes digitally. It eliminates the need for traditional fax machines and paper-based communication, streamlining document transmission processes. RightFax offers secure, reliable, and scalable faxing solutions, integrating seamlessly with email and other business applications. It provides advanced features like automated routing, archiving, and tracking, enhancing efficiency and compliance. With its user-friendly interface and extensive capabilities, RightFax revolutionizes fax communication, optimizing productivity and reducing costs for businesses of all sizes.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the RightFax application. We will use the SQL Server database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **RightFax**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect.<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT UserID as account, \\r\\n  UserName as displayName \\r\\nFROM \\r\\n  RightFax.dbo.users \\r\\nWHERE \\r\\n  UserID NOT LIKE \'FAX-%\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the RightFax account to user identity.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT UserID as account, \\r\\n  UserID \\r\\nFROM \\r\\n  RightFax.dbo.users \\r\\nWHERE \\r\\n  UserID NOT LIKE \'FAX-%\'\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **Group Data** configuration section enter the following query to collect groups from RightFax.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT GroupID as groupName, \\r\\n  handle \\r\\nFROM \\r\\n  [RightFax].[dbo].[Groups] \\r\\nUNION \\r\\nSELECT \\r\\n  DISTINCT \'Application Access\' as groupName, \\r\\n  NULL AS handle \\r\\nFROM \\r\\n  [RightFax].[dbo].[Groups]\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/7.png)\\r\\n\\r\\n10. In the **Account Membership Data** configuration section enter the following query to collect groups membership information from RightFax.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT U.UserID as account, \\r\\n  G.GroupID as groupName \\r\\nFROM \\r\\n  RightFax.dbo.users U \\r\\n  LEFT JOIN RightFax.dbo.groups G ON U.GroupID = G.handle \\r\\nSELECT \\r\\n  DISTINCT U.UserID as account, \\r\\n  \'Basic Access\' as groupName \\r\\nFROM \\r\\n  RightFax.dbo.users U\\r\\n```\\r\\n11. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/8.png)\\r\\n12. Click **Next**. In the **Member Account Resolution Rules**, map the account collector.<br /><br />![img](img/9.png)\\r\\n13. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL016</span>"},{"id":"peoplesoft","metadata":{"permalink":"/RSA/blog/peoplesoft","source":"@site/blog/collections/peoplesoft/peoplesoft.mdx","title":"Oracle PeopleTools (PeopleSoft)","description":"Oracle PeopleTools is a comprehensive suite of software development tools that facilitates the creation, customization, and maintenance of applications within the Oracle PeopleSoft enterprise software ecosystem. It includes tools for development, integration, reporting, and workflow management, enhancing efficiency and user experience in business processes. Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-10-02T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"SQL","permalink":"/RSA/blog/tags/sql"},{"inline":true,"label":"Database","permalink":"/RSA/blog/tags/database"},{"inline":true,"label":"PeopleSoft","permalink":"/RSA/blog/tags/people-soft"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"},{"inline":true,"label":"EPM","permalink":"/RSA/blog/tags/epm"},{"inline":true,"label":"HCM","permalink":"/RSA/blog/tags/hcm"}],"readingTime":22.566666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"peoplesoft","title":"Oracle PeopleTools (PeopleSoft)","date":"2023-10-02T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","SQL","Database","PeopleSoft","CRM","EPM","HCM"],"keywords":["Collections","SQL","Database","PeopleSoft","CRM","EPM","HCM"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"OpenText RightFax","permalink":"/RSA/blog/rightfax"},"nextItem":{"title":"MangoApps","permalink":"/RSA/blog/mangoapps"}},"content":"import logoPNG from \'@site/static/img/logos/Oracle PeopleSoft - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table> \\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Oracle PeopleTools is a comprehensive suite of software development tools that facilitates the creation, customization, and maintenance of applications within the Oracle PeopleSoft enterprise software ecosystem. It includes tools for development, integration, reporting, and workflow management, enhancing efficiency and user experience in business processes. <br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Oracle PeopleTools (PeopleSoft) application. We will use the SQL Server database collector for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **PeopleSoft**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the Oracle database details. Use the *Test Connection* to make sure the connection details are accurate.<br /><br />![img](./img/3.png)\\r\\n6. Click Next. Select the appropriate data that you intend to collect. For the purpose of illustration we will collect accounts, groups and user to account mapping from Oracle PeopleTools (PeopleSoft).<br /><br />![img](./img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following query to collect account information.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT REPLACE(\\r\\n    upper(OPRID), \\r\\n    \'\'\'\', \\r\\n    \'\'\\r\\n  ) AS account, \\r\\n  EMPLID AS employeeID, \\r\\n  OPRDEFNDESC AS description, \\r\\n  LASTSIGNONDTTM AS lastLoginDate \\r\\nFROM \\r\\n  dbo.PSOPRDEFN\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/5.png)\\r\\n\\r\\n8. Click **Next**. On the **User Account Mappings Data** configuration page enter the following query to map the PeopleSoft account to user identity.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT REPLACE(\\r\\n    upper(OPRID), \\r\\n    \'\'\'\', \\r\\n    \'\'\\r\\n  ) AS account, \\r\\n  EMPLID AS employeeID \\r\\nFROM \\r\\n  dbo.PSOPRDEFN\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/6.png)\\r\\n\\r\\n9. Click **Next**. In the **User Resolution Rules**, map the user to account<br /><br />![img](img/7.png)\\r\\n10. Click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect admin roles from Oracle PeopleTools (PeopleSoft) application. We will use the SQL Server database collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **PeopleSoft**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/8.png)\\r\\n5. Click **Next** and enter the database connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from PeopleSoft.<br /><br />![Alt text](img/9.png)\\r\\n7. Click **Next**. On the **General Column Names**, map the attribute names.<br /><br />![Alt text](img/10.png)\\r\\n8. Click **Next**. Under **Application Role Data** section, use the following query to collect admin roles from PeopleSoft.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT ROLENAME AS role, \\r\\n  DESCR AS description \\r\\nFROM \\r\\n  dbo.PSROLEDEFN\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\nThe following are the important attributes<br /><br />![img](img/11.png)\\r\\n\\r\\n9. Click **Next**. On the **Resource-Action Entitlements Data** section, enter the query below to collect resource action mappings for roles.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT ROLENAME AS role, \\r\\n  CLASSID AS resource, \\r\\n  \'\' AS action \\r\\nFROM \\r\\n  dbo.PSROLECLASS \\r\\nunion \\r\\nSELECT \\r\\n  DISTINCT \'\' AS role, \\r\\n  CLASSID AS resource, \\r\\n  \'\' AS action \\r\\nFROM \\r\\n  dbo.PSCLASSDEFN \\r\\nWHERE \\r\\n  CLASSID NOT IN(\\r\\n    SELECT \\r\\n      DISTINCT CLASSID \\r\\n    FROM \\r\\n      dbo.PSROLECLASS\\r\\n  )\\r\\n```\\r\\n10. Click **Next**. On the **Account Data** section, enter the query below to collect mappings for account to roles.\\r\\n```sql\\r\\nSELECT \\r\\n  DISTINCT REPLACE(ROLEUSER, \'\'\'\', \'\') AS account, \\r\\n  ROLENAME AS role \\r\\nFROM \\r\\n  dbo.PSROLEUSER\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\u200d\\r\\n```\\r\\n11. Click **Next**. In the User Evaluation, map the account to the ADC.\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <th>Associated account collector</th>\\r\\n    <th>Account value evaluates to</th>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <th>Oracle PeopleTools (PeopleSoft) ADC</th>\\r\\n    <th>Account Name</th>\\r\\n  </tr>\\r\\n</table>\\r\\n12. Click **Next** and then click **Finish**. Use the *Test* function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL015</span>"},{"id":"mangoapps","metadata":{"permalink":"/RSA/blog/mangoapps","source":"@site/blog/collections/mangoapps/mangoapps.mdx","title":"MangoApps","description":"MangoApps is a versatile collaboration platform that enables organizations to streamline communication and enhance productivity. It offers a comprehensive suite of features, including instant messaging, file sharing, task management, and team collaboration tools. With its intuitive interface and robust functionality, MangoApps empowers teams to connect, share ideas, and work together seamlessly across departments and geographies. Whether it\'s project coordination, knowledge sharing, or social engagement, MangoApps provides a unified platform that fosters efficient and effective collaboration within businesses of all sizes.MangoApps HomepageIdentities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-09-30T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"MangoApps","permalink":"/RSA/blog/tags/mango-apps"},{"inline":true,"label":"Employee Engagement","permalink":"/RSA/blog/tags/employee-engagement"},{"inline":true,"label":"Collaboration","permalink":"/RSA/blog/tags/collaboration"}],"readingTime":27.7,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"mangoapps","title":"MangoApps","date":"2023-09-30T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","MangoApps","Employee Engagement","Collaboration"],"keywords":["Collections","REST","SaaS","MangoApps","Employee Engagement","Collaboration"]},"unlisted":false,"lastUpdatedAt":1716493924000,"prevItem":{"title":"Oracle PeopleTools (PeopleSoft)","permalink":"/RSA/blog/peoplesoft"},"nextItem":{"title":"DocuSign","permalink":"/RSA/blog/docusign"}},"content":"import logoPNG from \'@site/static/img/logos/MangoApps - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><p><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>MangoApps is a versatile collaboration platform that enables organizations to streamline communication and enhance productivity. It offers a comprehensive suite of features, including instant messaging, file sharing, task management, and team collaboration tools. With its intuitive interface and robust functionality, MangoApps empowers teams to connect, share ideas, and work together seamlessly across departments and geographies. Whether it\'s project coordination, knowledge sharing, or social engagement, MangoApps provides a unified platform that fosters efficient and effective collaboration within businesses of all sizes.</p><LinkSvg /><a href=\\"https://www.mangoapps.com/\\" target=\\"_blank\\">MangoApps Homepage</a><br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the MangoApps application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **MangoApps**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details. Refer to [Token Authentication](#token) for configuring the authentication for this collector.<br /><br />![img](img/3.png).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from MangoApps<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/users.json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.ms_response.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.ms_response.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>EmployeeId</td>\\r\\n    <td>`$.ms_response.users.*.employee_id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserType</td>\\r\\n    <td>`$.ms_response.users.*.user_type`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/groups.json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.ms_response.groups.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.ms_response.groups.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/conversations/${Id}/members.json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.ms_response.members.*.email`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the collected group attributes.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n13. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n14. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of acquiring the authentication data required for collectors and connectors from MangoApps \\r\\n\\r\\n**Steps**\\r\\n1. Login to MangoApps Admin Portal.\\r\\n2. Navigate to **Integration > Webhooks**\\r\\n3. Note down the ***Client ID*** and ***Client Secret***<br /><br />![Alt text](img/17.png)\\r\\n4. Navigate to **Users > Add Users** to add a new service account user. If you already have a user account, proceed.\\r\\n5. For collections, a normal user account with no roles can be used. However, for provisioning (e.g. enable / disable accounts) the service accounts needs to have ***Network Admin role***. Navigate to **Users > Admin Roles**.\\r\\n6. Under **Roles**, select ***Network Admin***.\\r\\n7. Click **Add Admin** and assign the user by clicking **Make Network Admin**.\\r\\n---\\r\\n## Authentication\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/18.png)<br />![Alt text](img/19.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-post\\">POST</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Token URL</td>\\r\\n    <td>`https://instance.mangoapps.com/oauth2/token.json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Username</td>\\r\\n    <td>user@company.com</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Password</td>\\r\\n    <td>User Account Password</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Content-Type</td>\\r\\n    <td>`application/x-www-form-urlencoded`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">client_id=CLIENT_ID&client_secret=CLIENT_SECRET&grant_type=password&username=$&#123;TokenUsername}&password=$&#123;TokenPassword}</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Response Path</td>\\r\\n    <td>`$.access_token`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Save the collector configuration & test.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL014</span>\\r\\n\\r\\n[^API]: <LinkSvg /> https://yourinstance.com/apidoc/"},{"id":"docusign","metadata":{"permalink":"/RSA/blog/docusign","source":"@site/blog/collections/docusign/docusign.mdx","title":"DocuSign","description":"DocuSign is a leading electronic signature platform that streamlines document signing processes. Trusted by businesses globally, it enables secure, efficient, and legally binding digital transactions. Users can electronically sign, send, and manage documents from any device, reducing paperwork and enhancing productivity. DocuSign\'s robust features ensure compliance and accelerate workflows, making it an essential tool for modern business transactions.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-09-23T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Zoho","permalink":"/RSA/blog/tags/zoho"}],"readingTime":47.233333333333334,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"docusign","title":"DocuSign","date":"2023-09-23T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Zoho"],"keywords":["Collections","REST","SaaS","Zoho"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"MangoApps","permalink":"/RSA/blog/mangoapps"},"nextItem":{"title":"Zendesk","permalink":"/RSA/blog/zendesk"}},"content":"import logoPNG from \'@site/static/img/logos/DocuSign - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>DocuSign is a leading electronic signature platform that streamlines document signing processes. Trusted by businesses globally, it enables secure, efficient, and legally binding digital transactions. Users can electronically sign, send, and manage documents from any device, reducing paperwork and enhancing productivity. DocuSign\'s robust features ensure compliance and accelerate workflows, making it an essential tool for modern business transactions.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** are individuals who have accounts on the DocuSign platform. Each user has a unique login and profile within the system. Users can send, sign, and manage documents based on the permissions and access levels granted to them. Users can be assigned to specific groups and assigned permission profiles to define their capabilities within the platform.\\r\\n\\r\\n**Groups** are collections of users that allow you to manage permissions and access for multiple users simultaneously. Instead of setting permissions for each individual user, you can assign permissions to a group, and all users within that group inherit those permissions. This makes it easier to manage access rights for teams or departments. For example, you might have a \\"Sales Team\\" group with permissions tailored to sales-related tasks.\\r\\n\\r\\n**Permission profiles**, also known as permission sets, are sets of rules that define what actions users and groups are allowed to perform within the DocuSign platform. These profiles control the level of access to various features and functionalities. Permission profiles can include actions like sending envelopes, managing templates, accessing specific folders, or even administrative tasks. By assigning different permission profiles to users or groups, you can ensure that each user has the appropriate level of access based on their role and responsibilities.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the DocuSign application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **DocuSign**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)<br />![img](img/3-1.png)\\r\\n<Admonition type=\\"info\\">\\r\\n<p>Here since I am using demo instance the Base URI is https://demo.docusign.net. Verify the Base URI instance for your environment by calling the User Info API.</p><p>For more information, refer to https://developers.docusign.com/platform/auth/reference/user-info/</p>\\r\\n</Admonition>\\r\\n6. If authentication type is OAuth, refer to [OAuth2 Configuration](#oauth2) with RSA G&L section.\\r\\n7. Click **Next**. Select the data types that the collector will be collecting from DocuSign<br /><br />![img](img/4.png)\\r\\n8. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserType</td>\\r\\n    <td>`$.users.*.userType`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserStatus</td>\\r\\n    <td>`$.users.*.userStatus`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.groups.*.groupName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.groups.*.groupId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.groups.*.groupType`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*.userId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n11. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n13. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14-1.png)\\r\\n14. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/14.png)\\r\\n15. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/15.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect permission profiles from DocuSign application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **DocuSign**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/16.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from DocuSign.<br /><br />![Alt text](img/17.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/18.png)<br />![Alt text](img/6.png)<br />![Alt text](img/19.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/permission_profiles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.permissionProfiles.*.permissionProfileName`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.permissionProfiles.*.permissionProfileId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/20.png)<br />![Alt text](img/6.png)<br />![Alt text](img/21.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/Users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.users.*.permissionProfileId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*.userId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/22.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in DocuSign for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to DocuSign eSignature portal.\\r\\n2. From the main menu, click on **Integrations > Apps and Keys**.\u2003\\r\\n3. Click on **ADD APP AND INTEGRATION KEY** button.\\r\\n4. Provide a suitable App Name and click **Create App**<br />![Alt text](img/23.png)\\r\\n5. Copy the **Integration Key**, which will be used as the ***Client ID*** in OAuth authentication.<br />![Alt text](img/24.png)\\r\\n6. Under **Authentication**, click on **Add Secret Key**. Copy the generated secret key and retain it for use as ***Client Secret*** in OAuth authentication.<br />![Alt text](img/25.png)\\r\\n7. Specify the OAuth callback URL (https://instance.company.com:8443/aveksa/oauth/callback) under **Redirect URIs**.<br />![Alt text](img/26.png)\\r\\n8. Under **Allowed HTTP Methods**, check GET, since we only need permissions for GET API calls.<br /><br />![Alt text](img/27.png)\\r\\n9. Click **Save**.\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC with OAuth2 authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/28.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://account-d.docusign.com/oauth/auth` (Development)<br />`https://account.docusign.com/oauth/auth` (Production)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://account-d.docusign.com/oauth/token` (Development)<br />`https://account.docusign.com/oauth/token` (Production)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td>`signature extended`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/29.png)\\r\\n6. Login to DocuSign account.<br /><br />![Alt text](img/30.png)![Alt text](img/31.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/32.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL013</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developers.docusign.com/docs/esign-rest-api/reference/\\" target=\\"_blank\\">eSignature REST API</a>"},{"id":"zendesk","metadata":{"permalink":"/RSA/blog/zendesk","source":"@site/blog/collections/zendesk/zendesk.mdx","title":"Zendesk","description":"Zendesk is a customer support platform that streamlines interactions between businesses and their customers. It offers ticket management, knowledge base, live chat, and more, empowering organizations to deliver exceptional support experiences. With user-friendly features, Zendesk enhances customer communication and issue resolution, ultimately fostering strong relationships and improving customer satisfaction.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-09-16T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Zendesk","permalink":"/RSA/blog/tags/zendesk"},{"inline":true,"label":"ITSM","permalink":"/RSA/blog/tags/itsm"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"},{"inline":true,"label":"Help Desk","permalink":"/RSA/blog/tags/help-desk"}],"readingTime":23.566666666666666,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"zendesk","title":"Zendesk","date":"2023-09-16T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Zendesk","ITSM","Ticketing","Help Desk"],"keywords":["Collections","REST","SaaS","Zendesk","ITSM","Ticketing","Help Desk"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"DocuSign","permalink":"/RSA/blog/docusign"},"nextItem":{"title":"Okta","permalink":"/RSA/blog/okta"}},"content":"import logoPNG from \'@site/static/img/logos/Zendesk - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Zendesk is a customer support platform that streamlines interactions between businesses and their customers. It offers ticket management, knowledge base, live chat, and more, empowering organizations to deliver exceptional support experiences. With user-friendly features, Zendesk enhances customer communication and issue resolution, ultimately fostering strong relationships and improving customer satisfaction.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Zendesk application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Zendesk**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.Since we are using Token Access method for authentication, the collector will use Basic authentication type.<br /><br />![img](img/3.png)\\r\\n<Admonition type=\\"info\\">\\r\\n<p>The service account email address needs to be prefixed with /token and password will be the API token.</p><p>Refer to [Security and authentication : API Token](https://developer.zendesk.com/api-reference/introduction/security-and-auth/#api-token) for more information</p>\\r\\n</Admonition>\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Zendesk<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br /><br />**Pagination - Offset Method**<br /><br />![Alt text](img/6.png)<br /><br />**Pagination - Cursor Method**<br /><br />![Alt text](img/6-1.png)<br />![Alt text](img/7.png)<br />\\r\\n<p align=\\"center\\"></p>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>role[]</td>\\r\\n    <td>`admin`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>role[]</td>\\r\\n    <td>`agent`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastLogin</td>\\r\\n    <td>`$.users.*.last_login_at`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Verified</td>\\r\\n    <td>`$.users.*.verified`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>IsActive</td>\\r\\n    <td>`$.users.*.active`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<p></p>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br /><br />**Pagination - Offset Method**<br /><br />![Alt text](img/6.png)<br /><br />**Pagination - Cursor Method**<br /><br />![Alt text](img/6-1.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.groups.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.groups.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.groups.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/group_memberships`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.profile.login`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n13. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n14. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in Zendesk for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Zendesk admin dashboard **[Apps and integrations > APIs > Zendesk API](https://instance.zendesk.com/admin/apps-integrations/apis/zendesk-api/settings).**\\r\\n2. If you are accessing for the first time, agree to terms and conditions.\\r\\n3. Enable the ***Token Access.***<br /><br />![Alt text](img/17.png)\\r\\n4. Click on ***Add API token.***<br /><br />![Alt text](img/18.png)\\r\\n5. Provide a suitable name and copy the token for use with G&L.\\r\\n6. Click **Save**.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL012</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developer.zendesk.com/api-reference/introduction/introduction/\\" target=\\"_blank\\">Zendesk API Reference</a>"},{"id":"okta","metadata":{"permalink":"/RSA/blog/okta","source":"@site/blog/collections/okta/okta.mdx","title":"Okta","description":"Okta is a cloud-based IAM platform that offers secure user authentication, SSO, and authorization. It simplifies identity management, access control, and provisioning for organizations. With Okta, businesses can enhance security, streamline user experiences, and enable seamless access to applications and data. It supports multifactor authentication and integrations with various systems, enabling secure digital transformation and centralized identity management.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-09-09T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"MFA","permalink":"/RSA/blog/tags/mfa"},{"inline":true,"label":"Okta","permalink":"/RSA/blog/tags/okta"},{"inline":true,"label":"IAM","permalink":"/RSA/blog/tags/iam"},{"inline":true,"label":"SSO","permalink":"/RSA/blog/tags/sso"},{"inline":true,"label":"Authentication","permalink":"/RSA/blog/tags/authentication"},{"inline":true,"label":"Authorization","permalink":"/RSA/blog/tags/authorization"},{"inline":true,"label":"OAuth","permalink":"/RSA/blog/tags/o-auth"},{"inline":true,"label":"Token","permalink":"/RSA/blog/tags/token"}],"readingTime":61.666666666666664,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"okta","title":"Okta","date":"2023-09-09T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","MFA","Okta","IAM","SSO","Authentication","Authorization","OAuth","Token"],"keywords":["Collections","REST","SaaS","MFA","Okta","IAM","SSO","Authentication","Authorization","OAuth","Token"],"last_update":{"date":"3/1/2024","author":"Pradeep Kadambar"}},"unlisted":false,"lastUpdatedAt":1709272800000,"prevItem":{"title":"Zendesk","permalink":"/RSA/blog/zendesk"},"nextItem":{"title":"Lucid","permalink":"/RSA/blog/lucid"}},"content":"import logoPNG from \'@site/static/img/logos/Okta - 180x180.png\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Okta is a cloud-based IAM platform that offers secure user authentication, SSO, and authorization. It simplifies identity management, access control, and provisioning for organizations. With Okta, businesses can enhance security, streamline user experiences, and enable seamless access to applications and data. It supports multifactor authentication and integrations with various systems, enabling secure digital transformation and centralized identity management.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** - Okta allows you to create and manage user accounts, including attributes like name, email, and profile information. Users can be assigned to various groups and roles.\\r\\n\\r\\n**Groups** - Okta enables the creation of groups to organize users based on common attributes or roles. Groups help streamline user management and permissions assignment.\\r\\n\\r\\n**Group Members** - Okta allows you to add users as members of specific groups. This helps control access to resources and streamline user provisioning and management.\\r\\n\\r\\n**Roles** - Okta supports the definition and assignment of roles. Roles represent a collection of permissions or access privileges that can be granted to users or groups.\\r\\n\\r\\n**Role Members** - Okta enables the assignment of users or groups as members of specific roles. This allows for fine-grained access control and authorization based on role-based permissions.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Okta application. We will use the RSA G&L Generic REST collector for this purpose.   \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Okta**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Okta<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\r\\n<Admonition type=\\"info\\" title=\\"Pagination\\">\\r\\nOkta uses RFC-8288 (Web Linking) based [Pagination](https://developer.okta.com/docs/reference/core-okta-api/#pagination) model.\\r\\n</Admonition>\\r\\n<Admonition type=\\"info\\" title=\\"Account Status Filter Options\\">\\r\\nFor use with `filter` query parameter in the API call below.\\r\\n| Account Status   | Description                                                                                                                                                                                                                           |\\r\\n| ---------------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| ACTIVE           | This status indicates that the user account is currently active and can access resources within the system.                                                                                                                           |\\r\\n| PROVISIONED      | Users with this status have been provisioned into the system but may not have completed their activation process. They typically need to perform additional steps to fully activate their account.                                    |\\r\\n| PASSWORD_EXPIRED | Users with this status typically need to reset their password before they can log in again. Their current password has expired, and they must create a new one to regain access.                                                      |\\r\\n| SUSPENDED        | Suspended users have had their access temporarily revoked. They cannot log in or access resources until their suspension is lifted.                                                                                                   |\\r\\n| LOCKED_OUT       | This status indicates that the user\'s account has been locked due to multiple failed login attempts. Locked-out users cannot log in until their account is unlocked by an administrator or until a certain amount of time has passed. |\\r\\n\\r\\n</Admonition>\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\">\\r\\n      <span class=\\"header-2-text\\">Query Parameters</span>\\r\\n    </td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>filter</td>\\r\\n    <td>status eq \\"ACTIVE\\" (**Optional**)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.profile.login`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.*.status`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>LastLogin</td>\\r\\n    <td>`$.*.lastLogin`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>EmployeeNumber</td>\\r\\n    <td>`$.*.profile.employeeNumber`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>StatusChanged</td>\\r\\n    <td>`$.*.statusChanged`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Email</td>\\r\\n    <td>`$.*.profile.email`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<p></p>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br /><br />![Alt text](img/9.png)<br />\\r\\n<Admonition type=\\"info\\" title=\\"Group Type Options\\">\\r\\nFor use with `filter` query parameter in the API call below.\\r\\n| Group Type | Description                                                                                                                                                               |\\r\\n| ---------- | ------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\\r\\n| OKTA_GROUP | Group Profile and memberships are directly managed in Okta via static assignments or indirectly through Group rules.                                                      |\\r\\n| APP_GROUP  | Group Profile and memberships are imported and must be managed within the application that imported the Group. Active Directory and LDAP Groups also have APP_GROUP type. |\\r\\n| BUILT_IN   | Group Profile and memberships are managed by Okta and can\'t be modified.                                                                                                  |\\r\\n\\r\\n</Admonition>   \\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>filter</td>\\r\\n    <td>type eq \\"OKTA_GROUP\\" (**Optional**)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.*.profile.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.*.profile.description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.*.type`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership** page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/groups/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.profile.login`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n13. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/16.png)\\r\\n14. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect applications from Okta. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Okta**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Okta.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/apps`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.*.label`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Name</td>\\r\\n    <td>`$.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.*.status`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/apps/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **App-Role Group Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/23.png)<br />![Alt text](img/24.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v1/apps/${Id}/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`SSWS ${AuthenticationToken}` (if using Okta-propriety SSWS API token authentication scheme)<br /><br />`Bearer ${AuthenticationToken}` (if using OAuth2 authentication scheme)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Group Identifier</td>\\r\\n    <td>`$.value.*.memberName`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br />\\r\\n11. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/25.png)\\r\\n12. Click **Next**. In the **Group Evaluation**, map the account collector to group value.<br /><br />![Alt text](img/26.png)\\r\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Authentication\\r\\n### Token\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC/EDC that will be using **Token** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br />![Alt text](img/auth-token.png)\\r\\n4. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC and EDC to acquire the OAuth2 token dynamically from Okta.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC/EDC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/auth-oauth-1.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>CLIENT_ID</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>CLIENT_SECRET</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://instance.okta.com/oauth2/v1/authorize`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://instance.okta.com/oauth2/v1/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td>`offline_access`\\t- Requests a refresh token used to obtain more access tokens.<br />`okta.users.read` -\\tAllows the app to read the existing users\' profiles and credentials.<br />`okta.roles.read`\\t- Allows the app to read administrative role assignments for users.<br />`okta.groups.read`\\t- Allows the app to read information about groups and their members.<br /><br />`&state=rsagl` must be added at the end of the scope</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/auth-oauth-2.png)\\r\\n6. Login to Okta account.<br /><br />![Alt text](img/auth-oauth-3.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/auth-oauth-4.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in Okta for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Okta dashboard, https://instance.okta.com/admin/dashboard.\\r\\n2. From the main menu, navigate to **Security > API**.\u2003\\r\\n3. Under Tokens tab, click on Create token button.<br />![Alt text](img/27.png)\\r\\n4. Provide a suitable name and click ***Create token***.<br />![Alt text](img/28.png)\\r\\n5. Copy the token and retain it for use with G&L.<br />![Alt text](img/29.png)\\r\\n6. Click **OK**.\\r\\n\\r\\n## References\\r\\n- [Core Okta API](https://developer.okta.com/docs/reference/core-okta-api/)\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL011</span>"},{"id":"lucid","metadata":{"permalink":"/RSA/blog/lucid","source":"@site/blog/collections/lucid/lucid.mdx","title":"Lucid","description":"Lucidchart is a web-based diagramming and visualization tool that enables users to create flowcharts, diagrams, mind maps, and more. It offers collaborative features for teams to work together in real-time, enhancing communication and productivity. With an intuitive interface and various templates, Lucidchart simplifies complex concepts into clear visual representations.Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-09-02T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Lucid","permalink":"/RSA/blog/tags/lucid"},{"inline":true,"label":"Visualization","permalink":"/RSA/blog/tags/visualization"},{"inline":true,"label":"Charting","permalink":"/RSA/blog/tags/charting"},{"inline":true,"label":"Lucidchart","permalink":"/RSA/blog/tags/lucidchart"}],"readingTime":38,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"lucid","title":"Lucid","date":"2023-09-02T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Lucid","Visualization","Charting","Lucidchart"],"keywords":["Collections","REST","SaaS","Lucid","Visualization","Charting","Lucidchart"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Okta","permalink":"/RSA/blog/okta"},"nextItem":{"title":"Datadog","permalink":"/RSA/blog/datadog"}},"content":"import logoPNG from \'@site/static/img/logos/Lucidchart - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Lucidchart is a web-based diagramming and visualization tool that enables users to create flowcharts, diagrams, mind maps, and more. It offers collaborative features for teams to work together in real-time, enhancing communication and productivity. With an intuitive interface and various templates, Lucidchart simplifies complex concepts into clear visual representations.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u274c | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Lucid application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Lucid**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png).<br />:bulb: **Info:** Lucid only supports OAuth authentication type. Refer to Click OAuth2 Configuration with RSA G&L for more information.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Lucid<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Lucid-Api-Version</td>\\r\\n    <td>`1`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.*.userId`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>UserName</td>\\r\\n    <td>`$.*.username`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n<p></p>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/6.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/7.png)\\r\\n12. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/8.png)\\r\\n13. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect site roles and assignments from the Lucidchart application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n<Admonition type=\\"info\\">\\r\\nSince Lucid does not provide an API for listing admin roles, we will use a custom web service for the EDC. Refer to [Custom Web Service : Admin Roles](#admin--roles) for more information.\\r\\n</Admonition>\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Lucid**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Lucid.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/LucidAdminRolesv1.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.roles.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://api.lucid.co/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Lucid-Api-Version</td>\\r\\n    <td>`1`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.*.roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.*.userId`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Lucid for integration with G&L.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Lucid Developer Console, https://admin.lucid.app/developer. You need to have Developer Tools enabled by the Lucid admin for your organization. \\r\\n2. Click on New Application.<br /><br />![Alt text](img/25.png)\\r\\n3. Provide a suitable name and click Create.<br /><br />![Alt text](img/26.png)\\r\\n4. Click on OAuth 2.0 tab.<br /><br />![Alt text](img/27.png)\\r\\n5. Provide a client name and click Create OAuth 2.0 client.<br /><br />![Alt text](img/28.png)\\r\\n6. Copy the client id and client secret.<br /><br />![Alt text](img/29.png)\\r\\n7. Click on Add Redirect URI and add the G&L OAuth call back URL https://instance.securid.com/aveksa/oauth/callback.<br /><br />![Alt text](img/30.png) \\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/31.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://lucid.app/oauth2/authorizeAccount`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://api.lucid.co/oauth2/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td>`offline_access account.user:readonly`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/32.png)\\r\\n6. Login to Lucid account.<br /><br />![Alt text](img/33.png)![Alt text](img/34.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/35.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate\\r\\n---\\r\\n## Custom Web Service\\r\\n### Admin  Roles\\r\\nSince Lucid does not provide an API for listing admin roles, we will use a custom JSP that will publish the site roles. \\r\\n\\r\\n**Steps**\\r\\n1. Open a text editor and save the contents below as `LucidAdminRolesv1.jsp.`\\r\\n```java\\r\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\r\\n<%\\r\\n    String jsonData = \\"{\\"\\r\\n        + \\"\\\\\\"roles\\\\\\": [\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"billing-admin\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Billing admins can change payment options for the account.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"document-approver\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Document approvers can approve documents.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"team-admin\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Team admins can access and edit team settings, including user roles and groups.\\\\\\"}\\"\\r\\n        + \\"]\\"\\r\\n        + \\"}\\";\\r\\n%>\\r\\n\\r\\n<%\\r\\n    response.setContentType(\\"application/json\\");\\r\\n    out.print(jsonData);\\r\\n%>\\r\\n```\\r\\n2. Login to RSA G&L console as AveksaAdmin.\\r\\n3. Navigate to ***Admin > User Interface.***\\r\\n4. Click on ***Files***.\\r\\n5. Select External JSP Pages and click on ***Upload***.\\r\\n6. Select the `LucidAdminRolesv1.jsp` and click ***OK***.\\r\\n7. Verify by accessing this URL in the browser https://instance.securid.com/aveksa/custom/external_jsp/LucidAdminRolesv1.jsp\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL010</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developer.lucid.co/rest-api/v1\\" target=\\"_blank\\">Developer Docs</a>"},{"id":"datadog","metadata":{"permalink":"/RSA/blog/datadog","source":"@site/blog/collections/datadog/datadog.mdx","title":"Datadog","description":"Datadog is a monitoring and analytics platform that helps organizations gain insights into their applications and infrastructure. It offers real-time visibility, alerting, and visualization tools to monitor performance, troubleshoot issues, and optimize resources across cloud, on-premises, and hybrid environments. With its user-friendly interface, Datadog empowers teams to ensure system reliability and improve overall operational efficiency.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-08-26T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Datadog","permalink":"/RSA/blog/tags/datadog"},{"inline":true,"label":"Monitoring","permalink":"/RSA/blog/tags/monitoring"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"}],"readingTime":39.03333333333333,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"datadog","title":"Datadog","date":"2023-08-26T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Datadog","Monitoring","Analytics"],"keywords":["Collections","REST","SaaS","Datadog","Monitoring","Analytics"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"Lucid","permalink":"/RSA/blog/lucid"},"nextItem":{"title":"PagerDuty","permalink":"/RSA/blog/pagerduty"}},"content":"import logoPNG from \'@site/static/img/logos/Datadog - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Datadog is a monitoring and analytics platform that helps organizations gain insights into their applications and infrastructure. It offers real-time visibility, alerting, and visualization tools to monitor performance, troubleshoot issues, and optimize resources across cloud, on-premises, and hybrid environments. With its user-friendly interface, Datadog empowers teams to ensure system reliability and improve overall operational efficiency.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** are individuals who interact with Datadog to monitor and manage applications and infrastructure. Each user has a unique login and can access various features based on their assigned roles and permissions. Users can create and customize dashboards, set up alerts, analyze data, and contribute to overall monitoring efforts.\\r\\n\\r\\n**Teams** are groups of users that work together on specific projects, departments, or functions. Teams provide a way to organize and streamline access to resources within Datadog. By grouping users into teams, administrators can efficiently manage permissions, access control, and data visibility. Teams enhance collaboration by allowing members to collectively contribute to monitoring tasks and share insights.\\r\\n\\r\\n**Roles** define the level of access and permissions that users and teams have within Datadog. Different roles grant varying degrees of control over the platform\'s features and data. For example, roles can include \\"Admin\\" with full access and management privileges, \\"Read-Only\\" with view-only capabilities, or custom roles tailored to specific needs. Roles ensure that users and teams have appropriate levels of control and responsibility while maintaining security and data integrity.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Datadog application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Datadog**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Datadog<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-API-KEY</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-APPLICATION-KEY</td>\\r\\n    <td>`APPLICATION_KEY`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.data.*.attributes.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Status</td>\\r\\n    <td>`$.data.*.attributes.status`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/team`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-API-KEY</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-APPLICATION-KEY</td>\\r\\n    <td>`APPLICATION_KEY`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.data.*.attributes.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.data.*.attributes.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/team/${Id}/memberships`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-API-KEY</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-APPLICATION-KEY</td>\\r\\n    <td>`APPLICATION_KEY`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.data.*.relationships.user.data.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect user roles and assignments from the Datadog application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Datadog**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Datadog.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/6.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-API-KEY</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-APPLICATION-KEY</td>\\r\\n    <td>`APPLICATION_KEY`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.data.*.attributes.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/api/v2/roles/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-API-KEY</td>\\r\\n    <td>`${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>DD-APPLICATION-KEY</td>\\r\\n    <td>`APPLICATION_KEY`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.data.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up Datadog for integration with G&L. Datadog API calls require application key and API key for most invocations.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Datadog console and navigate to organization settings, https://us5.datadoghq.com/organization-settings.\\r\\n2. Under **Access**, click on **Application Keys**.\\r\\n3. Click on **New Key**.\\r\\n4. Provide a suitable name and click **Create Key**.<br />![Alt text](img/25.png)\\r\\n5. Copy the key value. We will refer to this as `APPLICATION_KEY`<br />![Alt text](img/26.png)\\r\\n6. Click on **Edit** next to **Scope**. Select the scopes as shown below.<br /><br />![Alt text](img/27.png)\\r\\n7. Click **Save** and then click **Finish**.\\r\\n8. Under **Access**, click on **API Keys**.\\r\\n9. Click on **New Key**.<br />![Alt text](img/28.png)\\r\\n10. Copy the key value and click **Finish**.<br />![Alt text](img/29.png) \\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL009</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://docs.datadoghq.com/api/latest/\\" target=\\"_blank\\">API Reference Docs</a>"},{"id":"pagerduty","metadata":{"permalink":"/RSA/blog/pagerduty","source":"@site/blog/collections/pagerduty/pagerduty.mdx","title":"PagerDuty","description":"PagerDuty is a leading digital operations management platform that empowers teams to proactively manage and respond to incidents in real time. By providing actionable insights, automation, and collaboration tools, PagerDuty ensures business continuity and exceptional customer experiences. It centralizes alerts, streamlines incident resolution, and enables teams to work seamlessly across the entire organization, minimizing downtime and optimizing operational efficiency.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-08-19T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Automation","permalink":"/RSA/blog/tags/automation"},{"inline":true,"label":"PagerDuty","permalink":"/RSA/blog/tags/pager-duty"}],"readingTime":48.833333333333336,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"pagerduty","title":"PagerDuty","date":"2023-08-19T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Automation","PagerDuty"],"keywords":["Collections","REST","SaaS","Automation","PagerDuty"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Datadog","permalink":"/RSA/blog/datadog"},"nextItem":{"title":"Asana","permalink":"/RSA/blog/asana"}},"content":"import logoPNG from \'@site/static/img/logos/PagerDuty - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\nimport Admonition from \\"@theme/Admonition\\";\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>PagerDuty is a leading digital operations management platform that empowers teams to proactively manage and respond to incidents in real time. By providing actionable insights, automation, and collaboration tools, PagerDuty ensures business continuity and exceptional customer experiences. It centralizes alerts, streamlines incident resolution, and enables teams to work seamlessly across the entire organization, minimizing downtime and optimizing operational efficiency.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Teams** are a way to organize users and objects in PagerDuty. They can be used to control who has access to different objects, such as escalation policies, users, schedules, and services. Teams can also be used to customize the PagerDuty web app by filtering for information relevant to the team\'s associated objects.\\r\\n\\r\\n**User roles** define the level of access that a user has to PagerDuty objects.\\r\\n\\r\\n| Role | Description |\\r\\n| ----------- | ----------- |\\r\\n| admin | Has full access to all objects and configurations in the account. Can create, update, and delete users, teams, schedules, escalation policies, services, and integrations. Can also manage user permissions. |\\r\\n| limited_user | Can view objects and configurations, but cannot make any modifications. |\\r\\n| observer | Can view objects, but cannot make any modifications. |\\r\\n| owner | Has full access to objects and configurations within their team. Can create, update, and delete users, schedules, escalation policies, and services. Can also manage user permissions within their team. |\\r\\n| read_only_user | Can view objects, but cannot make any modifications. |\\r\\n| restricted_access | Can only view incidents and alerts that they are directly involved in. |\\r\\n| read_only_limited_user | Can only view objects that they have been granted access to. |\\r\\n| user | Can view objects and configurations, but cannot make any modifications. |\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the PagerDuty application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **PagerDuty**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from PagerDuty<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Token token=${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.users.*.type`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>fields</td>\\r\\n    <td>`id,name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Token token=${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.teams.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.teams.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.teams.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/groups/${Id}/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Token token=${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.members.*.user.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect user roles and assignments from the PagerDuty application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n<Admonition type=\\"info\\">\\r\\nSince PagerDuty does not provide an API for listing user roles, we will use a custom web service for the EDC. Refer to [Custom Web Service : User Roles](#site-roles) for more information.\\r\\n</Admonition>\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **PagerDuty**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from PagerDuty.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/PagerDutyUserRolesv1.jsp`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.roles.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/20.png)<br />![Alt text](img/6.png)<br />![Alt text](img/21.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`https://api.pagerduty.com/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Token token=${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.users.*.role`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/22.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/23.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up an API access key in PagerDuty for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to PagerDuty console https://instance.pagerduty.com.\\r\\n2. Under **Integrations**, click on **API Access Keys**.<br /><br />![Alt text](img/24.png)\\r\\n3. Click on ***Create new API key***.\\r\\n4. Provide a meaningful name. Since we are going to use this key for collections, check the ***Read-only API Key*** option.<br />![Alt text](img/25.png)\\r\\n5. Click on ***Create Key***.<br />![Alt text](img/26.png)\\r\\n6. Copy the Secret and click **Done**.\\r\\n\\r\\n## Custom Web Service\\r\\n### Site Roles\\r\\nSince PagerDuty does not provide an API for listing site roles, we will use a custom JSP that will publish the site roles. \\r\\n\\r\\n**Steps**\\r\\n1. Open a text editor and save the contents below as `PagerDutyUserRolesv1.jsp.`\\r\\n```java\\r\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\r\\n<%\\r\\n    String jsonData = \\"{\\"\\r\\n        + \\"\\\\\\"roles\\\\\\": [\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"admin\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Has full access to all objects and configurations in the account. Can create, update, and delete users, teams, schedules, escalation policies, services, and integrations. Can also manage user permissions.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"limited_user\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can view objects and configurations, but cannot make any modifications.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"observer\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can view objects, but cannot make any modifications.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"owner\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Has full access to objects and configurations within their team. Can create, update, and delete users, schedules, escalation policies, and services. Can also manage user permissions within their team.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"read_only_user\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can view objects, but cannot make any modifications.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"restricted_access\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can only view incidents and alerts that they are directly involved in.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"read_only_limited_user\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can only view objects that they have been granted access to.\\\\\\"},\\"\\r\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"user\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Can view objects and configurations, but cannot make any modifications.\\\\\\"}\\"\\r\\n        + \\"]\\"\\r\\n        + \\"}\\";\\r\\n%>\\r\\n\\r\\n<%\\r\\n    response.setContentType(\\"application/json\\");\\r\\n    out.print(jsonData);\\r\\n%>\\r\\n```\\r\\n2. Login to RSA G&L console as AveksaAdmin.\\r\\n3. Navigate to ***Admin > User Interface.***\\r\\n4. Click on ***Files***.\\r\\n5. Select External JSP Pages and click on ***Upload***.\\r\\n6. Select the `PagerDutyUserRolesv1.jsp` and click ***OK***.\\r\\n7. Verify by accessing this URL in the browser https://instance.securid.com/aveksa/custom/external_jsp/PagerDutyUserRolesv1.jsp \\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL008</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developer.pagerduty.com/api-reference\\" target=\\"_blank\\">PagerDuty API</a>"},{"id":"asana","metadata":{"permalink":"/RSA/blog/asana","source":"@site/blog/collections/asana/asana.mdx","title":"Asana","description":"Asana is a powerful project management tool that enhances team collaboration and task organization. It simplifies complex workflows, fosters clear communication, and ensures efficient task tracking. With its user-friendly interface and customizable features, Asana streamlines project management, enabling teams to achieve goals and deliver results effectively.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-08-12T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Asana","permalink":"/RSA/blog/tags/asana"},{"inline":true,"label":"Project Management","permalink":"/RSA/blog/tags/project-management"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":46.8,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"asana","title":"Asana","date":"2023-08-12T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Asana","Project Management","Ticketing"],"keywords":["Collections","REST","SaaS","Asana","Project Management","Ticketing"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"PagerDuty","permalink":"/RSA/blog/pagerduty"},"nextItem":{"title":"Dynatrace","permalink":"/RSA/blog/dynatrace"}},"content":"import logoPNG from \'@site/static/img/logos/Asana - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Asana is a powerful project management tool that enhances team collaboration and task organization. It simplifies complex workflows, fosters clear communication, and ensures efficient task tracking. With its user-friendly interface and customizable features, Asana streamlines project management, enabling teams to achieve goals and deliver results effectively.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\nA **workspace** in Asana is the top-level container for organizing and managing work. It serves as a central hub where teams, projects, tasks, and other resources are grouped together. Workspaces can be thought of as separate environments, and users can create multiple workspaces to keep different projects or teams distinct from each other. Each workspace has its own set of users, projects, and tasks.\\r\\n\\r\\n**Users** are individuals who have access to an Asana workspace. They can create and manage tasks, projects, and collaborate with other team members. Users can be assigned tasks, comment on tasks, contribute to projects, and work together to achieve shared goals within the workspace.\\r\\n\\r\\n**Teams** are groups of users who work together on specific projects or share common goals within a workspace. Teams allow users to collaborate more efficiently by providing a dedicated space to manage and organize tasks related to a particular function, project, or department. Teams can have their own projects, tasks, and members. Users can belong to multiple teams within a workspace, which allows for flexible collaboration across different groups.\\r\\n\\r\\n**Projects** in Asana are used to organize and track tasks and work items related to a specific goal, initiative, or task list. Projects provide a structured way to manage work by breaking it down into smaller tasks and assigning responsibilities to team members. Within a project, users can create tasks, set due dates, assign owners, add descriptions, and attach files. Projects can be organized into sections or categories to further group and prioritize tasks.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Asana application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Asana**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Asana<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>opt_fields</td>\\r\\n    <td>`email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.data.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.gid`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/workspaces/WORKSPACE_ID/teams` (Replace with your workspace ID)</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>opt_fields</td>\\r\\n    <td>`name,description,visibility`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.data.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.gid`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.data.*.description`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Visibility</td>\\r\\n    <td>`$.data.*.visibility`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/teams/${Id}/team_memberships`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>opt_fields</td>\\r\\n    <td>`user`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.data.*.user.gid`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect projects and assignments from the Asana application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Asana**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Asana.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/projects`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>opt_fields</td>\\r\\n    <td>`name,notes,owner`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.data.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.data.*.gid`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.data.*.notes`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Owner</td>\\r\\n    <td>`$.data.*.owner.gid`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/projects`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>opt_fields</td>\\r\\n    <td>`members`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.data.*.gid`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.data.*.members.*.gid`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up a service account in Asana for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Asana Developer console, https://app.asana.com/0/my-apps.\\r\\n2. Click on Create new app.<br /><br />![Alt text](img/25.png)\\r\\n3. Provide a suitable name, and click **Create app**<br /><br />![Alt text](img/26.png)\\r\\n4. Copy the ***Client ID*** and ***Secret***.<br /><br />![Alt text](img/27.png)\\r\\n5. Click on **Configure > OAuth**\\r\\n6. Add the redirect URL for the G&L instance https://instance.securid.com:443/aveksa/oauth/callback <br /><br />![Alt text](img/28.png)\\r\\n7. Navigate to **Manage Distribution** under **Test & Distribute** section. Select ***Any Workspace*** and click **Save Changes**.<br /><br />![Alt text](img/29.png)\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/30.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`\\thttps://app.asana.com/-/oauth_authorize`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://app.asana.com/-/oauth_token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td>`default`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on Get OAuth 2.0 Access Token.\\r\\n5. Click on Proceed For Authorization.<br /><br />![Alt text](img/31.png)\\r\\n6. Login to Asana account.<br /><br />![Alt text](img/32.png)<br />![Alt text](img/33.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/34.png)\\r\\n8. Click Close.\\r\\n9. Save the collector configuration & test.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL007</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://developers.asana.com/reference/rest-api-reference\\" target=\\"_blank\\">API Reference</a>"},{"id":"dynatrace","metadata":{"permalink":"/RSA/blog/dynatrace","source":"@site/blog/collections/dynatrace/dynatrace.md","title":"Dynatrace","description":"Dynatrace is a software intelligence company that specializes in application performance management (APM) and observability solutions for modern cloud environments. Its platform provides real-time insights into the performance of applications and the underlying infrastructure that supports them. Dynatrace\'s primary goal is to help organizations ensure the optimal functioning of their digital services and applications, especially in complex and dynamic environments.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-08-05T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Monitoring","permalink":"/RSA/blog/tags/monitoring"},{"inline":true,"label":"APM","permalink":"/RSA/blog/tags/apm"},{"inline":true,"label":"Dynatrace","permalink":"/RSA/blog/tags/dynatrace"}],"readingTime":26.6,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"dynatrace","title":"Dynatrace","date":"2023-08-05T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Monitoring","APM","Dynatrace"],"keywords":["Collections","REST","SaaS","Monitoring","APM","Dynatrace"]},"unlisted":false,"lastUpdatedAt":1716493924000,"prevItem":{"title":"Asana","permalink":"/RSA/blog/asana"},"nextItem":{"title":"Zoho CRM","permalink":"/RSA/blog/zohocrm"}},"content":"import logoPNG from \'@site/static/img/logos/Dynatrace - 180x180.png\';\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\n\\n<table>\\n  <tr>\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Dynatrace is a software intelligence company that specializes in application performance management (APM) and observability solutions for modern cloud environments. Its platform provides real-time insights into the performance of applications and the underlying infrastructure that supports them. Dynatrace\'s primary goal is to help organizations ensure the optimal functioning of their digital services and applications, especially in complex and dynamic environments.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\n  </tr>\\n</table>\\n\x3c!-- truncate --\x3e\\n\\n## Application\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Application**.\\n3. Click on **Create Application** and select **Other Application**.\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\n5. Click **Finish**.\\n---\\n## Account Collector\\nThis section explains the process for configuring an account collector for the Dynatrace application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Dynatrace**.\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\n5. Click **Next** and enter the connection details. Refer to [Token Authentication](#token) for more information on authentication configuration.<br /><br />![img](img/3.png)\\n6. Click **Next**. Select the data types that the collector will be collecting from Dynatrace<br /><br />![img](img/4.png)\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/7.png)\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$.items.*.email`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.items.*.uid`</td>\\n  </tr>\\n  <tr>\\n    <td>UserStatus</td>\\n    <td>`$.items.*.userStatus`</td>\\n  </tr>\\n  <tr>\\n    <td>LastLogin</td>\\n    <td>`$.items.*.userLoginMetadata.lastSuccessfulLogin`</td>\\n  </tr>\\n</table>\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/9.png)\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>GroupId</td>\\n    <td>`$.items.*.name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.items.*.uuid`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$.items.*.description`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups/${Id}/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n</table>\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\n\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\n\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Application Setup\\nThis section explains the process of setting up a service account in Dynatrace for use within the collections process.\\n\\n**Steps**\\n1. Login to Dynatrace Account Management console https://myaccount.dynatrace.com/account/home.\\n2. Under Identity & access management, click on OAuth clients.<br /><br />![Alt text](img/17.png)\\n3. Click on Create client.<br /><br />![Alt text](img/18.png)\\n4. Provide a valid (existing / Active) user email address and a meaningful description. We will restrict permissions to view user and groups data.<br /><br />![Alt text](img/19.png)\\n5. Click Create client.<br /><br />![Alt text](img/20.png)\\n6. Copy the client ID, client secret and account ID (portion after `urn:daccount:`).\\n---\\n## Authentication\\n### Token\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/22.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-post\\">POST</span></td>\\n  </tr>\\n  <tr>\\n    <td>Token URL</td>\\n    <td>`https://sso.dynatrace.com/sso/oauth2/token`</td>\\n  </tr>\\n  <tr>\\n    <td>Username</td>\\n    <td>Client ID</td>\\n  </tr>\\n  <tr>\\n    <td>Password</td>\\n    <td>Client Secret</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Content-Type</td>\\n    <td>`application/x-www-form-urlencoded`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\">grant_type=client_credentials&client_id=$&#123;TokenUsername}&client_secret=$&#123;TokenPassword}&scope=account-idm-read</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Response Path</td>\\n    <td>`$.access_token`</td>\\n  </tr>\\n</table>\\n4. Save the collector configuration & test.\\n\\n> <span class=\\"blog-id-text\\">COL006</span>\\n\\n[^API]: <LinkSvg /><a href=\\"https://www.dynatrace.com/support/help/dynatrace-api\\" target=\\"_blank\\">Dynatrace API</a>"},{"id":"zohocrm","metadata":{"permalink":"/RSA/blog/zohocrm","source":"@site/blog/collections/zohocrm/zohocrm.mdx","title":"Zoho CRM","description":"Zoho CRM empowers businesses with a comprehensive customer relationship management solution. It streamlines sales, marketing, and support processes, fostering efficient customer engagement. Through a user-friendly interface, it offers tools for lead management, analytics, and automation, enabling businesses to build lasting relationships, drive growth, and make informed decisions.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-07-29T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"CRM","permalink":"/RSA/blog/tags/crm"},{"inline":true,"label":"Zoho","permalink":"/RSA/blog/tags/zoho"}],"readingTime":42.06666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"zohocrm","title":"Zoho CRM","date":"2023-07-29T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","CRM","Zoho"],"keywords":["Collections","REST","SaaS","CRM","Zoho"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Dynatrace","permalink":"/RSA/blog/dynatrace"},"nextItem":{"title":"PingOne","permalink":"/RSA/blog/pingone"}},"content":"import logoPNG from \'@site/static/img/logos/Zoho CRM - 180x180.png\';\\r\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\r\\n\\r\\n<table>\\r\\n  <tr>\\r\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Zoho CRM empowers businesses with a comprehensive customer relationship management solution. It streamlines sales, marketing, and support processes, fostering efficient customer engagement. Through a user-friendly interface, it offers tools for lead management, analytics, and automation, enabling businesses to build lasting relationships, drive growth, and make informed decisions.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\r\\n  </tr>\\r\\n</table>\\r\\n\\r\\n\x3c!-- truncate --\x3e\\r\\n\\r\\n**Users** are individuals who have access to your Zoho CRM account. Each user is associated with a profile and can be assigned specific roles and user group memberships. The combination of profile, roles, and user group memberships defines a user\'s overall access and permissions.\\r\\n\\r\\n**Profiles** serve as the foundation of the hierarchy. Each user is assigned a profile that determines their basic access settings, available features, and modules they can access. Profiles are templates that define a user\'s general CRM experience.\\r\\n\\r\\n**Roles** build upon profiles by adding specific permissions and access rights. Roles allow you to control what records and modules a user can access or manipulate. Users with the same profile but different roles can have different levels of access within the CRM.\\r\\n\\r\\n**User Groups** are collections of users who share similar roles, responsibilities, or access requirements. User groups allow for efficient management of permissions. Roles and profiles can be assigned to user groups, making it easier to apply consistent access settings to multiple users.\\r\\n\\r\\n## Application\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Application**.\\r\\n3. Click on **Create Application** and select **Other Application**.\\r\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\r\\n5. Click **Finish**.\\r\\n---\\r\\n## Account Collector\\r\\nThis section explains the process for configuring an account collector for the Zoho CRM application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Zoho CRM**.\\r\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\r\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Zoho CRM<br /><br />![img](img/4.png)\\r\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>AccountId</td>\\r\\n    <td>`$.users.*.email`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Type</td>\\r\\n    <td>`$.users.*.status`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/settings/user_groups`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>GroupId</td>\\r\\n    <td>`$.user_groups.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.user_groups.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.user_groups.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/settings/user_groups/${Id}/sources`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.sources.*.source.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\r\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\r\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\r\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\r\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\r\\n\\r\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\r\\n\\r\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Entitlement Collector\\r\\nThis section explains the process for configuring an entitlement collector to collect user roles and assignments from the Zoho CRM application. We will use the RSA G&L Generic REST collector for this purpose.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as AveksaAdmin.\\r\\n2. Navigate to **Resources > Applications**.\\r\\n3. Click on **Zoho CRM**.\\r\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\r\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\r\\n6. Click **Next**. Select the data types that the collector will be collecting from Zoho CRM.<br /><br />![Alt text](img/18.png)\\r\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/settings/roles`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>ApplicationRoleId</td>\\r\\n    <td>`$.roles.*.name`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Id</td>\\r\\n    <td>`$.roles.*.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Description</td>\\r\\n    <td>`$.roles.*.description`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Method</td>\\r\\n    <td><span class=\\"method-get\\">GET</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>URL</td>\\r\\n    <td>`/users`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Accept</td>\\r\\n    <td>`application/json`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authorization</td>\\r\\n    <td>`Bearer ${AuthenticationToken}`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Application Role Id</td>\\r\\n    <td>`$.users.*.role.id`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Account Identifier</td>\\r\\n    <td>`$.users.*.id`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\r\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\r\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\r\\n---\\r\\n## Application Setup\\r\\nThis section explains the process of setting up an API access key in Zoho CRM for use within the collections process.\\r\\n\\r\\n**Steps**\\r\\n1. Login to Zoho API console, https://api-console.zoho.com/.\\r\\n2. Click on Add Client.\\r\\n3. Select the Server-based Applications client type.<br /><br />![Alt text](img/25.png)\\r\\n4. Provide a suitable name, and the redirect URI<br /><br />![Alt text](img/26.png)\\r\\n5. Copy the Client ID and Secret.<br /><br />![Alt text](img/27.png)\\r\\n---\\r\\n## Authentication\\r\\n### OAuth2\\r\\nThis section explains the process of setting up RSA G&L ADC with OAuth2 authentication.\\r\\n\\r\\n**Steps**\\r\\n1. Login to RSA G&L console as System Administrator.\\r\\n2. Create or Edit a generic REST ADC that will be using **OAuth2** authentication.\\r\\n3. On the **Connection Details** page, configure the following. Refer to [Authorization Request](https://www.zoho.com/accounts/protocol/oauth/web-apps/authorization.html) for information regarding ***access_type*** and ***prompt*** parameters in the request.<br /><br />![Alt text](img/28.png)<br />\\r\\n<table class=\\"table-container\\">\\r\\n  <tr>\\r\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client ID</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Client Secret</td>\\r\\n    <td>-</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Authentication URL</td>\\r\\n    <td>`https://accounts.zoho.com/oauth/v2/auth`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Access Token URL</td>\\r\\n    <td>`https://accounts.zoho.com/oauth/v2/token`</td>\\r\\n  </tr>\\r\\n  <tr>\\r\\n    <td>Scope</td>\\r\\n    <td>`ZohoCRM.settings.user_groups.READ ZohoCRM.settings.roles.READ ZohoCRM.users.READ&access_type=offline&prompt=consent`</td>\\r\\n  </tr>\\r\\n</table>\\r\\n4. Click on **Get OAuth 2.0 Access Token**.\\r\\n5. Click on **Proceed For Authorization**.<br /><br />![Alt text](img/29.png)\\r\\n6. Login to Zoho CRM account.<br /><br />![Alt text](img/30.png)\\r\\n7. The below message indicates that RSA G&L has successfully acquired a token.<br /><br />![Alt text](img/31.png)\\r\\n8. Click **Close**.\\r\\n9. Save the collector configuration. Use the `Test` function to make sure the configurations are accurate.\\r\\n\\r\\n> <span class=\\"blog-id-text\\">COL005</span>\\r\\n\\r\\n[^API]: <LinkSvg /><a href=\\"https://www.zoho.com/crm/developer/docs/api/v5/\\" target=\\"_blank\\">Zoho CRM V5 APIs</a>"},{"id":"pingone","metadata":{"permalink":"/RSA/blog/pingone","source":"@site/blog/collections/pingone/pingone.md","title":"PingOne","description":"PingOne is an identity and access management (IAM) solution by Ping Identity. It offers secure user authentication, authorization, and single sign-on across applications. With advanced features like multifactor authentication and adaptive security, PingOne ensures streamlined access control while enhancing user experience and safeguarding sensitive data.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c","date":"2023-07-22T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SSO","permalink":"/RSA/blog/tags/sso"},{"inline":true,"label":"IAM","permalink":"/RSA/blog/tags/iam"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"MFA","permalink":"/RSA/blog/tags/mfa"},{"inline":true,"label":"PingOne","permalink":"/RSA/blog/tags/ping-one"},{"inline":true,"label":"PingIdentity","permalink":"/RSA/blog/tags/ping-identity"},{"inline":true,"label":"Authentication","permalink":"/RSA/blog/tags/authentication"},{"inline":true,"label":"Authorization","permalink":"/RSA/blog/tags/authorization"}],"readingTime":31.833333333333332,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"pingone","title":"PingOne","date":"2023-07-22T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SSO","IAM","SaaS","MFA","PingOne","PingIdentity","Authentication","Authorization"],"keywords":["Collections","REST","SSO","IAM","SaaS","MFA","PingOne","PingIdentity","Authentication","Authorization"]},"unlisted":false,"lastUpdatedAt":1716493924000,"prevItem":{"title":"Zoho CRM","permalink":"/RSA/blog/zohocrm"},"nextItem":{"title":"Tableau","permalink":"/RSA/blog/Tableau"}},"content":"import logoPNG from \'@site/static/img/logos/Ping Identity - 180x180.png\';\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\n\\n<table>\\n  <tr>\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>PingOne is an identity and access management (IAM) solution by Ping Identity. It offers secure user authentication, authorization, and single sign-on across applications. With advanced features like multifactor authentication and adaptive security, PingOne ensures streamlined access control while enhancing user experience and safeguarding sensitive data.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u274c | Entitlements \u274c</td>\\n  </tr>\\n</table>\\n\\n\x3c!-- truncate --\x3e\\n\\n## Application\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Application**.\\n3. Click on **Create Application** and select **Other Application**.\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\n5. Click **Finish**.\\n---\\n## Account Collector\\nThis section explains the process for configuring an account collector for the PingOne application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **PingOne**.\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\n5. Click **Next** and enter the connection details. PingOne supports both OAuth and API key based authentication. We will token authentication for our collectors in this article.  Refer to [Token Authentication](#token) section.<br /><br />![img](img/3.png)\\n6. Click **Next**. Select the data types that the collector will be collecting from PingOne<br /><br />![img](img/4.png)\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/7.png)<br />\\n<p align=\\"center\\"></p>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$._embedded.users.*.email`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$._embedded.users.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Status</td>\\n    <td>`$._embedded.users.*.verifyStatus`</td>\\n  </tr>\\n  <tr>\\n    <td>IsEnabled</td>\\n    <td>`$._embedded.users.*.enabled`</td>\\n  </tr>\\n  <tr>\\n    <td>UserName</td>\\n    <td>`$._embedded.users.*.username`</td>\\n  </tr>\\n</table>\\n<p></p>\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/9.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>GroupId</td>\\n    <td>`$._embedded.groups.*.name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$._embedded.groups.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$._embedded.groups.*.description`</td>\\n  </tr>\\n  <tr>\\n    <td>Owner</td>\\n    <td>`$._embedded.groups.*.customData.groupOwner`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/11.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/users/${Id}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>include</td>\\n    <td>`memberOfGroupIDs`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Group Identifier</td>\\n    <td>`$.memberOfGroupIDs.*`</td>\\n  </tr>\\n</table>\\n10. Click **Next**. On the **Subgroup Membership** page, enter the following configurations.<br /><br />![Alt text](img/12.png)<br />![Alt text](img/13.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups/${Id}/memberOfGroups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Subgroup Identifier</td>\\n    <td>`$._embedded.groupMemberships.*.id`</td>\\n  </tr>\\n</table>\\n11. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/14.png)\\n12. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/15.png)\\n13. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/16.png)\\n14. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/17.png)\\n15. Click **Next**. In the **Member Account Resolution Rules**, map the account attribute.<br /><br />![Alt text](img/18.png)\\n16. Click **Next**. In the **Sub-group Resolution Rules**, map the group attribute.<br /><br />![Alt text](img/19.png)\\n17. Click **Next**. In the **Group Owner Resolution Rules**, map the group attribute.<br /><br />![Alt text](img/20.png)\\n18. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Application Setup\\nThis section explains the process of setting up a service account in PingOne for use within the collections process.\\n\\n**Steps**\\n1. Login to PingOne console https://console.pingone.com/index.html \\n2. Navigate to **Connections > Applications**.<br /><br />![Alt text](img/21.png)\\n3. Click on **Add Applications**.<br /><br />![Alt text](img/22.png)\\n4. Enter a suitable name and description and select application type as ***Worker***.<br /><br />![Alt text](img/23.png)\\n5. Click on **Save**.\\n6. Click on the toggle to enable the application. Click on **Grant Roles** to add the necessary roles for the integration account.<br /><br />![Alt text](img/24.png)\\n7. Add ***Identity Data Read Only Permissions*** roles and click **Save**.<br /><br />![Alt text](img/25.png)\\n8. Click on **Configuration** tab and copy the Client ID and Client Secret.<br /><br />![Alt text](img/26.png)\\n\\n## Authentication\\n### Token\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/27.png)<br />![Alt text](img/28.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-post\\">POST</span></td>\\n  </tr>\\n  <tr>\\n    <td>Token URL</td>\\n    <td>`https://auth.pingone.com/YOUR_ENV_ID/as/token`</td>\\n  </tr>\\n  <tr>\\n    <td>Username</td>\\n    <td>NA</td>\\n  </tr>\\n  <tr>\\n    <td>Password</td>\\n    <td>NA</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Content-Type</td>\\n    <td>`application/x-www-form-urlencoded`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Basic AUTH_STRING`<br /><br />AUTH_STRING - The Base64 encoded string of `Client_ID:Client_Secret`. The REST API to get the token requires basic authentication to be setup, instead of standard practice of sending the credentials in the POST body.</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\">grant_type=client_credentials</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Response Path</td>\\n    <td>`$.access_token`</td>\\n  </tr>\\n</table>\\n4. Save the collector configuration & test.\\n\\n> <span class=\\"blog-id-text\\">COL004</span>\\n \\n[^API]: <LinkSvg /><a href=\\"https://www.PingOne.com/support/help/PingOne-api\\" target=\\"_blank\\">PingOne API</a>"},{"id":"Tableau","metadata":{"permalink":"/RSA/blog/Tableau","source":"@site/blog/collections/tableau/tableau.md","title":"Tableau","description":"Tableau is a powerful data visualization tool that transforms complex datasets into interactive and insightful visuals, aiding informed decision-making. Its user-friendly interface enables easy creation of charts, graphs, and dashboards, enhancing data exploration and presentation across various industries and professions.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-07-15T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Tableau","permalink":"/RSA/blog/tags/tableau"},{"inline":true,"label":"Business Intelligence","permalink":"/RSA/blog/tags/business-intelligence"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"}],"readingTime":58.333333333333336,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"Tableau","title":"Tableau","date":"2023-07-15T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Tableau","Business Intelligence","Analytics"],"keywords":["Collections","REST","SaaS","Tableau","Business Intelligence","Analytics"]},"unlisted":false,"lastUpdatedAt":1727804345000,"prevItem":{"title":"PingOne","permalink":"/RSA/blog/pingone"},"nextItem":{"title":"Qlik","permalink":"/RSA/blog/qlik"}},"content":"import logoPNG from \'@site/static/img/logos/Tableau - 180x180.png\';\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\n\\n<table> \\n  <tr>\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Tableau is a powerful data visualization tool that transforms complex datasets into interactive and insightful visuals, aiding informed decision-making. Its user-friendly interface enables easy creation of charts, graphs, and dashboards, enhancing data exploration and presentation across various industries and professions.<br /><br />Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\n  </tr>\\n</table>\\n\\n\x3c!-- truncate --\x3e\\n\\nIn Tableau Cloud, users, groups, and site roles are used to control access to content and features.\\n\\n**Users** are individual people who have access to a Tableau Cloud site. Users can be assigned different site roles, which determine what they can do on the site.\\n\\n**Groups** are collections of users. Groups can be used to simplify the process of assigning site roles to multiple users.\\n\\n**Site roles** define the level of access a user has to a Tableau Cloud site. Site roles include:\\n  - **Viewer**: Viewers can view published content, but they cannot create or modify content.\\n  - **Explorer**: Explorers can create and modify content, but they cannot publish content to the site.\\n  - **Creator**: Creators can create, modify, and publish content to the site.\\n  - **Site Administrator Creator**: Site Administrator Creators have all the capabilities of Creators, plus the ability to manage the site\'s users and settings.\\n  - **Site Administrator Explorer**: Site Administrator Explorers have all the capabilities of Explorers, plus the ability to manage the site\'s users and settings.\\n\\n## Application\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Application**.\\n3. Click on **Create Application** and select **Other Application**.\\n4. Enter the details as shown below.<br />![img](./img/1.png)\\n5. Click **Finish**.\\n---\\n## Account Collector\\nThis section explains the process for configuring an account collector for the Tableau application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Tableau**.\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br /><br />![img](./img/2.png)\\n5. Click **Next** and enter the connection details.<br /><br />![img](img/3.png)<br />The URL contains the site URL https://prod-useast-b.online.tableau.com (for my instance) which needs to be updated to suit your deployment and the site it. ***Site ID*** can be retrieved from the response to the token authentication request.<br /><br />![img](img/3-1.png)\\n6. Click **Next**. Select the data types that the collector will be collecting from Tableau<br /><br />![img](img/4.png)\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br /><br />![Alt text](img/5.png)<br />![Alt text](img/6.png)<br />![Alt text](img/7.png)<br />\\n<p align=\\"center\\"></p>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,email,lastLogin`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$.users.*.*.email`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.users.*.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>LastLogin</td>\\n    <td>`$.users.*.*.lastLogin`</td>\\n  </tr>\\n</table>\\n<p></p>\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br /><br />![Alt text](img/8.png)<br />![Alt text](img/6.png)<br />![Alt text](img/9.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,name`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>GroupId</td>\\n    <td>`$.groups.*.*.name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.groups.*.*.id`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br /><br />![Alt text](img/10.png)<br />![Alt text](img/6.png)<br />![Alt text](img/11.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/groups/${Id}/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.users.user.*.id`</td>\\n  </tr>\\n</table>\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br /><br />![Alt text](img/12.png)\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br /><br />![Alt text](img/13.png)\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br /><br />![Alt text](img/14.png)\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br /><br />![Alt text](img/15.png)\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br /><br />![Alt text](img/16.png)\\n\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\n\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Entitlement Collector\\n### Role Members\\nThis section explains the process for configuring an entitlement collector to collect site roles and assignments from the Tableau application. We will use the RSA G&L Generic REST collector for this purpose.\\n\\n:::info\\nSince Tableau does not provide an API for listing site roles, we will use a custom web service for the EDC. Refer to [Custom Web Service : Site Roles](#site-roles) for more information.\\n:::\\n\\n**Steps**\\n1. Login to RSA G&L console as AveksaAdmin.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Tableau**.\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br /><br />![Alt text](img/17.png)\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector). :bulb: **Note** that the Use Base URL for all API(s) will be unchecked.\\n6. Click **Next**. Select the data types that the collector will be collecting from Tableau.<br /><br />![Alt text](img/18.png)\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br /><br />![Alt text](img/19.png)<br />![Alt text](img/20.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`https://instance.securid.com/aveksa/custom/external_jsp/TableauSiteRolesv2.jsp`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>ApplicationRoleId</td>\\n    <td>`$.roles.*.role`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$.roles.*.description`</td>\\n  </tr>\\n</table>\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br /><br />![Alt text](img/21.png)<br />![Alt text](img/6.png)<br />![Alt text](img/22.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`https://instance.online.tableau.com/api/3.2/sites/SITE_ID/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,siteRole`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Application Role Id</td>\\n    <td>`$.users.user.*.siteRole`</td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.users.user.*.id`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br /><br />![Alt text](img/23.png)\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br /><br />![Alt text](img/24.png)\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Application Setup\\nThis section explains the process of setting up Personal Access Token (PAT) in Tableau for use within the collections process.\\n\\n**Steps**\\n1. Login to Tableau site https://instance.online.tableau.com/#/site/SITE/home.\\n2. By default, Personal Access Token (PAT) is disabled.\\n3. Navigate to **Settings** in the navigation panel and click on **General** tab.\\n4. Go to ***Personal Access Tokens*** section and enable PAT.<br /><br />![Alt text](img/25.png)\\n5. Navigate to Users in the navigation panel and click on the user whose PAT needs to be generated.\\n6. Click on Settings tab.\\n7. Go to Personal Access Tokens section. Provide a suitable token name and click Create Token.<br /><br />![Alt text](img/26.png)\\n8. Copy the Secret and click Done.\\n\\n## Authentication\\n### Token\\nThis section explains the process of setting up RSA G&L ADC with token authentication.\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Create or Edit a generic REST ADC that will be using **Token** authentication.\\n3. On the **Connection Details** page, configure the following.<br /><br />![Alt text](img/27.png)<br />![Alt text](img/28.png)<br />\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-post\\">POST</span></td>\\n  </tr>\\n  <tr>\\n    <td>Token URL</td>\\n    <td>`https://YOUR_INSTANCE/api/3.13/auth/signin`</td>\\n  </tr>\\n  <tr>\\n    <td>Username</td>\\n    <td>YOUR_PAT_NAME</td>\\n  </tr>\\n  <tr>\\n    <td>Password</td>\\n    <td>YOUR_PAT</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Content-Type</td>\\n    <td>`application/xml`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Body</span></td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\">\\n```xml\\n<?xml version=\\"1.0\\" encoding=\\"UTF-8\\"?>\\n<tsRequest>\\n\\t<credentials personalAccessTokenName=\\"${TokenUsername}\\" personalAccessTokenSecret=\\"${TokenPassword}\\">\\n\\t\\t<site contentUrl=\\"rsaps\\" />\\n\\t</credentials>\\n</tsRequest>\\n```      \\n    </td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Response Path</td>\\n    <td>`$.credentials.token`</td>\\n  </tr>\\n</table>\\n4. Save the collector configuration & test.\\n\\n## Custom Web Service\\n### Site Roles\\nSince Tableau does not provide an API for listing site roles, we will use a custom JSP that will publish the site roles. \\n\\n**Steps**\\n1. Open a text editor and save the contents below as `TableauSiteRolesv2.jsp.`\\n```java\\n<%@ page language=\\"java\\" contentType=\\"application/json\\" %>\\n<%\\n    String jsonData = \\"{\\"\\n        + \\"\\\\\\"roles\\\\\\": [\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"Creator\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Users with this role can create and publish content such as workbooks and data sources on the Tableau site.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"Explorer\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Users assigned as Explorers can interact with and explore content on the Tableau site. They can view and interact with dashboards and reports but do not have the ability to create or publish new content.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"ExplorerCanPublish\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Similar to the \\\\\\\\\\\\\\"Explorer\\\\\\\\\\\\\\" role, users with this role can explore content on the site. Additionally, they have the ability to create and publish their own content.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"ServerAdministrator\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Users with this role have full administrative control over the entire Tableau Server. They can manage users, groups, projects, data sources, and server-wide settings.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"SiteAdministratorExplorer\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Site Administrators have full control over a specific site. For the Explorer role, this means they can manage users, content, and site-specific settings.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"SiteAdministratorCreator\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Similar to SiteAdministratorExplorer, Site Administrators with the Creator role can manage users, content, and site settings. They also have the ability to create new content.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"Unlicensed\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Users assigned this role do not have access to content on the Tableau site. It is typically used for users who do not need access to Tableau resources.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"ReadOnly\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Users with this role can view content on the Tableau site but do not have the ability to interact with or modify it. They can consume dashboards and reports without making changes.\\\\\\"},\\"\\n        + \\"{\\\\\\"role\\\\\\":\\\\\\"Viewer\\\\\\",\\\\\\"description\\\\\\":\\\\\\"Similar to the ReadOnly role, Viewers can view and interact with content on the Tableau site, but they also have the ability to make changes to views and save personal copies of them.\\\\\\"}\\"\\n        + \\"]\\"\\n        + \\"}\\";\\n%>\\n\\n<%\\n    response.setContentType(\\"application/json\\");\\n    out.print(jsonData);\\n%>\\n```\\n2. Login to RSA G&L console as AveksaAdmin.\\n3. Navigate to ***Admin > User Interface.***\\n4. Click on ***Files***.\\n5. Select External JSP Pages and click on ***Upload***.\\n6. Select the `TableauSiteRolesv2.jsp` and click ***OK***.\\n7. Verify by accessing this URL in the browser https://instance.securid.com/aveksa/custom/external_jsp/TableauSiteRolesv2.jsp\\n\\n> <span class=\\"blog-id-text\\">COL003</span>\\n\\n[^API]: <LinkSvg /><a href=\\"https://Tableau.dev/apis\\" target=\\"_blank\\">Tableau APIs</a>"},{"id":"qlik","metadata":{"permalink":"/RSA/blog/qlik","source":"@site/blog/collections/qlik/qlik.md","title":"Qlik","description":"A Qlik application is a powerful data analytics tool that enables users to visualize and explore data for insightful decision-making. It facilitates interactive data discovery, real-time analysis, and dynamic dashboards. Qlik applications offer a user-friendly interface to create, manipulate, and share data-driven insights, fostering better understanding of trends and patterns within data.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-07-08T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Qlik","permalink":"/RSA/blog/tags/qlik"},{"inline":true,"label":"Business Intelligence","permalink":"/RSA/blog/tags/business-intelligence"},{"inline":true,"label":"Analytics","permalink":"/RSA/blog/tags/analytics"}],"readingTime":40.9,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"qlik","title":"Qlik","date":"2023-07-08T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","SaaS","Qlik","Business Intelligence","Analytics"],"keywords":["Collections","REST","SaaS","Qlik","Business Intelligence","Analytics"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Tableau","permalink":"/RSA/blog/Tableau"},"nextItem":{"title":"Freshservice","permalink":"/RSA/blog/freshservice"}},"content":"import logoPNG from \'@site/static/img/logos/Qlik - 180x180.png\';\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\n\\n<table>\\n  <tr>\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>A Qlik application is a powerful data analytics tool that enables users to visualize and explore data for insightful decision-making. It facilitates interactive data discovery, real-time analysis, and dynamic dashboards. Qlik applications offer a user-friendly interface to create, manipulate, and share data-driven insights, fostering better understanding of trends and patterns within data.<br></br><br></br>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\n  </tr>\\n</table>\\n\\n\x3c!-- truncate --\x3e\\n\\n**Users** are individuals who interact with Qlik applications to analyze, visualize, and gain insights from data. Each user has a unique account and login credentials to access the application. Users can have different roles and permissions based on their responsibilities within the organization.\\n\\n**Groups** are collections of users who share similar roles or responsibilities. They enable efficient management of permissions and access control. Users within the same group often require the same level of access to data and functionalities. Grouping users simplifies administration and ensures consistency in permissions.\\n\\n**Roles** define specific sets of permissions that determine what actions users can perform within the application. Roles can include privileges like creating, editing, or deleting data, as well as administrative capabilities. By assigning roles to users or groups, organizations ensure that users have the appropriate level of access and functionality based on their roles or responsibilities.\\n\\nIn Qlik applications, users are typically organized into groups. Roles are then assigned to these groups to define the permissions and actions that users within the group can undertake. This hierarchical approach streamlines access management: by modifying roles assigned to a group, permissions are automatically adjusted for all users within that group. This ensures data security, simplifies access control, and maintains consistency in permissions across the organization.\\n\\n## Application\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Application**.\\n3. Click on **Create Application** and select **Other Application**.\\n4. Enter the details as shown below.<br></br>![img](./img/1.png)\\n5. Click **Finish**.\\n---\\n## Account Collector\\nThis section explains the process for configuring an account collector for the Qlik application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Qlik**.\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br></br><br></br>![img](./img/2.png)\\n5. Click **Next** and enter the connection details. <br></br><br></br>![img](img/3.png)\\n6. Click **Next**. Select the data types that the collector will be collecting from Qlik<br></br><br></br>![img](img/4.png)\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/5.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/7.png)<br></br>\\n<p align=\\"center\\"></p>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,email,status`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$.data.*.email`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Status</td>\\n    <td>`$.data.*.status`</td>\\n  </tr>\\n</table>\\n<p></p>\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/8.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/9.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>GroupId</td>\\n    <td>`$.data.*.name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Status</td>\\n    <td>`$.data.*.status`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br></br><br></br>![Alt text](img/10.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/11.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,assignedGroups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Group Identifier</td>\\n    <td>`Group Identifier\\t$.data.*.assignedGroups.*.id`</td>\\n  </tr>\\n</table>\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br></br><br></br>![Alt text](img/12.png)\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br></br><br></br>![Alt text](img/13.png)\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br></br><br></br>![Alt text](img/14.png)\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br></br><br></br>![Alt text](img/15.png)\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br></br><br></br>![Alt text](img/16.png)\\n\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\n\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Entitlement Collector\\nThis section explains the process for configuring an entitlement collector to collect roles from Qlik application. We will use the RSA G&L Generic REST collector for this purpose.\\n\\n**Steps**\\n1. Login to RSA G&L console as AveksaAdmin.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Qlik**.\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br></br><br></br>![Alt text](img/17.png)\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\n6. Click **Next**. Select the data types that the collector will be collecting from Qlik.<br></br><br></br>![Alt text](img/18.png)\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/19.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/20.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/roles`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>ApplicationRoleId</td>\\n    <td>`$.data.*.name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$.data.*.description`</td>\\n  </tr>\\n</table>\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br></br><br></br>![Alt text](img/21.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/22.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/users`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Query Parameters</span></td>\\n  </tr>\\n  <tr>\\n    <td>fields</td>\\n    <td>`id,assignedRoles`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Application Role Id</td>\\n    <td>`$.data.*.assignedRoles.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **App-Role Group Membership Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/23.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/24.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v1/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td>Authorization</td>\\n    <td>`Bearer ${AuthenticationToken}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Application Role Id</td>\\n    <td>`$.data.*.assignedRoles.*.id`</td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.data.*.id`</td>\\n  </tr>\\n</table>\\n10. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br></br>\\n11. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br></br><br></br>![Alt text](img/25.png)\\n12. Click **Next**. In the **Group Evaluation**, map the account collector to account value.<br></br><br></br>![Alt text](img/26.png)\\n13. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\n---\\n## Application Setup\\nThis section explains the process of setting up a service account in Qlik for use within the collections process.\\n\\n**Steps**\\n1. Login to Qlik Management console https://instance.qlikcloud.com/console/home.\\n2. By default, API keys are disabled. Navigate to **Settings** and, under **API Keys**, select *Enable API Keys*.<br></br><br></br>![Alt text](img/27.png)\\n3. Navigate to **API Keys** and click on **Generate New**.\\n4. Click on **Generate New Key**.\\n5. Provide a suitable name and an expiration period for the key.<br></br><br></br>![Alt text](img/28.png)\\n6. Click **Generate**\\n7. Copy and retain the API key.\\n\\n> <span class=\\"blog-id-text\\">COL002</span>\\n\\n[^API]: <LinkSvg /><a href=\\"https://qlik.dev/apis\\" target=\\"_blank\\">Qlik APIs</a>"},{"id":"freshservice","metadata":{"permalink":"/RSA/blog/freshservice","source":"@site/blog/collections/freshservice/freshservice.md","title":"Freshservice","description":"Freshservice is a cloud-based IT service management platform that streamlines and automates IT tasks. It offers a user-friendly interface, ticketing system, asset management, and reporting tools. With its intuitive design, Freshservice enables organizations to efficiently manage their IT services, track incidents, and maintain a well-organized IT infrastructure.Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c","date":"2023-07-01T00:00:00.000Z","tags":[{"inline":true,"label":"Collections","permalink":"/RSA/blog/tags/collections"},{"inline":true,"label":"REST","permalink":"/RSA/blog/tags/rest"},{"inline":true,"label":"ITSM","permalink":"/RSA/blog/tags/itsm"},{"inline":true,"label":"SaaS","permalink":"/RSA/blog/tags/saa-s"},{"inline":true,"label":"Freshservice","permalink":"/RSA/blog/tags/freshservice"},{"inline":true,"label":"Ticketing","permalink":"/RSA/blog/tags/ticketing"}],"readingTime":33.36666666666667,"hasTruncateMarker":true,"authors":[{"name":"Pradeep Kadambar","title":"Creator","url":"https://www.linkedin.com/in/pradeepkg/","imageURL":"https://github.com/pradeepkg.png","key":"pradeepkg","page":null}],"frontMatter":{"slug":"freshservice","title":"Freshservice","date":"2023-07-01T00:00:00.000Z","authors":"pradeepkg","tags":["Collections","REST","ITSM","SaaS","Freshservice","Ticketing"],"keywords":["Collections","REST","ITSM","SaaS","Freshservice","Ticketing"]},"unlisted":false,"lastUpdatedAt":1715729236000,"prevItem":{"title":"Qlik","permalink":"/RSA/blog/qlik"}},"content":"import logoPNG from \'@site/static/img/logos/Freshservice - 180x180.png\';\\nimport LinkSvg from \'../../iconmonstr-link-thin.svg\';\\n\\n<table>\\n  <tr>\\n    <td width=\\"180\\" class=\\"image-cell\\"><img src={logoPNG} width=\\"180\\" height=\\"180\\"/>Freshservice is a cloud-based IT service management platform that streamlines and automates IT tasks. It offers a user-friendly interface, ticketing system, asset management, and reporting tools. With its intuitive design, Freshservice enables organizations to efficiently manage their IT services, track incidents, and maintain a well-organized IT infrastructure.<br></br><br></br>Identities \u274c | Accounts \u2714\ufe0f | Groups \u2714\ufe0f | App Roles \u2714\ufe0f | Entitlements \u274c</td>\\n  </tr>\\n</table>\\n\\n\x3c!-- truncate --\x3e\\n\\n**Users** are individuals who interact with the Freshservice platform. They can submit tickets, access knowledge articles, and perform various actions based on their assigned roles and permissions. Each user has a unique account tied to their email, and they can be assigned to specific groups or roles.\\n\\n**Groups** are collections of users with similar roles, responsibilities, or access requirements. By grouping users together, you can streamline permissions and ensure that specific information or functionalities are available to the right people. For instance, you might have a \\"Support Team\\" group that has access to support-related features.\\n\\n**Roles** define the level of access and permissions a user or a group of users has within Freshservice. Roles determine what actions users can perform and what information they can view or modify. Freshservice typically offers predefined roles like agents, admins, and requesters, each with distinct sets of privileges.\\n\\n## Application\\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Application**.\\n3. Click on **Create Application** and select **Other Application**.\\n4. Enter the details as shown below.<br></br>![img](./img/1.png)\\n5. Click **Finish**.\\n---\\n## Account Collector\\nThis section explains the process for configuring an account collector for the Freshservice application. We will use the RSA G&L Generic REST collector [^API] for this purpose.  \\n\\n**Steps**\\n1. Login to RSA G&L console as System Administrator.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Freshservice**.\\n4. Navigate to **Collectors** tab and click on **Create Account Collector**. Enter the details as shown below.<br></br><br></br>![img](./img/2.png)\\n5. Click **Next** and enter the connection details. Freshservice supports Basic Access Authorization only with API key [^Authentication]. The API key will be configured as user name and you can provide arbitrary password.<br></br><br></br>![img](img/3.png)\\n6. Click **Next**. Select the data types that the collector will be collecting from Freshservice<br></br><br></br>![img](img/4.png)\\n7. Click **Next**. On the **Account Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/5.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/7.png)<br></br>\\n<p align=\\"center\\"></p>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v2/agents`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$.agents[*].email`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.agents[*].id`</td>\\n  </tr>\\n  <tr>\\n    <td>ExternalID</td>\\n    <td>`$.agents[*].external_id`</td>\\n  </tr>\\n</table>\\n<p></p>\\n8. Click **Next**. On the **Group Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/8.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/9.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v2/groups`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>GroupId</td>\\n    <td>`$.groups[*].name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.groups[*].id`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$.groups[*].description`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. On the **Account Group Membership**\xa0page, enter the following configurations.<br></br><br></br>![Alt text](img/10.png)<br></br>![Alt text](img/11.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v2/groups/${Id}`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>AccountId</td>\\n    <td>`$.group.members.*`</td>\\n  </tr>\\n</table>\\n10. Click\xa0**Next**. In the **Map Collector Attributes to Account Attributes**, map the collected account attributes.<br></br><br></br>![Alt text](img/12.png)\\n11. Click **Next**. In the **Map Collector Attributes to Account Mapping Attributes**, map the user reference attribute.<br></br><br></br>![Alt text](img/13.png)\\n12. Click **Next**. In the **Map Collector Attributes to Group Attributes**, map the collected group attributes.<br></br><br></br>![Alt text](img/14.png)\\n13. Click **Next**. In the **User Resolution Rules**, map the user to account.<br></br><br></br>![Alt text](img/15.png)\\n14. Click **Next**. In the **Member Account Resolution Rules**, map the account.<br></br><br></br>![Alt text](img/16.png)\\n\\n:bulb: **Info:**  This value MUST always be mapped to the Account Name for any generic REST collector.\\n\\n15. Click **Finish**. Use the `Test` function to make sure the configurations are accurate.\\n---\\n## Entitlement Collector\\nThis section explains the process for configuring an entitlement collector to collect roles from Freshservice application. We will use the RSA G&L Generic REST collector for this purpose.\\n\\n**Steps**\\n1. Login to RSA G&L console as AveksaAdmin.\\n2. Navigate to **Resources > Applications**.\\n3. Click on **Freshservice**.\\n4. Navigate to **Collectors** tab and click on ***Create Entitlement Collector***. Enter the details as shown below.<br></br><br></br>![Alt text](img/17.png)\\n5. Click **Next** and enter the connection details as shown in Step 5 of [Account Collector](#account-collector).\\n6. Click **Next**. Select the data types that the collector will be collecting from Freshservice.<br></br><br></br>![Alt text](img/18.png)\\n7. Click **Next**. On the **App Role Data** page, enter the following configurations.<br></br><br></br>![Alt text](img/19.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/20.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v2/roles`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>ApplicationRoleId</td>\\n    <td>`$.roles[*].name`</td>\\n  </tr>\\n  <tr>\\n    <td>Id</td>\\n    <td>`$.roles[*].id`</td>\\n  </tr>\\n  <tr>\\n    <td>Description</td>\\n    <td>`$.roles[*].description`</td>\\n  </tr>\\n</table>\\n8. Click **Next**. On the **App-Role Account Membership** collection page, enter the following configurations.<br></br><br></br>![Alt text](img/21.png)<br></br>![Alt text](img/6.png)<br></br>![Alt text](img/22.png)<br></br>\\n<table class=\\"table-container\\">\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request</span></td>\\n  </tr>\\n  <tr>\\n    <td>Method</td>\\n    <td><span class=\\"method-get\\">GET</span></td>\\n  </tr>\\n  <tr>\\n    <td>URL</td>\\n    <td>`/api/v2/agents`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Request Headers</span></td>\\n  </tr>\\n  <tr>\\n    <td>Accept</td>\\n    <td>`application/json`</td>\\n  </tr>\\n  <tr>\\n    <td colspan=\\"2\\"><span class=\\"header-2-text\\">Response Mappings</span></td>\\n  </tr>\\n  <tr>\\n    <td>Application Role Id</td>\\n    <td>`$.agents.*.roles.*.role_id`</td>\\n  </tr>\\n  <tr>\\n    <td>Account Identifier</td>\\n    <td>`$.agents.*.id`</td>\\n  </tr>\\n</table>\\n9. Click **Next**. In the **Map Collector Attributes to App Role Attributes**, map the collected account attributes.<br></br>\\n10. Click **Next**. In the **Account Evaluation**, map the account collector to account value.<br></br><br></br>![Alt text](img/23.png)\\n11. Click **Next** and then click **Finish**. Use the `Test` function to make sure the configurations are accurate\\n---\\n## Application Setup\\nThis section explains the process of setting up a service account in Freshservice for use within the collections process.\\n\\n**Steps**\\n1. Login to Freshservice dashboard.\\n2. On the right hand corner, click on **Profile Settings**.<br></br><br></br>![Alt text](img/24.png)\\n3. Solve the captcha and copy the API key.<br></br><br></br>![Alt text](img/25.png)\\n\\n> <span class=\\"blog-id-text\\">COL001</span>\\n\\n[^API]: <LinkSvg /><a href=\\"https://api.freshservice.com/\\" target=\\"_blank\\">API Reference</a>\\n[^Authentication]: <LinkSvg /><a href=\\"https://api.freshservice.com/#authentication\\" target=\\"_blank\\">Freshservice authentication</a>"}]}}')}}]);